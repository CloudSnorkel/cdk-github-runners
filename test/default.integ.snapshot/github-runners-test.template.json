{
 "Resources": {
  "Vpc8378EB38": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "github-runners-test/Vpc"
     }
    ]
   }
  },
  "VpcPublicSubnet1Subnet5C2D37C4": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/17",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "github-runners-test/Vpc/PublicSubnet1"
     }
    ]
   }
  },
  "VpcPublicSubnet1RouteTable6C95E38E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "github-runners-test/Vpc/PublicSubnet1"
     }
    ]
   }
  },
  "VpcPublicSubnet1RouteTableAssociation97140677": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    }
   }
  },
  "VpcPublicSubnet1DefaultRoute3DA9E72A": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ]
  },
  "VpcPublicSubnet2Subnet691E08A3": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/17",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "github-runners-test/Vpc/PublicSubnet2"
     }
    ]
   }
  },
  "VpcPublicSubnet2RouteTable94F7E489": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "github-runners-test/Vpc/PublicSubnet2"
     }
    ]
   }
  },
  "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet2RouteTable94F7E489"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet2Subnet691E08A3"
    }
   }
  },
  "VpcPublicSubnet2DefaultRoute97F91067": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet2RouteTable94F7E489"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ]
  },
  "VpcIGWD7BA715C": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "github-runners-test/Vpc"
     }
    ]
   }
  },
  "VpcVPCGWBF912B6E": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "InternetGatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   }
  },
  "cluster611F8AFF": {
   "Type": "AWS::ECS::Cluster"
  },
  "clusterA4C38409": {
   "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
   "Properties": {
    "CapacityProviders": [
     "FARGATE",
     "FARGATE_SPOT"
    ],
    "Cluster": {
     "Ref": "cluster611F8AFF"
    },
    "DefaultCapacityProviderStrategy": []
   }
  },
  "FargatebuilderRoleDA300BCD": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FargatebuilderRoleDefaultPolicyE56CF8DA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderLogs2F794091",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "FargatebuilderCodeBuild4F182743"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "FargatebuilderCodeBuild4F182743"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "FargatebuilderCodeBuild4F182743"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderRepository8F7BA13C",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:PutImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderRepository8F7BA13C",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargatebuilderRoleDefaultPolicyE56CF8DA",
    "Roles": [
     {
      "Ref": "FargatebuilderRoleDA300BCD"
     }
    ]
   }
  },
  "FargatebuilderRepository8F7BA13C": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "ImageScanningConfiguration": {
     "ScanOnPush": true
    },
    "ImageTagMutability": "MUTABLE",
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Remove untagged images that have been replaced by CodeBuild\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countNumber\":1,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}}]}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "FargatebuilderLogs2F794091": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "FargatebuilderCodeBuild4F182743": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:6.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "FargatebuilderRoleDA300BCD",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
        {
         "Fn::GetAtt": [
          "FargatebuilderRepository8F7BA13C",
          "Arn"
         ]
        },
        "\",\n      \"REPO_URI\": \"",
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "FargatebuilderRepository8F7BA13C",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "FargatebuilderRepository8F7BA13C",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "FargatebuilderRepository8F7BA13C"
        },
        "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
        {
         "Ref": "AWS::AccountId"
        },
        ".dkr.ecr.",
        {
         "Ref": "AWS::Region"
        },
        ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get upgrade -y\\nDEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\\ncurl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\\ndpkg -i -E /tmp/amazon-cloudwatch-agent.deb\\nrm /tmp/amazon-cloudwatch-agent.deb\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\naddgroup runner\\nadduser --system --disabled-password --home /home/runner --ingroup runner runner\\nusermod -aG sudo runner\\necho \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nadd-apt-repository ppa:git-core/ppa\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\\necho \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\n/home/runner/bin/installdependencies.sh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-GithubRunner.sh\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
        },
        " asset6-Custom-Undefined-0\",\n        \"cat > component6-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lts/ubuntu:22.04\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-GithubRunner.sh /tmp\\nRUN /tmp/component5-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset6-Custom-Undefined-0 FUNDING.yml\\nCOPY component6-Custom-Undefined.sh /tmp\\nRUN /tmp/component6-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Build docker image for self-hosted GitHub runner github-runners-test/Fargate builder (Ubuntu Linux/X86_64)",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "FargatebuilderLogs2F794091"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "FargatebuilderCodeBuildEventsRole92F2259E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FargatebuilderCodeBuildEventsRoleDefaultPolicyD2B048CD": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderCodeBuild4F182743",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargatebuilderCodeBuildEventsRoleDefaultPolicyD2B048CD",
    "Roles": [
     {
      "Ref": "FargatebuilderCodeBuildEventsRole92F2259E"
     }
    ]
   }
  },
  "FargatebuilderCodeBuildBuildFailed1D2D3785": {
   "Type": "AWS::CodeStarNotifications::NotificationRule",
   "Properties": {
    "DetailType": "FULL",
    "EventTypeIds": [
     "codebuild-project-build-state-failed"
    ],
    "Name": "githubrunnerstestFargatebuilderCodeBuildBuildFailed8BDBCD42",
    "Resource": {
     "Fn::GetAtt": [
      "FargatebuilderCodeBuild4F182743",
      "Arn"
     ]
    },
    "Targets": [
     {
      "TargetAddress": {
       "Ref": "runnersFailedRunnerImageBuilds233D2237"
      },
      "TargetType": "SNS"
     }
    ]
   }
  },
  "FargatebuilderCRPolicy22FB4B05": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderCodeBuild4F182743",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchDeleteImage",
        "ecr:ListImages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderRepository8F7BA13C",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargatebuilderCRPolicy22FB4B05",
    "Roles": [
     {
      "Ref": "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837"
     }
    ]
   }
  },
  "FargatebuilderBuilder0834CD0B": {
   "Type": "Custom::ImageBuilder",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
      "Arn"
     ]
    },
    "RepoName": {
     "Ref": "FargatebuilderRepository8F7BA13C"
    },
    "ProjectName": {
     "Ref": "FargatebuilderCodeBuild4F182743"
    },
    "BuildSpec": {
     "Fn::Join": [
      "",
      [
       "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
       {
        "Fn::GetAtt": [
         "FargatebuilderRepository8F7BA13C",
         "Arn"
        ]
       },
       "\",\n      \"REPO_URI\": \"",
       {
        "Fn::Select": [
         4,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "FargatebuilderRepository8F7BA13C",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".dkr.ecr.",
       {
        "Fn::Select": [
         3,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "FargatebuilderRepository8F7BA13C",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".",
       {
        "Ref": "AWS::URLSuffix"
       },
       "/",
       {
        "Ref": "FargatebuilderRepository8F7BA13C"
       },
       "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
       {
        "Ref": "AWS::AccountId"
       },
       ".dkr.ecr.",
       {
        "Ref": "AWS::Region"
       },
       ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get upgrade -y\\nDEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\\ncurl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\\ndpkg -i -E /tmp/amazon-cloudwatch-agent.deb\\nrm /tmp/amazon-cloudwatch-agent.deb\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\naddgroup runner\\nadduser --system --disabled-password --home /home/runner --ingroup runner runner\\nusermod -aG sudo runner\\necho \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nadd-apt-repository ppa:git-core/ppa\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\\necho \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\n/home/runner/bin/installdependencies.sh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-GithubRunner.sh\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       " asset6-Custom-Undefined-0\",\n        \"cat > component6-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lts/ubuntu:22.04\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-GithubRunner.sh /tmp\\nRUN /tmp/component5-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset6-Custom-Undefined-0 FUNDING.yml\\nCOPY component6-Custom-Undefined.sh /tmp\\nRUN /tmp/component6-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
      ]
     ]
    }
   },
   "DependsOn": [
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1LogRetention13129CEB",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837",
    "FargatebuilderCodeBuildBuildFailed1D2D3785",
    "FargatebuilderCodeBuildEventsRoleDefaultPolicyD2B048CD",
    "FargatebuilderCodeBuildEventsRole92F2259E",
    "FargatebuilderCodeBuild4F182743",
    "FargatebuilderCRPolicy22FB4B05",
    "FargatebuilderRoleDefaultPolicyE56CF8DA",
    "FargatebuilderRoleDA300BCD"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "FargatebuilderBuildSchedule0B083A73": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Rebuild runner image for ",
       {
        "Ref": "FargatebuilderRepository8F7BA13C"
       }
      ]
     ]
    },
    "ScheduleExpression": "rate(7 days)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "FargatebuilderCodeBuild4F182743",
        "Arn"
       ]
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "FargatebuilderCodeBuildEventsRole92F2259E",
        "Arn"
       ]
      }
     }
    ]
   }
  },
  "FargatebuilderarmRoleB6343E8F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FargatebuilderarmRoleDefaultPolicy89F1BA94": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmLogs63D60F4D",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "FargatebuilderarmCodeBuild0D30679A"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "FargatebuilderarmCodeBuild0D30679A"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "FargatebuilderarmCodeBuild0D30679A"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmRepository77DCC132",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:PutImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmRepository77DCC132",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargatebuilderarmRoleDefaultPolicy89F1BA94",
    "Roles": [
     {
      "Ref": "FargatebuilderarmRoleB6343E8F"
     }
    ]
   }
  },
  "FargatebuilderarmRepository77DCC132": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "ImageScanningConfiguration": {
     "ScanOnPush": true
    },
    "ImageTagMutability": "MUTABLE",
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Remove untagged images that have been replaced by CodeBuild\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countNumber\":1,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}}]}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "FargatebuilderarmLogs63D60F4D": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "FargatebuilderarmCodeBuild0D30679A": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/amazonlinux2-aarch64-standard:2.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "ARM_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "FargatebuilderarmRoleB6343E8F",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
        {
         "Fn::GetAtt": [
          "FargatebuilderarmRepository77DCC132",
          "Arn"
         ]
        },
        "\",\n      \"REPO_URI\": \"",
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "FargatebuilderarmRepository77DCC132",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "FargatebuilderarmRepository77DCC132",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "FargatebuilderarmRepository77DCC132"
        },
        "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
        {
         "Ref": "AWS::AccountId"
        },
        ".dkr.ecr.",
        {
         "Ref": "AWS::Region"
        },
        ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get upgrade -y\\nDEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\\ncurl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb\\ndpkg -i -E /tmp/amazon-cloudwatch-agent.deb\\nrm /tmp/amazon-cloudwatch-agent.deb\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\naddgroup runner\\nadduser --system --disabled-password --home /home/runner --ingroup runner runner\\nusermod -aG sudo runner\\necho \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nadd-apt-repository ppa:git-core/ppa\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\\necho \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\n/home/runner/bin/installdependencies.sh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-GithubRunner.sh\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
        },
        " asset6-Custom-Undefined-0\",\n        \"cat > component6-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lts/ubuntu:22.04\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-GithubRunner.sh /tmp\\nRUN /tmp/component5-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset6-Custom-Undefined-0 FUNDING.yml\\nCOPY component6-Custom-Undefined.sh /tmp\\nRUN /tmp/component6-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Build docker image for self-hosted GitHub runner github-runners-test/Fargate builder arm (Ubuntu Linux/ARM64)",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "FargatebuilderarmLogs63D60F4D"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "FargatebuilderarmCodeBuildEventsRole20E8CE66": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FargatebuilderarmCodeBuildEventsRoleDefaultPolicy39CAA8CB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmCodeBuild0D30679A",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargatebuilderarmCodeBuildEventsRoleDefaultPolicy39CAA8CB",
    "Roles": [
     {
      "Ref": "FargatebuilderarmCodeBuildEventsRole20E8CE66"
     }
    ]
   }
  },
  "FargatebuilderarmCodeBuildBuildFailed264992E6": {
   "Type": "AWS::CodeStarNotifications::NotificationRule",
   "Properties": {
    "DetailType": "FULL",
    "EventTypeIds": [
     "codebuild-project-build-state-failed"
    ],
    "Name": "githubrunnerstestFargatebuilderarmCodeBuildBuildFailed60EDAF2B",
    "Resource": {
     "Fn::GetAtt": [
      "FargatebuilderarmCodeBuild0D30679A",
      "Arn"
     ]
    },
    "Targets": [
     {
      "TargetAddress": {
       "Ref": "runnersFailedRunnerImageBuilds233D2237"
      },
      "TargetType": "SNS"
     }
    ]
   }
  },
  "FargatebuilderarmCRPolicyD241BB66": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmCodeBuild0D30679A",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchDeleteImage",
        "ecr:ListImages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmRepository77DCC132",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargatebuilderarmCRPolicyD241BB66",
    "Roles": [
     {
      "Ref": "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837"
     }
    ]
   }
  },
  "FargatebuilderarmBuilder48D1AF5A": {
   "Type": "Custom::ImageBuilder",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
      "Arn"
     ]
    },
    "RepoName": {
     "Ref": "FargatebuilderarmRepository77DCC132"
    },
    "ProjectName": {
     "Ref": "FargatebuilderarmCodeBuild0D30679A"
    },
    "BuildSpec": {
     "Fn::Join": [
      "",
      [
       "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
       {
        "Fn::GetAtt": [
         "FargatebuilderarmRepository77DCC132",
         "Arn"
        ]
       },
       "\",\n      \"REPO_URI\": \"",
       {
        "Fn::Select": [
         4,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "FargatebuilderarmRepository77DCC132",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".dkr.ecr.",
       {
        "Fn::Select": [
         3,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "FargatebuilderarmRepository77DCC132",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".",
       {
        "Ref": "AWS::URLSuffix"
       },
       "/",
       {
        "Ref": "FargatebuilderarmRepository77DCC132"
       },
       "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
       {
        "Ref": "AWS::AccountId"
       },
       ".dkr.ecr.",
       {
        "Ref": "AWS::Region"
       },
       ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get upgrade -y\\nDEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\\ncurl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb\\ndpkg -i -E /tmp/amazon-cloudwatch-agent.deb\\nrm /tmp/amazon-cloudwatch-agent.deb\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\naddgroup runner\\nadduser --system --disabled-password --home /home/runner --ingroup runner runner\\nusermod -aG sudo runner\\necho \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nadd-apt-repository ppa:git-core/ppa\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\\necho \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\n/home/runner/bin/installdependencies.sh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-GithubRunner.sh\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       " asset6-Custom-Undefined-0\",\n        \"cat > component6-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lts/ubuntu:22.04\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-GithubRunner.sh /tmp\\nRUN /tmp/component5-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset6-Custom-Undefined-0 FUNDING.yml\\nCOPY component6-Custom-Undefined.sh /tmp\\nRUN /tmp/component6-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
      ]
     ]
    }
   },
   "DependsOn": [
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1LogRetention13129CEB",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837",
    "FargatebuilderarmCodeBuildBuildFailed264992E6",
    "FargatebuilderarmCodeBuildEventsRoleDefaultPolicy39CAA8CB",
    "FargatebuilderarmCodeBuildEventsRole20E8CE66",
    "FargatebuilderarmCodeBuild0D30679A",
    "FargatebuilderarmCRPolicyD241BB66",
    "FargatebuilderarmRoleDefaultPolicy89F1BA94",
    "FargatebuilderarmRoleB6343E8F"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "FargatebuilderarmBuildSchedule854B2895": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Rebuild runner image for ",
       {
        "Ref": "FargatebuilderarmRepository77DCC132"
       }
      ]
     ]
    },
    "ScheduleExpression": "rate(7 days)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "FargatebuilderarmCodeBuild0D30679A",
        "Arn"
       ]
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "FargatebuilderarmCodeBuildEventsRole20E8CE66",
        "Arn"
       ]
      }
     }
    ]
   }
  },
  "LambdaImageBuilderx64RoleEE3EE1CB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "LambdaImageBuilderx64RoleDefaultPolicyC6AE2BE4": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Logs1C003BB4",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "LambdaImageBuilderx64CodeBuild67DE14C8"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "LambdaImageBuilderx64CodeBuild67DE14C8"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "LambdaImageBuilderx64CodeBuild67DE14C8"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Repository57F632F1",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:PutImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Repository57F632F1",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaImageBuilderx64RoleDefaultPolicyC6AE2BE4",
    "Roles": [
     {
      "Ref": "LambdaImageBuilderx64RoleEE3EE1CB"
     }
    ]
   }
  },
  "LambdaImageBuilderx64Repository57F632F1": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "ImageScanningConfiguration": {
     "ScanOnPush": true
    },
    "ImageTagMutability": "MUTABLE",
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Remove untagged images that have been replaced by CodeBuild\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countNumber\":1,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}}]}"
    },
    "RepositoryPolicyText": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "LambdaImageBuilderx64RepositoryPushrule1C711F47": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Update GitHub Actions runner Lambda on ECR image push",
    "EventPattern": {
     "detail-type": [
      "ECR Image Action"
     ],
     "detail": {
      "action-type": [
       "PUSH"
      ],
      "repository-name": [
       {
        "Ref": "LambdaImageBuilderx64Repository57F632F1"
       }
      ],
      "image-tag": [
       "latest"
      ],
      "result": [
       "SUCCESS"
      ]
     },
     "source": [
      "aws.ecr"
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "updatelambdadcc036c8876b451ea2c1552f9e06e9e180810ABA",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": {
       "Fn::Join": [
        "",
        [
         "{\"lambdaName\":\"",
         {
          "Ref": "LambdaFunction9233991D"
         },
         "\",\"repositoryUri\":\"",
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "LambdaImageBuilderx64Repository57F632F1",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "LambdaImageBuilderx64Repository57F632F1",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "LambdaImageBuilderx64Repository57F632F1"
         },
         "\",\"repositoryTag\":\"latest\"}"
        ]
       ]
      }
     }
    ]
   }
  },
  "LambdaImageBuilderx64RepositoryPushruleAllowEventRulegithubrunnerstestupdatelambdadcc036c8876b451ea2c1552f9e06e9e17433A98EAF8930B2": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "updatelambdadcc036c8876b451ea2c1552f9e06e9e180810ABA",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "LambdaImageBuilderx64RepositoryPushrule1C711F47",
      "Arn"
     ]
    }
   }
  },
  "LambdaImageBuilderx64Logs1C003BB4": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "LambdaImageBuilderx64CodeBuild67DE14C8": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:6.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "LambdaImageBuilderx64RoleEE3EE1CB",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
        {
         "Fn::GetAtt": [
          "LambdaImageBuilderx64Repository57F632F1",
          "Arn"
         ]
        },
        "\",\n      \"REPO_URI\": \"",
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageBuilderx64Repository57F632F1",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageBuilderx64Repository57F632F1",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "LambdaImageBuilderx64Repository57F632F1"
        },
        "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
        {
         "Ref": "AWS::AccountId"
        },
        ".dkr.ecr.",
        {
         "Ref": "AWS::Region"
        },
        ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nyum update -y\\nyum install -y jq tar gzip bzip2 which binutils zip unzip sudo shadow-utils\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\n/usr/sbin/groupadd runner\\n/usr/sbin/useradd --system --shell /usr/sbin/nologin --home-dir /home/runner --gid runner runner\\nmkdir -p /home/runner\\nchown runner /home/runner\\necho \\\"%runner   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nyum install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSSL https://cli.github.com/packages/rpm/gh-cli.repo -o /etc/yum.repos.d/gh-cli.repo\\nyum install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\nyum install -y openssl-libs krb5-libs zlib libicu60\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-GithubRunner.sh\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/2ed40b7362410e8fc94308e93208caeaba3457d493db292221633d84af7454fe.js"
        },
        " asset6-Lambda-Entrypoint-0\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/86dfcbcdb3c3fd028fb3abe4342e42137a2928bc0eb4842117b8ccc39447ef5b.sh"
        },
        " asset6-Lambda-Entrypoint-1\",\n        \"cat > component6-Lambda-Entrypoint.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-Lambda-Entrypoint.sh\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
        },
        " asset7-Custom-Undefined-0\",\n        \"cat > component7-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component7-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lambda/nodejs:14-x86_64\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-GithubRunner.sh /tmp\\nRUN /tmp/component5-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset6-Lambda-Entrypoint-0 ${LAMBDA_TASK_ROOT}/runner.js\\nCOPY asset6-Lambda-Entrypoint-1 ${LAMBDA_TASK_ROOT}/runner.sh\\nCOPY component6-Lambda-Entrypoint.sh /tmp\\nRUN /tmp/component6-Lambda-Entrypoint.sh\\nWORKDIR ${LAMBDA_TASK_ROOT}\\nCMD [\\\"runner.handler\\\"]\\nCOPY asset7-Custom-Undefined-0 FUNDING.yml\\nCOPY component7-Custom-Undefined.sh /tmp\\nRUN /tmp/component7-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Build docker image for self-hosted GitHub runner github-runners-test/Lambda Image Builder x64 (Amazon Linux 2/X86_64)",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "LambdaImageBuilderx64Logs1C003BB4"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "LambdaImageBuilderx64CodeBuildEventsRoleF8B03C21": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "LambdaImageBuilderx64CodeBuildEventsRoleDefaultPolicy2B894997": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64CodeBuild67DE14C8",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaImageBuilderx64CodeBuildEventsRoleDefaultPolicy2B894997",
    "Roles": [
     {
      "Ref": "LambdaImageBuilderx64CodeBuildEventsRoleF8B03C21"
     }
    ]
   }
  },
  "LambdaImageBuilderx64CodeBuildBuildFailed7E839416": {
   "Type": "AWS::CodeStarNotifications::NotificationRule",
   "Properties": {
    "DetailType": "FULL",
    "EventTypeIds": [
     "codebuild-project-build-state-failed"
    ],
    "Name": "thubrunnerstestLambdaImageBuilderx64CodeBuildBuildFailedE326D971",
    "Resource": {
     "Fn::GetAtt": [
      "LambdaImageBuilderx64CodeBuild67DE14C8",
      "Arn"
     ]
    },
    "Targets": [
     {
      "TargetAddress": {
       "Ref": "runnersFailedRunnerImageBuilds233D2237"
      },
      "TargetType": "SNS"
     }
    ]
   }
  },
  "LambdaImageBuilderx64CRPolicy6DBE0D1F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64CodeBuild67DE14C8",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchDeleteImage",
        "ecr:ListImages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Repository57F632F1",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaImageBuilderx64CRPolicy6DBE0D1F",
    "Roles": [
     {
      "Ref": "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837"
     }
    ]
   }
  },
  "LambdaImageBuilderx64Builder42F384AF": {
   "Type": "Custom::ImageBuilder",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
      "Arn"
     ]
    },
    "RepoName": {
     "Ref": "LambdaImageBuilderx64Repository57F632F1"
    },
    "ProjectName": {
     "Ref": "LambdaImageBuilderx64CodeBuild67DE14C8"
    },
    "BuildSpec": {
     "Fn::Join": [
      "",
      [
       "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
       {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Repository57F632F1",
         "Arn"
        ]
       },
       "\",\n      \"REPO_URI\": \"",
       {
        "Fn::Select": [
         4,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "LambdaImageBuilderx64Repository57F632F1",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".dkr.ecr.",
       {
        "Fn::Select": [
         3,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "LambdaImageBuilderx64Repository57F632F1",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".",
       {
        "Ref": "AWS::URLSuffix"
       },
       "/",
       {
        "Ref": "LambdaImageBuilderx64Repository57F632F1"
       },
       "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
       {
        "Ref": "AWS::AccountId"
       },
       ".dkr.ecr.",
       {
        "Ref": "AWS::Region"
       },
       ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nyum update -y\\nyum install -y jq tar gzip bzip2 which binutils zip unzip sudo shadow-utils\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\n/usr/sbin/groupadd runner\\n/usr/sbin/useradd --system --shell /usr/sbin/nologin --home-dir /home/runner --gid runner runner\\nmkdir -p /home/runner\\nchown runner /home/runner\\necho \\\"%runner   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nyum install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSSL https://cli.github.com/packages/rpm/gh-cli.repo -o /etc/yum.repos.d/gh-cli.repo\\nyum install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\nyum install -y openssl-libs krb5-libs zlib libicu60\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-GithubRunner.sh\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/2ed40b7362410e8fc94308e93208caeaba3457d493db292221633d84af7454fe.js"
       },
       " asset6-Lambda-Entrypoint-0\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/86dfcbcdb3c3fd028fb3abe4342e42137a2928bc0eb4842117b8ccc39447ef5b.sh"
       },
       " asset6-Lambda-Entrypoint-1\",\n        \"cat > component6-Lambda-Entrypoint.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-Lambda-Entrypoint.sh\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       " asset7-Custom-Undefined-0\",\n        \"cat > component7-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component7-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lambda/nodejs:14-x86_64\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-GithubRunner.sh /tmp\\nRUN /tmp/component5-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset6-Lambda-Entrypoint-0 ${LAMBDA_TASK_ROOT}/runner.js\\nCOPY asset6-Lambda-Entrypoint-1 ${LAMBDA_TASK_ROOT}/runner.sh\\nCOPY component6-Lambda-Entrypoint.sh /tmp\\nRUN /tmp/component6-Lambda-Entrypoint.sh\\nWORKDIR ${LAMBDA_TASK_ROOT}\\nCMD [\\\"runner.handler\\\"]\\nCOPY asset7-Custom-Undefined-0 FUNDING.yml\\nCOPY component7-Custom-Undefined.sh /tmp\\nRUN /tmp/component7-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
      ]
     ]
    }
   },
   "DependsOn": [
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1LogRetention13129CEB",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837",
    "LambdaImageBuilderx64CodeBuildBuildFailed7E839416",
    "LambdaImageBuilderx64CodeBuildEventsRoleDefaultPolicy2B894997",
    "LambdaImageBuilderx64CodeBuildEventsRoleF8B03C21",
    "LambdaImageBuilderx64CodeBuild67DE14C8",
    "LambdaImageBuilderx64CRPolicy6DBE0D1F",
    "LambdaImageBuilderx64RoleDefaultPolicyC6AE2BE4",
    "LambdaImageBuilderx64RoleEE3EE1CB"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "LambdaImageBuilderx64BuildScheduleFA3DBF6A": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Rebuild runner image for ",
       {
        "Ref": "LambdaImageBuilderx64Repository57F632F1"
       }
      ]
     ]
    },
    "ScheduleExpression": "rate(7 days)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "LambdaImageBuilderx64CodeBuild67DE14C8",
        "Arn"
       ]
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "LambdaImageBuilderx64CodeBuildEventsRoleF8B03C21",
        "Arn"
       ]
      }
     }
    ]
   }
  },
  "WindowsImageBuilderSG5ACD1618": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/Windows Image Builder/SG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "WindowsImageBuilderRole717C46A6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds"
       ]
      ]
     }
    ]
   }
  },
  "WindowsImageBuilderRoleDefaultPolicy8BEB7BE3": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WindowsImageBuilderRoleDefaultPolicy8BEB7BE3",
    "Roles": [
     {
      "Ref": "WindowsImageBuilderRole717C46A6"
     }
    ]
   }
  },
  "WindowsImageBuilderRepositoryA4CBB6D8": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "ImageScanningConfiguration": {
     "ScanOnPush": true
    },
    "ImageTagMutability": "MUTABLE",
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Remove untagged images that have been replaced by AWS Image Builder\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countNumber\":1,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}},{\"rulePriority\":2,\"description\":\"Remove non-latest images\",\"selection\":{\"tagStatus\":\"tagged\",\"tagPrefixList\":[\"1\"],\"countType\":\"imageCountMoreThan\",\"countNumber\":2},\"action\":{\"type\":\"expire\"}}]}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "WindowsImageBuilderDockerDistributionCDE69DC2": {
   "Type": "AWS::ImageBuilder::DistributionConfiguration",
   "Properties": {
    "Distributions": [
     {
      "ContainerDistributionConfiguration": {
       "ContainerTags": [
        "latest"
       ],
       "TargetRepository": {
        "Service": "ECR",
        "RepositoryName": {
         "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
        }
       }
      },
      "Region": {
       "Ref": "AWS::Region"
      }
     }
    ],
    "Name": "github-runners-test-WindowsImageBuilder-18C0E1B2"
   }
  },
  "WindowsImageBuilderComponent0RequiredPackagesVersion54CE1D67": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsImageBuilder-Component0RequiredPackages-1A3E0E7C",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 0 RequiredPackages",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi /qn'",
            "if ($p.ExitCode -ne 0) { throw \"Exit code is $p.ExitCode\" }"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 0 RequiredPackages"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsImageBuilderComponent0RequiredPackagesComponent490D1D26": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsImageBuilder-Component0RequiredPackages-1A3E0E7C",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsImageBuilderComponent0RequiredPackagesVersion54CE1D67"
    },
    "Data": "{\"name\":\"Component 0 RequiredPackages\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi /qn'\",\"if ($p.ExitCode -ne 0) { throw \\\"Exit code is $p.ExitCode\\\" }\"]}}]}]}",
    "Description": "Component 0 RequiredPackages"
   }
  },
  "WindowsImageBuilderComponent1RunnerUserVersion9DEF18DE": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsImageBuilder-Component1RunnerUser-F040C0BA",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 1 RunnerUser",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         }
        ]
       }
      ]
     },
     "description": "Component 1 RunnerUser"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsImageBuilderComponent1RunnerUserComponentCB0163EE": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsImageBuilder-Component1RunnerUser-F040C0BA",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsImageBuilderComponent1RunnerUserVersion9DEF18DE"
    },
    "Data": "{\"name\":\"Component 1 RunnerUser\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]}]}]}",
    "Description": "Component 1 RunnerUser"
   }
  },
  "WindowsImageBuilderComponent2GitVersion1AA56A2F": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsImageBuilder-Component2Git-316DB12E",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 2 Git",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "cmd /c curl -w \"%{redirect_url}\" -fsS https://github.com/git-for-windows/git/releases/latest > $Env:TEMP\\latest-git",
            "$LatestUrl = Get-Content $Env:TEMP\\latest-git",
            "$GIT_VERSION = ($LatestUrl -Split '/')[-1].substring(1)",
            "$GIT_VERSION_SHORT = ($GIT_VERSION -Split '.windows.')[0]",
            "$GIT_REVISION = ($GIT_VERSION -Split '.windows.')[1]",
            "If ($GIT_REVISION -gt 1) {$GIT_VERSION_SHORT = \"$GIT_VERSION_SHORT.$GIT_REVISION\"}",
            "Invoke-WebRequest -UseBasicParsing -Uri https://github.com/git-for-windows/git/releases/download/v${GIT_VERSION}/Git-${GIT_VERSION_SHORT}-64-bit.exe -OutFile git-setup.exe",
            "$p = Start-Process git-setup.exe -PassThru -Wait -ArgumentList '/VERYSILENT'",
            "if ($p.ExitCode -ne 0) { throw \"Exit code is $p.ExitCode\" }",
            "del git-setup.exe"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 2 Git"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsImageBuilderComponent2GitComponentD5E90F74": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsImageBuilder-Component2Git-316DB12E",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsImageBuilderComponent2GitVersion1AA56A2F"
    },
    "Data": "{\"name\":\"Component 2 Git\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"cmd /c curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/git-for-windows/git/releases/latest > $Env:TEMP\\\\latest-git\",\"$LatestUrl = Get-Content $Env:TEMP\\\\latest-git\",\"$GIT_VERSION = ($LatestUrl -Split '/')[-1].substring(1)\",\"$GIT_VERSION_SHORT = ($GIT_VERSION -Split '.windows.')[0]\",\"$GIT_REVISION = ($GIT_VERSION -Split '.windows.')[1]\",\"If ($GIT_REVISION -gt 1) {$GIT_VERSION_SHORT = \\\"$GIT_VERSION_SHORT.$GIT_REVISION\\\"}\",\"Invoke-WebRequest -UseBasicParsing -Uri https://github.com/git-for-windows/git/releases/download/v${GIT_VERSION}/Git-${GIT_VERSION_SHORT}-64-bit.exe -OutFile git-setup.exe\",\"$p = Start-Process git-setup.exe -PassThru -Wait -ArgumentList '/VERYSILENT'\",\"if ($p.ExitCode -ne 0) { throw \\\"Exit code is $p.ExitCode\\\" }\",\"del git-setup.exe\"]}}]}]}",
    "Description": "Component 2 Git"
   }
  },
  "WindowsImageBuilderComponent3GithubCliVersionFE27093C": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsImageBuilder-Component3GithubCli-8D855BAC",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 3 GithubCli",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "cmd /c curl -w \"%{redirect_url}\" -fsS https://github.com/cli/cli/releases/latest > $Env:TEMP\\latest-gh",
            "$LatestUrl = Get-Content $Env:TEMP\\latest-gh",
            "$GH_VERSION = ($LatestUrl -Split '/')[-1].substring(1)",
            "Invoke-WebRequest -UseBasicParsing -Uri \"https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_windows_amd64.msi\" -OutFile gh.msi",
            "$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i gh.msi /qn'",
            "if ($p.ExitCode -ne 0) { throw \"Exit code is $p.ExitCode\" }",
            "del gh.msi"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 3 GithubCli"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsImageBuilderComponent3GithubCliComponent3D6C7BCE": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsImageBuilder-Component3GithubCli-8D855BAC",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsImageBuilderComponent3GithubCliVersionFE27093C"
    },
    "Data": "{\"name\":\"Component 3 GithubCli\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"cmd /c curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/cli/cli/releases/latest > $Env:TEMP\\\\latest-gh\",\"$LatestUrl = Get-Content $Env:TEMP\\\\latest-gh\",\"$GH_VERSION = ($LatestUrl -Split '/')[-1].substring(1)\",\"Invoke-WebRequest -UseBasicParsing -Uri \\\"https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_windows_amd64.msi\\\" -OutFile gh.msi\",\"$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i gh.msi /qn'\",\"if ($p.ExitCode -ne 0) { throw \\\"Exit code is $p.ExitCode\\\" }\",\"del gh.msi\"]}}]}]}",
    "Description": "Component 3 GithubCli"
   }
  },
  "WindowsImageBuilderComponent4AwsCliVersion597B7A92": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsImageBuilder-Component4AwsCli-1B2DBBE1",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 4 AwsCli",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i https://awscli.amazonaws.com/AWSCLIV2.msi /qn'",
            "if ($p.ExitCode -ne 0) { throw \"Exit code is $p.ExitCode\" }"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 4 AwsCli"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsImageBuilderComponent4AwsCliComponentE42A66BF": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsImageBuilder-Component4AwsCli-1B2DBBE1",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsImageBuilderComponent4AwsCliVersion597B7A92"
    },
    "Data": "{\"name\":\"Component 4 AwsCli\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i https://awscli.amazonaws.com/AWSCLIV2.msi /qn'\",\"if ($p.ExitCode -ne 0) { throw \\\"Exit code is $p.ExitCode\\\" }\"]}}]}]}",
    "Description": "Component 4 AwsCli"
   }
  },
  "WindowsImageBuilderComponent5GithubRunnerVersionDA209B9C": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsImageBuilder-Component5GithubRunner-7AC775C5",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 5 GithubRunner",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "cmd /c curl -w \"%{redirect_url}\" -fsS https://github.com/actions/runner/releases/latest > $Env:TEMP\\latest-gha",
            "$LatestUrl = Get-Content $Env:TEMP\\latest-gha",
            "$RUNNER_VERSION = ($LatestUrl -Split '/')[-1].substring(1)",
            "Invoke-WebRequest -UseBasicParsing -Uri \"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-win-x64-${RUNNER_VERSION}.zip\" -OutFile actions.zip",
            "Expand-Archive actions.zip -DestinationPath C:\\actions",
            "del actions.zip",
            "echo latest | Out-File -Encoding ASCII -NoNewline C:\\actions\\RUNNER_VERSION"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 5 GithubRunner"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsImageBuilderComponent5GithubRunnerComponent34C12ED4": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsImageBuilder-Component5GithubRunner-7AC775C5",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsImageBuilderComponent5GithubRunnerVersionDA209B9C"
    },
    "Data": "{\"name\":\"Component 5 GithubRunner\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"cmd /c curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest > $Env:TEMP\\\\latest-gha\",\"$LatestUrl = Get-Content $Env:TEMP\\\\latest-gha\",\"$RUNNER_VERSION = ($LatestUrl -Split '/')[-1].substring(1)\",\"Invoke-WebRequest -UseBasicParsing -Uri \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-win-x64-${RUNNER_VERSION}.zip\\\" -OutFile actions.zip\",\"Expand-Archive actions.zip -DestinationPath C:\\\\actions\",\"del actions.zip\",\"echo latest | Out-File -Encoding ASCII -NoNewline C:\\\\actions\\\\RUNNER_VERSION\"]}}]}]}",
    "Description": "Component 5 GithubRunner"
   }
  },
  "WindowsImageBuilderComponent6CustomUndefinedVersionB3367BF0": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsImageBuilder-Component6Custom-Undefined-0A739BAE",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 6 Custom-Undefined",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": [
           {
            "source": {
             "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
            },
            "destination": "FUNDING.yml"
           }
          ]
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "New-Item -ItemType file -Path / -Name custom-file",
            "New-Item -ItemType directory -Path / -Name custom-dir",
            "Move-Item FUNDING.yml /custom-dir"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 6 Custom-Undefined"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsImageBuilderComponent6CustomUndefinedComponentC1AEB345": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsImageBuilder-Component6Custom-Undefined-0A739BAE",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsImageBuilderComponent6CustomUndefinedVersionB3367BF0"
    },
    "Data": {
     "Fn::Join": [
      "",
      [
       "{\"name\":\"Component 6 Custom-Undefined\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[{\"source\":\"",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       "\",\"destination\":\"FUNDING.yml\"}]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"New-Item -ItemType file -Path / -Name custom-file\",\"New-Item -ItemType directory -Path / -Name custom-dir\",\"Move-Item FUNDING.yml /custom-dir\"]}}]}]}"
      ]
     ]
    },
    "Description": "Component 6 Custom-Undefined"
   }
  },
  "WindowsImageBuilderContainerRecipeVersion13A2E3FD": {
   "Type": "Custom::ImageBuilder-ContainerRecipe-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "ContainerRecipe",
    "ObjectName": "github-runners-test-WindowsImageBuilder-ContainerRecipe-C577A80B",
    "VersionedData": {
     "platform": "Windows",
     "components": [
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsImageBuilderComponent0RequiredPackagesComponent490D1D26",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsImageBuilderComponent1RunnerUserComponentCB0163EE",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsImageBuilderComponent2GitComponentD5E90F74",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsImageBuilderComponent3GithubCliComponent3D6C7BCE",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsImageBuilderComponent4AwsCliComponentE42A66BF",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsImageBuilderComponent5GithubRunnerComponent34C12ED4",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsImageBuilderComponent6CustomUndefinedComponentC1AEB345",
         "Arn"
        ]
       }
      }
     ],
     "dockerfileTemplate": "FROM {{{ imagebuilder:parentImage }}}\n{{{ imagebuilder:environments }}}\n{{{ imagebuilder:components }}}\nENV RUNNER_VERSION=latest\n"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsImageBuilderContainerRecipeB2A421D7": {
   "Type": "AWS::ImageBuilder::ContainerRecipe",
   "Properties": {
    "Components": [
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsImageBuilderComponent0RequiredPackagesComponent490D1D26",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsImageBuilderComponent1RunnerUserComponentCB0163EE",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsImageBuilderComponent2GitComponentD5E90F74",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsImageBuilderComponent3GithubCliComponent3D6C7BCE",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsImageBuilderComponent4AwsCliComponentE42A66BF",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsImageBuilderComponent5GithubRunnerComponent34C12ED4",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsImageBuilderComponent6CustomUndefinedComponentC1AEB345",
        "Arn"
       ]
      }
     }
    ],
    "ContainerType": "DOCKER",
    "Name": "github-runners-test-WindowsImageBuilder-ContainerRecipe-C577A80B",
    "ParentImage": "mcr.microsoft.com/windows/servercore:ltsc2019-amd64",
    "TargetRepository": {
     "RepositoryName": {
      "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
     },
     "Service": "ECR"
    },
    "Version": {
     "Ref": "WindowsImageBuilderContainerRecipeVersion13A2E3FD"
    },
    "DockerfileTemplateData": "FROM {{{ imagebuilder:parentImage }}}\n{{{ imagebuilder:environments }}}\n{{{ imagebuilder:components }}}\nENV RUNNER_VERSION=latest\n"
   }
  },
  "WindowsImageBuilderDockerLogE660E23E": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/imagebuilder/github-runners-test-WindowsImageBuilder-ContainerRecipe-C577A80B",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "WindowsImageBuilderInstanceProfileBFCCEC08": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "WindowsImageBuilderRole717C46A6"
     }
    ]
   }
  },
  "WindowsImageBuilderInfrastructureFF99A30B": {
   "Type": "AWS::ImageBuilder::InfrastructureConfiguration",
   "Properties": {
    "InstanceProfileName": {
     "Ref": "WindowsImageBuilderInstanceProfileBFCCEC08"
    },
    "Name": "github-runners-test-WindowsImageBuilder-18C0E1B2",
    "InstanceMetadataOptions": {
     "HttpPutResponseHopLimit": 2,
     "HttpTokens": "required"
    },
    "InstanceTypes": [
     "m5.large"
    ],
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "WindowsImageBuilderSG5ACD1618",
       "GroupId"
      ]
     }
    ],
    "SnsTopicArn": {
     "Ref": "runnersImageBuilderBuildsDF5A50E4"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    }
   }
  },
  "WindowsImageBuilderDockerImage8672CA3E": {
   "Type": "AWS::ImageBuilder::Image",
   "Properties": {
    "InfrastructureConfigurationArn": {
     "Fn::GetAtt": [
      "WindowsImageBuilderInfrastructureFF99A30B",
      "Arn"
     ]
    },
    "ContainerRecipeArn": {
     "Fn::GetAtt": [
      "WindowsImageBuilderContainerRecipeB2A421D7",
      "Arn"
     ]
    },
    "DistributionConfigurationArn": {
     "Fn::GetAtt": [
      "WindowsImageBuilderDockerDistributionCDE69DC2",
      "Arn"
     ]
    },
    "ImageTestsConfiguration": {
     "ImageTestsEnabled": false
    }
   },
   "DependsOn": [
    "WindowsImageBuilderDockerLogE660E23E",
    "WindowsImageBuilderInfrastructureFF99A30B"
   ]
  },
  "WindowsImageBuilderDockerPipeline3613721A": {
   "Type": "AWS::ImageBuilder::ImagePipeline",
   "Properties": {
    "InfrastructureConfigurationArn": {
     "Fn::GetAtt": [
      "WindowsImageBuilderInfrastructureFF99A30B",
      "Arn"
     ]
    },
    "Name": "github-runners-test-WindowsImageBuilder-18C0E1B2",
    "ContainerRecipeArn": {
     "Fn::GetAtt": [
      "WindowsImageBuilderContainerRecipeB2A421D7",
      "Arn"
     ]
    },
    "DistributionConfigurationArn": {
     "Fn::GetAtt": [
      "WindowsImageBuilderDockerDistributionCDE69DC2",
      "Arn"
     ]
    },
    "ImageTestsConfiguration": {
     "ImageTestsEnabled": false
    },
    "Schedule": {
     "PipelineExecutionStartCondition": "EXPRESSION_MATCH_ONLY",
     "ScheduleExpression": "rate(7 days)"
    }
   },
   "DependsOn": [
    "WindowsImageBuilderDockerLogE660E23E",
    "WindowsImageBuilderInfrastructureFF99A30B"
   ]
  },
  "WindowsImageBuilderCRPolicy81A41F62": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchDeleteImage",
        "ecr:ListImages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "WindowsImageBuilderRepositoryA4CBB6D8",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "imagebuilder:ListImages",
        "imagebuilder:ListImageBuildVersions",
        "imagebuilder:DeleteImage"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WindowsImageBuilderCRPolicy81A41F62",
    "Roles": [
     {
      "Ref": "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837"
     }
    ]
   }
  },
  "WindowsImageBuilderDeleterB5A108CD": {
   "Type": "Custom::ImageDeleter",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
      "Arn"
     ]
    },
    "RepoName": {
     "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
    },
    "ImageBuilderName": "github-runners-test-WindowsImageBuilder-ContainerRecipe-C577A80B",
    "DeleteOnly": true
   },
   "DependsOn": [
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1LogRetention13129CEB",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837",
    "WindowsImageBuilderCRPolicy81A41F62",
    "WindowsImageBuilderDockerImage8672CA3E"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "WindowsImageBuilderReaperScheduleDockerDFBF7915": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Delete old image build versions for github-runners-test-WindowsImageBuilder-ContainerRecipe-C577A80B",
    "ScheduleExpression": "rate(1 day)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": "{\"RecipeName\":\"github-runners-test-WindowsImageBuilder-ContainerRecipe-C577A80B\"}"
     }
    ]
   }
  },
  "WindowsImageBuilderReaperScheduleDockerAllowEventRulegithubrunnerstestReaperdcc036c8876b451ea2c1552f9e06e9e1A3B5C963F66931D8": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "WindowsImageBuilderReaperScheduleDockerDFBF7915",
      "Arn"
     ]
    }
   }
  },
  "AMILinuxBuilderSGEDC86329": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/AMI Linux Builder/SG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "AMILinuxBuilderRole0C42378A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/EC2InstanceProfileForImageBuilder"
       ]
      ]
     }
    ]
   }
  },
  "AMILinuxBuilderRoleDefaultPolicy69ED051F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "AMILinuxBuilderRoleDefaultPolicy69ED051F",
    "Roles": [
     {
      "Ref": "AMILinuxBuilderRole0C42378A"
     }
    ]
   }
  },
  "AMILinuxBuilderLaunchtemplateA29452C4": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "MetadataOptions": {
      "HttpTokens": "required"
     },
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/AMI Linux Builder/Launch template"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/AMI Linux Builder/Launch template"
        }
       ]
      }
     ]
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "github-runners-test/AMI Linux Builder/Launch template"
       }
      ]
     }
    ]
   }
  },
  "AMILinuxBuilderAMIDistribution46435AF5": {
   "Type": "AWS::ImageBuilder::DistributionConfiguration",
   "Properties": {
    "Distributions": [
     {
      "AmiDistributionConfiguration": {
       "Name": "github-runners-test-AMILinuxBuilder-67243E6D-{{ imagebuilder:buildDate }}",
       "AmiTags": {
        "Name": "AMI Linux Builder",
        "GitHubRunners:Stack": "github-runners-test",
        "GitHubRunners:Builder": "github-runners-test/AMI Linux Builder"
       }
      },
      "LaunchTemplateConfigurations": [
       {
        "LaunchTemplateId": {
         "Ref": "AMILinuxBuilderLaunchtemplateA29452C4"
        }
       }
      ],
      "Region": {
       "Ref": "AWS::Region"
      }
     }
    ],
    "Name": "github-runners-test-AMILinuxBuilder-67243E6D"
   }
  },
  "AMILinuxBuilderComponent0RequiredPackagesVersion1DA9F296": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxBuilder-Component0RequiredPackages-DD92E049",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 0 RequiredPackages",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "apt-get update",
            "DEBIAN_FRONTEND=noninteractive apt-get upgrade -y",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates",
            "curl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb",
            "dpkg -i -E /tmp/amazon-cloudwatch-agent.deb",
            "rm /tmp/amazon-cloudwatch-agent.deb"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 0 RequiredPackages"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderComponent0RequiredPackagesComponent6D0029EE": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxBuilder-Component0RequiredPackages-DD92E049",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxBuilderComponent0RequiredPackagesVersion1DA9F296"
    },
    "Data": "{\"name\":\"Component 0 RequiredPackages\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"apt-get update\",\"DEBIAN_FRONTEND=noninteractive apt-get upgrade -y\",\"DEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\",\"curl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\",\"dpkg -i -E /tmp/amazon-cloudwatch-agent.deb\",\"rm /tmp/amazon-cloudwatch-agent.deb\"]}}]}]}",
    "Description": "Component 0 RequiredPackages"
   }
  },
  "AMILinuxBuilderComponent1RunnerUserVersionCA41D9C8": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxBuilder-Component1RunnerUser-2C63F473",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 1 RunnerUser",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "addgroup runner",
            "adduser --system --disabled-password --home /home/runner --ingroup runner runner",
            "usermod -aG sudo runner",
            "echo \"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\" > /etc/sudoers.d/runner"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 1 RunnerUser"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderComponent1RunnerUserComponent2EBE4EAD": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxBuilder-Component1RunnerUser-2C63F473",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxBuilderComponent1RunnerUserVersionCA41D9C8"
    },
    "Data": "{\"name\":\"Component 1 RunnerUser\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"addgroup runner\",\"adduser --system --disabled-password --home /home/runner --ingroup runner runner\",\"usermod -aG sudo runner\",\"echo \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\"]}}]}]}",
    "Description": "Component 1 RunnerUser"
   }
  },
  "AMILinuxBuilderComponent2GitVersion82679172": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxBuilder-Component2Git-6B4FC975",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 2 Git",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "add-apt-repository ppa:git-core/ppa",
            "apt-get update",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y git"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 2 Git"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderComponent2GitComponentF2C8CE06": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxBuilder-Component2Git-6B4FC975",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxBuilderComponent2GitVersion82679172"
    },
    "Data": "{\"name\":\"Component 2 Git\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"add-apt-repository ppa:git-core/ppa\",\"apt-get update\",\"DEBIAN_FRONTEND=noninteractive apt-get install -y git\"]}}]}]}",
    "Description": "Component 2 Git"
   }
  },
  "AMILinuxBuilderComponent3GithubCliVersionC0E82894": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxBuilder-Component3GithubCli-8DC25241",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 3 GithubCli",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg",
            "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null",
            "apt-get update",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y gh"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 3 GithubCli"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderComponent3GithubCliComponent170A927E": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxBuilder-Component3GithubCli-8DC25241",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxBuilderComponent3GithubCliVersionC0E82894"
    },
    "Data": "{\"name\":\"Component 3 GithubCli\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\",\"echo \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\",\"apt-get update\",\"DEBIAN_FRONTEND=noninteractive apt-get install -y gh\"]}}]}]}",
    "Description": "Component 3 GithubCli"
   }
  },
  "AMILinuxBuilderComponent4AwsCliVersion0C5F8836": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxBuilder-Component4AwsCli-D17DC3B2",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 4 AwsCli",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "curl -fsSL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o awscliv2.zip",
            "unzip -q awscliv2.zip",
            "./aws/install",
            "rm -rf awscliv2.zip aws"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 4 AwsCli"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderComponent4AwsCliComponent4DEACF99": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxBuilder-Component4AwsCli-D17DC3B2",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxBuilderComponent4AwsCliVersion0C5F8836"
    },
    "Data": "{\"name\":\"Component 4 AwsCli\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"curl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\\" -o awscliv2.zip\",\"unzip -q awscliv2.zip\",\"./aws/install\",\"rm -rf awscliv2.zip aws\"]}}]}]}",
    "Description": "Component 4 AwsCli"
   }
  },
  "AMILinuxBuilderComponent5DockerVersion5018BF22": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxBuilder-Component5Docker-2AD7068C",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 5 Docker",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker.gpg",
            "echo   \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu   $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
            "apt-get update",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin",
            "usermod -aG docker runner",
            "ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 5 Docker"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderComponent5DockerComponent6FEDF0C9": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxBuilder-Component5Docker-2AD7068C",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxBuilderComponent5DockerVersion5018BF22"
    },
    "Data": "{\"name\":\"Component 5 Docker\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker.gpg\",\"echo   \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu   $(lsb_release -cs) stable\\\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\",\"apt-get update\",\"DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\",\"usermod -aG docker runner\",\"ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose\"]}}]}]}",
    "Description": "Component 5 Docker"
   }
  },
  "AMILinuxBuilderComponent6GithubRunnerVersionBF146628": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxBuilder-Component6GithubRunner-4845185F",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 6 GithubRunner",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "RUNNER_VERSION=`curl -w \"%{redirect_url}\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \"[^/v]+$\"`",
            "curl -fsSLO \"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\"",
            "tar -C /home/runner -xzf \"actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\"",
            "rm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz",
            "echo -n latest > /home/runner/RUNNER_VERSION",
            "/home/runner/bin/installdependencies.sh"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 6 GithubRunner"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderComponent6GithubRunnerComponent921D60D9": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxBuilder-Component6GithubRunner-4845185F",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxBuilderComponent6GithubRunnerVersionBF146628"
    },
    "Data": "{\"name\":\"Component 6 GithubRunner\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"RUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\",\"curl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\",\"tar -C /home/runner -xzf \\\"actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\",\"rm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\",\"echo -n latest > /home/runner/RUNNER_VERSION\",\"/home/runner/bin/installdependencies.sh\"]}}]}]}",
    "Description": "Component 6 GithubRunner"
   }
  },
  "AMILinuxBuilderComponent7CustomUndefinedVersion691E056E": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxBuilder-Component7Custom-Undefined-FB8CE704",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 7 Custom-Undefined",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": [
           {
            "source": {
             "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
            },
            "destination": "FUNDING.yml"
           }
          ]
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "touch /custom-file",
            "mkdir /custom-dir",
            "mv FUNDING.yml /custom-dir"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 7 Custom-Undefined"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderComponent7CustomUndefinedComponent90421257": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxBuilder-Component7Custom-Undefined-FB8CE704",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxBuilderComponent7CustomUndefinedVersion691E056E"
    },
    "Data": {
     "Fn::Join": [
      "",
      [
       "{\"name\":\"Component 7 Custom-Undefined\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[{\"source\":\"",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       "\",\"destination\":\"FUNDING.yml\"}]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"touch /custom-file\",\"mkdir /custom-dir\",\"mv FUNDING.yml /custom-dir\"]}}]}]}"
      ]
     ]
    },
    "Description": "Component 7 Custom-Undefined"
   }
  },
  "AMILinuxBuilderAmiRecipeVersionFBE9C9AE": {
   "Type": "Custom::ImageBuilder-ImageRecipe-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "ImageRecipe",
    "ObjectName": "github-runners-test-AMILinuxBuilder-AmiRecipe-2B5C5A8B",
    "VersionedData": {
     "platform": "Linux",
     "components": [
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxBuilderComponent0RequiredPackagesComponent6D0029EE",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxBuilderComponent1RunnerUserComponent2EBE4EAD",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxBuilderComponent2GitComponentF2C8CE06",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxBuilderComponent3GithubCliComponent170A927E",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxBuilderComponent4AwsCliComponent4DEACF99",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxBuilderComponent5DockerComponent6FEDF0C9",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxBuilderComponent6GithubRunnerComponent921D60D9",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxBuilderComponent7CustomUndefinedComponent90421257",
         "Arn"
        ]
       }
      }
     ],
     "parentAmi": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":imagebuilder:",
        {
         "Ref": "AWS::Region"
        },
        ":aws:image/ubuntu-server-22-lts-x86/x.x.x"
       ]
      ]
     }
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxBuilderAmiRecipe7C7ED6C7": {
   "Type": "AWS::ImageBuilder::ImageRecipe",
   "Properties": {
    "Components": [
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxBuilderComponent0RequiredPackagesComponent6D0029EE",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxBuilderComponent1RunnerUserComponent2EBE4EAD",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxBuilderComponent2GitComponentF2C8CE06",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxBuilderComponent3GithubCliComponent170A927E",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxBuilderComponent4AwsCliComponent4DEACF99",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxBuilderComponent5DockerComponent6FEDF0C9",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxBuilderComponent6GithubRunnerComponent921D60D9",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxBuilderComponent7CustomUndefinedComponent90421257",
        "Arn"
       ]
      }
     }
    ],
    "Name": "github-runners-test-AMILinuxBuilder-AmiRecipe-2B5C5A8B",
    "ParentImage": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":imagebuilder:",
       {
        "Ref": "AWS::Region"
       },
       ":aws:image/ubuntu-server-22-lts-x86/x.x.x"
      ]
     ]
    },
    "Version": {
     "Ref": "AMILinuxBuilderAmiRecipeVersionFBE9C9AE"
    },
    "WorkingDirectory": "/home/runner"
   }
  },
  "AMILinuxBuilderAmiLog0DB16E38": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/imagebuilder/github-runners-test-AMILinuxBuilder-AmiRecipe-2B5C5A8B",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "AMILinuxBuilderInstanceProfile3CA638BE": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "AMILinuxBuilderRole0C42378A"
     }
    ]
   }
  },
  "AMILinuxBuilderInfrastructure6FCD154A": {
   "Type": "AWS::ImageBuilder::InfrastructureConfiguration",
   "Properties": {
    "InstanceProfileName": {
     "Ref": "AMILinuxBuilderInstanceProfile3CA638BE"
    },
    "Name": "github-runners-test-AMILinuxBuilder-67243E6D",
    "InstanceMetadataOptions": {
     "HttpPutResponseHopLimit": 2,
     "HttpTokens": "required"
    },
    "InstanceTypes": [
     "m5.large"
    ],
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "AMILinuxBuilderSGEDC86329",
       "GroupId"
      ]
     }
    ],
    "SnsTopicArn": {
     "Ref": "runnersImageBuilderBuildsDF5A50E4"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    }
   }
  },
  "AMILinuxBuilderAMIImage93D83DE5": {
   "Type": "AWS::ImageBuilder::Image",
   "Properties": {
    "InfrastructureConfigurationArn": {
     "Fn::GetAtt": [
      "AMILinuxBuilderInfrastructure6FCD154A",
      "Arn"
     ]
    },
    "DistributionConfigurationArn": {
     "Fn::GetAtt": [
      "AMILinuxBuilderAMIDistribution46435AF5",
      "Arn"
     ]
    },
    "ImageRecipeArn": {
     "Fn::GetAtt": [
      "AMILinuxBuilderAmiRecipe7C7ED6C7",
      "Arn"
     ]
    },
    "ImageTestsConfiguration": {
     "ImageTestsEnabled": false
    }
   },
   "DependsOn": [
    "AMILinuxBuilderAmiLog0DB16E38",
    "AMILinuxBuilderInfrastructure6FCD154A"
   ]
  },
  "AMILinuxBuilderAMIPipelineEC5051DF": {
   "Type": "AWS::ImageBuilder::ImagePipeline",
   "Properties": {
    "InfrastructureConfigurationArn": {
     "Fn::GetAtt": [
      "AMILinuxBuilderInfrastructure6FCD154A",
      "Arn"
     ]
    },
    "Name": "github-runners-test-AMILinuxBuilder-67243E6D",
    "DistributionConfigurationArn": {
     "Fn::GetAtt": [
      "AMILinuxBuilderAMIDistribution46435AF5",
      "Arn"
     ]
    },
    "ImageRecipeArn": {
     "Fn::GetAtt": [
      "AMILinuxBuilderAmiRecipe7C7ED6C7",
      "Arn"
     ]
    },
    "ImageTestsConfiguration": {
     "ImageTestsEnabled": false
    },
    "Schedule": {
     "PipelineExecutionStartCondition": "EXPRESSION_MATCH_ONLY",
     "ScheduleExpression": "rate(7 days)"
    }
   },
   "DependsOn": [
    "AMILinuxBuilderAmiLog0DB16E38",
    "AMILinuxBuilderInfrastructure6FCD154A"
   ]
  },
  "AMILinuxBuilderDeleteAMISchedule0109DEF5": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Delete old AMIs for github-runners-test/AMI Linux Builder",
    "ScheduleExpression": "rate(1 day)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": {
       "Fn::Join": [
        "",
        [
         "{\"RequestType\":\"Scheduled\",\"LaunchTemplateId\":\"",
         {
          "Ref": "AMILinuxBuilderLaunchtemplateA29452C4"
         },
         "\",\"StackName\":\"github-runners-test\",\"BuilderName\":\"github-runners-test/AMI Linux Builder\"}"
        ]
       ]
      }
     }
    ]
   }
  },
  "AMILinuxBuilderDeleteAMIScheduleAllowEventRulegithubrunnerstestdeleteamidcc036c8876b451ea2c1552f9e06e9e147BECA88525B596C": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "AMILinuxBuilderDeleteAMISchedule0109DEF5",
      "Arn"
     ]
    }
   }
  },
  "AMILinuxBuilderAMIDeleter58658716": {
   "Type": "Custom::AmiDeleter",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
      "Arn"
     ]
    },
    "StackName": "github-runners-test",
    "BuilderName": "github-runners-test/AMI Linux Builder"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "AMILinuxBuilderReaperScheduleAMI1FDEB175": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Delete old image build versions for github-runners-test-AMILinuxBuilder-AmiRecipe-2B5C5A8B",
    "ScheduleExpression": "rate(1 day)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": "{\"RecipeName\":\"github-runners-test-AMILinuxBuilder-AmiRecipe-2B5C5A8B\"}"
     }
    ]
   }
  },
  "AMILinuxBuilderReaperScheduleAMIAllowEventRulegithubrunnerstestReaperdcc036c8876b451ea2c1552f9e06e9e1A3B5C963B9718DFD": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "AMILinuxBuilderReaperScheduleAMI1FDEB175",
      "Arn"
     ]
    }
   }
  },
  "CodeBuildImageBuilderRoleF1F34984": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "CodeBuildImageBuilderRoleDefaultPolicy6982821E": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderLogsE4CADFCC",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildImageBuilderCodeBuild38ECAA44"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildImageBuilderCodeBuild38ECAA44"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "CodeBuildImageBuilderCodeBuild38ECAA44"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderRepository9DE3B6F0",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:PutImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderRepository9DE3B6F0",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildImageBuilderRoleDefaultPolicy6982821E",
    "Roles": [
     {
      "Ref": "CodeBuildImageBuilderRoleF1F34984"
     }
    ]
   }
  },
  "CodeBuildImageBuilderRepository9DE3B6F0": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "ImageScanningConfiguration": {
     "ScanOnPush": true
    },
    "ImageTagMutability": "MUTABLE",
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Remove untagged images that have been replaced by CodeBuild\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countNumber\":1,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}}]}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildImageBuilderLogsE4CADFCC": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildImageBuilderCodeBuild38ECAA44": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/standard:6.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "CodeBuildImageBuilderRoleF1F34984",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
        {
         "Fn::GetAtt": [
          "CodeBuildImageBuilderRepository9DE3B6F0",
          "Arn"
         ]
        },
        "\",\n      \"REPO_URI\": \"",
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "CodeBuildImageBuilderRepository9DE3B6F0",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "CodeBuildImageBuilderRepository9DE3B6F0",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
        },
        "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
        {
         "Ref": "AWS::AccountId"
        },
        ".dkr.ecr.",
        {
         "Ref": "AWS::Region"
        },
        ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get upgrade -y\\nDEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\\ncurl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\\ndpkg -i -E /tmp/amazon-cloudwatch-agent.deb\\nrm /tmp/amazon-cloudwatch-agent.deb\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\naddgroup runner\\nadduser --system --disabled-password --home /home/runner --ingroup runner runner\\nusermod -aG sudo runner\\necho \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nadd-apt-repository ppa:git-core/ppa\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\\necho \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-Docker-in-Docker.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nDEBIAN_FRONTEND=noninteractive apt-get install -y socat\\nDOCKER_CHANNEL=\\\"stable\\\"\\nDIND_COMMIT=\\\"42b1175eda071c0e9121e1d64345928384a93df1\\\"\\nDOCKER_VERSION=\\\"20.10.18\\\"\\nDOCKER_COMPOSE_VERSION=\\\"2.11.0\\\"\\ncurl -fsSL \\\"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\\\" -o docker.tgz\\ntar --strip-components 1 -C /usr/local/bin/ -xzf docker.tgz\\nrm docker.tgz\\n# set up subuid/subgid so that \\\"--userns-remap=default\\\" works out-of-the box\\naddgroup dockremap\\nuseradd -g dockremap dockremap\\necho 'dockremap:165536:65536' >> /etc/subuid\\necho 'dockremap:165536:65536' >> /etc/subgid\\ncurl -fsSL \\\"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\\\" -o /usr/local/bin/dind\\ncurl -fsSL https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\\nmkdir -p /home/runner/.docker/cli-plugins && ln -s /usr/local/bin/docker-compose /home/runner/.docker/cli-plugins/docker-compose\\nchown -R runner /home/runner/.docker\\nchmod +x /usr/local/bin/dind /usr/local/bin/docker-compose\\naddgroup docker && usermod -aG docker runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-Docker-in-Docker.sh\",\n        \"cat > component6-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\n/home/runner/bin/installdependencies.sh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-GithubRunner.sh\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
        },
        " asset7-Custom-Undefined-0\",\n        \"cat > component7-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component7-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lts/ubuntu:22.04\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-Docker-in-Docker.sh /tmp\\nRUN /tmp/component5-Docker-in-Docker.sh\\n\\nCOPY component6-GithubRunner.sh /tmp\\nRUN /tmp/component6-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset7-Custom-Undefined-0 FUNDING.yml\\nCOPY component7-Custom-Undefined.sh /tmp\\nRUN /tmp/component7-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Build docker image for self-hosted GitHub runner github-runners-test/CodeBuild Image Builder (Ubuntu Linux/X86_64)",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "CodeBuildImageBuilderLogsE4CADFCC"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "CodeBuildImageBuilderCodeBuildEventsRole4277A55E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "CodeBuildImageBuilderCodeBuildEventsRoleDefaultPolicyF7AE539D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderCodeBuild38ECAA44",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildImageBuilderCodeBuildEventsRoleDefaultPolicyF7AE539D",
    "Roles": [
     {
      "Ref": "CodeBuildImageBuilderCodeBuildEventsRole4277A55E"
     }
    ]
   }
  },
  "CodeBuildImageBuilderCodeBuildBuildFailed9B205D70": {
   "Type": "AWS::CodeStarNotifications::NotificationRule",
   "Properties": {
    "DetailType": "FULL",
    "EventTypeIds": [
     "codebuild-project-build-state-failed"
    ],
    "Name": "thubrunnerstestCodeBuildImageBuilderCodeBuildBuildFailed73942339",
    "Resource": {
     "Fn::GetAtt": [
      "CodeBuildImageBuilderCodeBuild38ECAA44",
      "Arn"
     ]
    },
    "Targets": [
     {
      "TargetAddress": {
       "Ref": "runnersFailedRunnerImageBuilds233D2237"
      },
      "TargetType": "SNS"
     }
    ]
   }
  },
  "CodeBuildImageBuilderCRPolicyAFC63F28": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderCodeBuild38ECAA44",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchDeleteImage",
        "ecr:ListImages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderRepository9DE3B6F0",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildImageBuilderCRPolicyAFC63F28",
    "Roles": [
     {
      "Ref": "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837"
     }
    ]
   }
  },
  "CodeBuildImageBuilderB8638EC8": {
   "Type": "Custom::ImageBuilder",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
      "Arn"
     ]
    },
    "RepoName": {
     "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
    },
    "ProjectName": {
     "Ref": "CodeBuildImageBuilderCodeBuild38ECAA44"
    },
    "BuildSpec": {
     "Fn::Join": [
      "",
      [
       "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
       {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderRepository9DE3B6F0",
         "Arn"
        ]
       },
       "\",\n      \"REPO_URI\": \"",
       {
        "Fn::Select": [
         4,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "CodeBuildImageBuilderRepository9DE3B6F0",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".dkr.ecr.",
       {
        "Fn::Select": [
         3,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "CodeBuildImageBuilderRepository9DE3B6F0",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".",
       {
        "Ref": "AWS::URLSuffix"
       },
       "/",
       {
        "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
       },
       "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
       {
        "Ref": "AWS::AccountId"
       },
       ".dkr.ecr.",
       {
        "Ref": "AWS::Region"
       },
       ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get upgrade -y\\nDEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\\ncurl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\\ndpkg -i -E /tmp/amazon-cloudwatch-agent.deb\\nrm /tmp/amazon-cloudwatch-agent.deb\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\naddgroup runner\\nadduser --system --disabled-password --home /home/runner --ingroup runner runner\\nusermod -aG sudo runner\\necho \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nadd-apt-repository ppa:git-core/ppa\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\\necho \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-Docker-in-Docker.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nDEBIAN_FRONTEND=noninteractive apt-get install -y socat\\nDOCKER_CHANNEL=\\\"stable\\\"\\nDIND_COMMIT=\\\"42b1175eda071c0e9121e1d64345928384a93df1\\\"\\nDOCKER_VERSION=\\\"20.10.18\\\"\\nDOCKER_COMPOSE_VERSION=\\\"2.11.0\\\"\\ncurl -fsSL \\\"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\\\" -o docker.tgz\\ntar --strip-components 1 -C /usr/local/bin/ -xzf docker.tgz\\nrm docker.tgz\\n# set up subuid/subgid so that \\\"--userns-remap=default\\\" works out-of-the box\\naddgroup dockremap\\nuseradd -g dockremap dockremap\\necho 'dockremap:165536:65536' >> /etc/subuid\\necho 'dockremap:165536:65536' >> /etc/subgid\\ncurl -fsSL \\\"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\\\" -o /usr/local/bin/dind\\ncurl -fsSL https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\\nmkdir -p /home/runner/.docker/cli-plugins && ln -s /usr/local/bin/docker-compose /home/runner/.docker/cli-plugins/docker-compose\\nchown -R runner /home/runner/.docker\\nchmod +x /usr/local/bin/dind /usr/local/bin/docker-compose\\naddgroup docker && usermod -aG docker runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-Docker-in-Docker.sh\",\n        \"cat > component6-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\n/home/runner/bin/installdependencies.sh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-GithubRunner.sh\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       " asset7-Custom-Undefined-0\",\n        \"cat > component7-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component7-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lts/ubuntu:22.04\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-Docker-in-Docker.sh /tmp\\nRUN /tmp/component5-Docker-in-Docker.sh\\n\\nCOPY component6-GithubRunner.sh /tmp\\nRUN /tmp/component6-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset7-Custom-Undefined-0 FUNDING.yml\\nCOPY component7-Custom-Undefined.sh /tmp\\nRUN /tmp/component7-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
      ]
     ]
    }
   },
   "DependsOn": [
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1LogRetention13129CEB",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837",
    "CodeBuildImageBuilderCodeBuildBuildFailed9B205D70",
    "CodeBuildImageBuilderCodeBuildEventsRoleDefaultPolicyF7AE539D",
    "CodeBuildImageBuilderCodeBuildEventsRole4277A55E",
    "CodeBuildImageBuilderCodeBuild38ECAA44",
    "CodeBuildImageBuilderCRPolicyAFC63F28",
    "CodeBuildImageBuilderRoleDefaultPolicy6982821E",
    "CodeBuildImageBuilderRoleF1F34984"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildImageBuilderBuildSchedule66D9D18A": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Rebuild runner image for ",
       {
        "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
       }
      ]
     ]
    },
    "ScheduleExpression": "rate(7 days)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "CodeBuildImageBuilderCodeBuild38ECAA44",
        "Arn"
       ]
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "CodeBuildImageBuilderCodeBuildEventsRole4277A55E",
        "Arn"
       ]
      }
     }
    ]
   }
  },
  "CodeBuildImageBuilderarmRole96BC26FB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "CodeBuildImageBuilderarmRoleDefaultPolicy540A8CDE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmLogs5A60CB81",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildImageBuilderarmCodeBuildBFF1CF57"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildImageBuilderarmCodeBuildBFF1CF57"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "CodeBuildImageBuilderarmCodeBuildBFF1CF57"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmRepositoryE967421B",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:PutImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmRepositoryE967421B",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildImageBuilderarmRoleDefaultPolicy540A8CDE",
    "Roles": [
     {
      "Ref": "CodeBuildImageBuilderarmRole96BC26FB"
     }
    ]
   }
  },
  "CodeBuildImageBuilderarmRepositoryE967421B": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "ImageScanningConfiguration": {
     "ScanOnPush": true
    },
    "ImageTagMutability": "MUTABLE",
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Remove untagged images that have been replaced by CodeBuild\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countNumber\":1,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}}]}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildImageBuilderarmLogs5A60CB81": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildImageBuilderarmCodeBuildBFF1CF57": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/amazonlinux2-aarch64-standard:2.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "ARM_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "CodeBuildImageBuilderarmRole96BC26FB",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
        {
         "Fn::GetAtt": [
          "CodeBuildImageBuilderarmRepositoryE967421B",
          "Arn"
         ]
        },
        "\",\n      \"REPO_URI\": \"",
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "CodeBuildImageBuilderarmRepositoryE967421B",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "CodeBuildImageBuilderarmRepositoryE967421B",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
        },
        "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
        {
         "Ref": "AWS::AccountId"
        },
        ".dkr.ecr.",
        {
         "Ref": "AWS::Region"
        },
        ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get upgrade -y\\nDEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\\ncurl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb\\ndpkg -i -E /tmp/amazon-cloudwatch-agent.deb\\nrm /tmp/amazon-cloudwatch-agent.deb\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\naddgroup runner\\nadduser --system --disabled-password --home /home/runner --ingroup runner runner\\nusermod -aG sudo runner\\necho \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nadd-apt-repository ppa:git-core/ppa\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\\necho \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-Docker-in-Docker.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nDEBIAN_FRONTEND=noninteractive apt-get install -y socat\\nDOCKER_CHANNEL=\\\"stable\\\"\\nDIND_COMMIT=\\\"42b1175eda071c0e9121e1d64345928384a93df1\\\"\\nDOCKER_VERSION=\\\"20.10.18\\\"\\nDOCKER_COMPOSE_VERSION=\\\"2.11.0\\\"\\ncurl -fsSL \\\"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/aarch64/docker-${DOCKER_VERSION}.tgz\\\" -o docker.tgz\\ntar --strip-components 1 -C /usr/local/bin/ -xzf docker.tgz\\nrm docker.tgz\\n# set up subuid/subgid so that \\\"--userns-remap=default\\\" works out-of-the box\\naddgroup dockremap\\nuseradd -g dockremap dockremap\\necho 'dockremap:165536:65536' >> /etc/subuid\\necho 'dockremap:165536:65536' >> /etc/subgid\\ncurl -fsSL \\\"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\\\" -o /usr/local/bin/dind\\ncurl -fsSL https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-aarch64 -o /usr/local/bin/docker-compose\\nmkdir -p /home/runner/.docker/cli-plugins && ln -s /usr/local/bin/docker-compose /home/runner/.docker/cli-plugins/docker-compose\\nchown -R runner /home/runner/.docker\\nchmod +x /usr/local/bin/dind /usr/local/bin/docker-compose\\naddgroup docker && usermod -aG docker runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-Docker-in-Docker.sh\",\n        \"cat > component6-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\n/home/runner/bin/installdependencies.sh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-GithubRunner.sh\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
        },
        " asset7-Custom-Undefined-0\",\n        \"cat > component7-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component7-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lts/ubuntu:22.04\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-Docker-in-Docker.sh /tmp\\nRUN /tmp/component5-Docker-in-Docker.sh\\n\\nCOPY component6-GithubRunner.sh /tmp\\nRUN /tmp/component6-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset7-Custom-Undefined-0 FUNDING.yml\\nCOPY component7-Custom-Undefined.sh /tmp\\nRUN /tmp/component7-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Build docker image for self-hosted GitHub runner github-runners-test/CodeBuild Image Builder arm (Ubuntu Linux/ARM64)",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "CodeBuildImageBuilderarmLogs5A60CB81"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "CodeBuildImageBuilderarmCodeBuildEventsRole5ADCAD89": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "CodeBuildImageBuilderarmCodeBuildEventsRoleDefaultPolicyEA24770D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmCodeBuildBFF1CF57",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildImageBuilderarmCodeBuildEventsRoleDefaultPolicyEA24770D",
    "Roles": [
     {
      "Ref": "CodeBuildImageBuilderarmCodeBuildEventsRole5ADCAD89"
     }
    ]
   }
  },
  "CodeBuildImageBuilderarmCodeBuildBuildFailed7605ECB2": {
   "Type": "AWS::CodeStarNotifications::NotificationRule",
   "Properties": {
    "DetailType": "FULL",
    "EventTypeIds": [
     "codebuild-project-build-state-failed"
    ],
    "Name": "brunnerstestCodeBuildImageBuilderarmCodeBuildBuildFailedF9370687",
    "Resource": {
     "Fn::GetAtt": [
      "CodeBuildImageBuilderarmCodeBuildBFF1CF57",
      "Arn"
     ]
    },
    "Targets": [
     {
      "TargetAddress": {
       "Ref": "runnersFailedRunnerImageBuilds233D2237"
      },
      "TargetType": "SNS"
     }
    ]
   }
  },
  "CodeBuildImageBuilderarmCRPolicy75CB8D91": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmCodeBuildBFF1CF57",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchDeleteImage",
        "ecr:ListImages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmRepositoryE967421B",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildImageBuilderarmCRPolicy75CB8D91",
    "Roles": [
     {
      "Ref": "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837"
     }
    ]
   }
  },
  "CodeBuildImageBuilderarmBuilder755EB37D": {
   "Type": "Custom::ImageBuilder",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
      "Arn"
     ]
    },
    "RepoName": {
     "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
    },
    "ProjectName": {
     "Ref": "CodeBuildImageBuilderarmCodeBuildBFF1CF57"
    },
    "BuildSpec": {
     "Fn::Join": [
      "",
      [
       "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
       {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmRepositoryE967421B",
         "Arn"
        ]
       },
       "\",\n      \"REPO_URI\": \"",
       {
        "Fn::Select": [
         4,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "CodeBuildImageBuilderarmRepositoryE967421B",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".dkr.ecr.",
       {
        "Fn::Select": [
         3,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "CodeBuildImageBuilderarmRepositoryE967421B",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".",
       {
        "Ref": "AWS::URLSuffix"
       },
       "/",
       {
        "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
       },
       "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
       {
        "Ref": "AWS::AccountId"
       },
       ".dkr.ecr.",
       {
        "Ref": "AWS::Region"
       },
       ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get upgrade -y\\nDEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\\ncurl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb\\ndpkg -i -E /tmp/amazon-cloudwatch-agent.deb\\nrm /tmp/amazon-cloudwatch-agent.deb\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\naddgroup runner\\nadduser --system --disabled-password --home /home/runner --ingroup runner runner\\nusermod -aG sudo runner\\necho \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nadd-apt-repository ppa:git-core/ppa\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\\necho \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\\napt-get update\\nDEBIAN_FRONTEND=noninteractive apt-get install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-Docker-in-Docker.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nDEBIAN_FRONTEND=noninteractive apt-get install -y socat\\nDOCKER_CHANNEL=\\\"stable\\\"\\nDIND_COMMIT=\\\"42b1175eda071c0e9121e1d64345928384a93df1\\\"\\nDOCKER_VERSION=\\\"20.10.18\\\"\\nDOCKER_COMPOSE_VERSION=\\\"2.11.0\\\"\\ncurl -fsSL \\\"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/aarch64/docker-${DOCKER_VERSION}.tgz\\\" -o docker.tgz\\ntar --strip-components 1 -C /usr/local/bin/ -xzf docker.tgz\\nrm docker.tgz\\n# set up subuid/subgid so that \\\"--userns-remap=default\\\" works out-of-the box\\naddgroup dockremap\\nuseradd -g dockremap dockremap\\necho 'dockremap:165536:65536' >> /etc/subuid\\necho 'dockremap:165536:65536' >> /etc/subgid\\ncurl -fsSL \\\"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\\\" -o /usr/local/bin/dind\\ncurl -fsSL https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-aarch64 -o /usr/local/bin/docker-compose\\nmkdir -p /home/runner/.docker/cli-plugins && ln -s /usr/local/bin/docker-compose /home/runner/.docker/cli-plugins/docker-compose\\nchown -R runner /home/runner/.docker\\nchmod +x /usr/local/bin/dind /usr/local/bin/docker-compose\\naddgroup docker && usermod -aG docker runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-Docker-in-Docker.sh\",\n        \"cat > component6-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\n/home/runner/bin/installdependencies.sh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-GithubRunner.sh\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       " asset7-Custom-Undefined-0\",\n        \"cat > component7-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component7-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lts/ubuntu:22.04\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-Docker-in-Docker.sh /tmp\\nRUN /tmp/component5-Docker-in-Docker.sh\\n\\nCOPY component6-GithubRunner.sh /tmp\\nRUN /tmp/component6-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset7-Custom-Undefined-0 FUNDING.yml\\nCOPY component7-Custom-Undefined.sh /tmp\\nRUN /tmp/component7-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
      ]
     ]
    }
   },
   "DependsOn": [
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1LogRetention13129CEB",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837",
    "CodeBuildImageBuilderarmCodeBuildBuildFailed7605ECB2",
    "CodeBuildImageBuilderarmCodeBuildEventsRoleDefaultPolicyEA24770D",
    "CodeBuildImageBuilderarmCodeBuildEventsRole5ADCAD89",
    "CodeBuildImageBuilderarmCodeBuildBFF1CF57",
    "CodeBuildImageBuilderarmCRPolicy75CB8D91",
    "CodeBuildImageBuilderarmRoleDefaultPolicy540A8CDE",
    "CodeBuildImageBuilderarmRole96BC26FB"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildImageBuilderarmBuildSchedule909D75E9": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Rebuild runner image for ",
       {
        "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
       }
      ]
     ]
    },
    "ScheduleExpression": "rate(7 days)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "CodeBuildImageBuilderarmCodeBuildBFF1CF57",
        "Arn"
       ]
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "CodeBuildImageBuilderarmCodeBuildEventsRole5ADCAD89",
        "Arn"
       ]
      }
     }
    ]
   }
  },
  "LambdaImageBuilderzRole6F1A63E5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "LambdaImageBuilderzRoleDefaultPolicy06ABB0C7": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzLogsC9FB42C8",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "LambdaImageBuilderzCodeBuild73AB6718"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "LambdaImageBuilderzCodeBuild73AB6718"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "LambdaImageBuilderzCodeBuild73AB6718"
          },
          "-*"
         ]
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzRepository7C7AD146",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecr:PutImage",
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzRepository7C7AD146",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaImageBuilderzRoleDefaultPolicy06ABB0C7",
    "Roles": [
     {
      "Ref": "LambdaImageBuilderzRole6F1A63E5"
     }
    ]
   }
  },
  "LambdaImageBuilderzRepository7C7AD146": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "ImageScanningConfiguration": {
     "ScanOnPush": true
    },
    "ImageTagMutability": "MUTABLE",
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Remove untagged images that have been replaced by CodeBuild\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countNumber\":1,\"countUnit\":\"days\"},\"action\":{\"type\":\"expire\"}}]}"
    },
    "RepositoryPolicyText": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "LambdaImageBuilderzRepositoryPushruleA1F1B44F": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Update GitHub Actions runner Lambda on ECR image push",
    "EventPattern": {
     "detail-type": [
      "ECR Image Action"
     ],
     "detail": {
      "action-type": [
       "PUSH"
      ],
      "repository-name": [
       {
        "Ref": "LambdaImageBuilderzRepository7C7AD146"
       }
      ],
      "image-tag": [
       "latest"
      ],
      "result": [
       "SUCCESS"
      ]
     },
     "source": [
      "aws.ecr"
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "updatelambdadcc036c8876b451ea2c1552f9e06e9e180810ABA",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": {
       "Fn::Join": [
        "",
        [
         "{\"lambdaName\":\"",
         {
          "Ref": "LambdaARMFunctionDD4B5FF7"
         },
         "\",\"repositoryUri\":\"",
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "LambdaImageBuilderzRepository7C7AD146",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "LambdaImageBuilderzRepository7C7AD146",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "LambdaImageBuilderzRepository7C7AD146"
         },
         "\",\"repositoryTag\":\"latest\"}"
        ]
       ]
      }
     }
    ]
   }
  },
  "LambdaImageBuilderzRepositoryPushruleAllowEventRulegithubrunnerstestupdatelambdadcc036c8876b451ea2c1552f9e06e9e17433A98E002B5DB7": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "updatelambdadcc036c8876b451ea2c1552f9e06e9e180810ABA",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "LambdaImageBuilderzRepositoryPushruleA1F1B44F",
      "Arn"
     ]
    }
   }
  },
  "LambdaImageBuilderzLogsC9FB42C8": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "LambdaImageBuilderzCodeBuild73AB6718": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": "aws/codebuild/amazonlinux2-aarch64-standard:2.0",
     "ImagePullCredentialsType": "CODEBUILD",
     "PrivilegedMode": true,
     "Type": "ARM_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "LambdaImageBuilderzRole6F1A63E5",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": {
      "Fn::Join": [
       "",
       [
        "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
        {
         "Fn::GetAtt": [
          "LambdaImageBuilderzRepository7C7AD146",
          "Arn"
         ]
        },
        "\",\n      \"REPO_URI\": \"",
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageBuilderzRepository7C7AD146",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageBuilderzRepository7C7AD146",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "LambdaImageBuilderzRepository7C7AD146"
        },
        "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
        {
         "Ref": "AWS::AccountId"
        },
        ".dkr.ecr.",
        {
         "Ref": "AWS::Region"
        },
        ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nyum update -y\\nyum install -y jq tar gzip bzip2 which binutils zip unzip sudo shadow-utils\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\n/usr/sbin/groupadd runner\\n/usr/sbin/useradd --system --shell /usr/sbin/nologin --home-dir /home/runner --gid runner runner\\nmkdir -p /home/runner\\nchown runner /home/runner\\necho \\\"%runner   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nyum install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSSL https://cli.github.com/packages/rpm/gh-cli.repo -o /etc/yum.repos.d/gh-cli.repo\\nyum install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\nyum install -y openssl-libs krb5-libs zlib libicu60\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-GithubRunner.sh\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/2ed40b7362410e8fc94308e93208caeaba3457d493db292221633d84af7454fe.js"
        },
        " asset6-Lambda-Entrypoint-0\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/86dfcbcdb3c3fd028fb3abe4342e42137a2928bc0eb4842117b8ccc39447ef5b.sh"
        },
        " asset6-Lambda-Entrypoint-1\",\n        \"cat > component6-Lambda-Entrypoint.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-Lambda-Entrypoint.sh\",\n        \"aws s3 cp ",
        {
         "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
        },
        " asset7-Custom-Undefined-0\",\n        \"cat > component7-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component7-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lambda/nodejs:14-arm64\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-GithubRunner.sh /tmp\\nRUN /tmp/component5-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset6-Lambda-Entrypoint-0 ${LAMBDA_TASK_ROOT}/runner.js\\nCOPY asset6-Lambda-Entrypoint-1 ${LAMBDA_TASK_ROOT}/runner.sh\\nCOPY component6-Lambda-Entrypoint.sh /tmp\\nRUN /tmp/component6-Lambda-Entrypoint.sh\\nWORKDIR ${LAMBDA_TASK_ROOT}\\nCMD [\\\"runner.handler\\\"]\\nCOPY asset7-Custom-Undefined-0 FUNDING.yml\\nCOPY component7-Custom-Undefined.sh /tmp\\nRUN /tmp/component7-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
       ]
      ]
     },
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "Build docker image for self-hosted GitHub runner github-runners-test/Lambda Image Builderz (Amazon Linux 2/ARM64)",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "LambdaImageBuilderzLogsC9FB42C8"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "LambdaImageBuilderzCodeBuildEventsRoleE9E50664": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "LambdaImageBuilderzCodeBuildEventsRoleDefaultPolicyE0DB8E23": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzCodeBuild73AB6718",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaImageBuilderzCodeBuildEventsRoleDefaultPolicyE0DB8E23",
    "Roles": [
     {
      "Ref": "LambdaImageBuilderzCodeBuildEventsRoleE9E50664"
     }
    ]
   }
  },
  "LambdaImageBuilderzCodeBuildBuildFailedFBCC1CE8": {
   "Type": "AWS::CodeStarNotifications::NotificationRule",
   "Properties": {
    "DetailType": "FULL",
    "EventTypeIds": [
     "codebuild-project-build-state-failed"
    ],
    "Name": "githubrunnerstestLambdaImageBuilderzCodeBuildBuildFailedD221038C",
    "Resource": {
     "Fn::GetAtt": [
      "LambdaImageBuilderzCodeBuild73AB6718",
      "Arn"
     ]
    },
    "Targets": [
     {
      "TargetAddress": {
       "Ref": "runnersFailedRunnerImageBuilds233D2237"
      },
      "TargetType": "SNS"
     }
    ]
   }
  },
  "LambdaImageBuilderzCRPolicyC9B09855": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "codebuild:StartBuild",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzCodeBuild73AB6718",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecr:BatchDeleteImage",
        "ecr:ListImages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzRepository7C7AD146",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaImageBuilderzCRPolicyC9B09855",
    "Roles": [
     {
      "Ref": "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837"
     }
    ]
   }
  },
  "LambdaImageBuilderzBuilder235DD147": {
   "Type": "Custom::ImageBuilder",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
      "Arn"
     ]
    },
    "RepoName": {
     "Ref": "LambdaImageBuilderzRepository7C7AD146"
    },
    "ProjectName": {
     "Ref": "LambdaImageBuilderzCodeBuild73AB6718"
    },
    "BuildSpec": {
     "Fn::Join": [
      "",
      [
       "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"REPO_ARN\": \"",
       {
        "Fn::GetAtt": [
         "LambdaImageBuilderzRepository7C7AD146",
         "Arn"
        ]
       },
       "\",\n      \"REPO_URI\": \"",
       {
        "Fn::Select": [
         4,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "LambdaImageBuilderzRepository7C7AD146",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".dkr.ecr.",
       {
        "Fn::Select": [
         3,
         {
          "Fn::Split": [
           ":",
           {
            "Fn::GetAtt": [
             "LambdaImageBuilderzRepository7C7AD146",
             "Arn"
            ]
           }
          ]
         }
        ]
       },
       ".",
       {
        "Ref": "AWS::URLSuffix"
       },
       "/",
       {
        "Ref": "LambdaImageBuilderzRepository7C7AD146"
       },
       "\",\n      \"STACK_ID\": \"unspecified\",\n      \"REQUEST_ID\": \"unspecified\",\n      \"LOGICAL_RESOURCE_ID\": \"unspecified\",\n      \"RESPONSE_URL\": \"unspecified\",\n      \"BASH_ENV\": \"codebuild-log.sh\"\n    },\n    \"shell\": \"bash\"\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"exec > >(tee -a /tmp/codebuild.log) 2>&1\\\" > codebuild-log.sh\",\n        \"aws ecr get-login-password --region \\\"$AWS_DEFAULT_REGION\\\" | docker login --username AWS --password-stdin ",
       {
        "Ref": "AWS::AccountId"
       },
       ".dkr.ecr.",
       {
        "Ref": "AWS::Region"
       },
       ".amazonaws.com\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cat > component0-RequiredPackages.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nyum update -y\\nyum install -y jq tar gzip bzip2 which binutils zip unzip sudo shadow-utils\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component0-RequiredPackages.sh\",\n        \"cat > component1-RunnerUser.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\n/usr/sbin/groupadd runner\\n/usr/sbin/useradd --system --shell /usr/sbin/nologin --home-dir /home/runner --gid runner runner\\nmkdir -p /home/runner\\nchown runner /home/runner\\necho \\\"%runner   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component1-RunnerUser.sh\",\n        \"cat > component2-Git.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nyum install -y git\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component2-Git.sh\",\n        \"cat > component3-GithubCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSSL https://cli.github.com/packages/rpm/gh-cli.repo -o /etc/yum.repos.d/gh-cli.repo\\nyum install -y gh\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component3-GithubCli.sh\",\n        \"cat > component4-AwsCli.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ncurl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\\\" -o awscliv2.zip\\nunzip -q awscliv2.zip\\n./aws/install\\nrm -rf awscliv2.zip aws\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component4-AwsCli.sh\",\n        \"cat > component5-GithubRunner.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\nRUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\\ncurl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\ntar -C /home/runner -xzf \\\"actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\\nrm actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\necho -n latest > /home/runner/RUNNER_VERSION\\nyum install -y openssl-libs krb5-libs zlib libicu60\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component5-GithubRunner.sh\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/2ed40b7362410e8fc94308e93208caeaba3457d493db292221633d84af7454fe.js"
       },
       " asset6-Lambda-Entrypoint-0\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/86dfcbcdb3c3fd028fb3abe4342e42137a2928bc0eb4842117b8ccc39447ef5b.sh"
       },
       " asset6-Lambda-Entrypoint-1\",\n        \"cat > component6-Lambda-Entrypoint.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component6-Lambda-Entrypoint.sh\",\n        \"aws s3 cp ",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       " asset7-Custom-Undefined-0\",\n        \"cat > component7-Custom-Undefined.sh <<'EOFGITHUBRUNNERSDOCKERFILE'\\n#!/bin/bash\\nset -exuo pipefail\\ntouch /custom-file\\nmkdir /custom-dir\\nmv FUNDING.yml /custom-dir\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"chmod +x component7-Custom-Undefined.sh\",\n        \"cat > Dockerfile <<'EOFGITHUBRUNNERSDOCKERFILE'\\nFROM public.ecr.aws/lambda/nodejs:14-arm64\\nVOLUME /var/lib/docker\\nCOPY component0-RequiredPackages.sh /tmp\\nRUN /tmp/component0-RequiredPackages.sh\\n\\nCOPY component1-RunnerUser.sh /tmp\\nRUN /tmp/component1-RunnerUser.sh\\n\\nCOPY component2-Git.sh /tmp\\nRUN /tmp/component2-Git.sh\\n\\nCOPY component3-GithubCli.sh /tmp\\nRUN /tmp/component3-GithubCli.sh\\n\\nCOPY component4-AwsCli.sh /tmp\\nRUN /tmp/component4-AwsCli.sh\\n\\nCOPY component5-GithubRunner.sh /tmp\\nRUN /tmp/component5-GithubRunner.sh\\nENV RUNNER_VERSION=latest\\nCOPY asset6-Lambda-Entrypoint-0 ${LAMBDA_TASK_ROOT}/runner.js\\nCOPY asset6-Lambda-Entrypoint-1 ${LAMBDA_TASK_ROOT}/runner.sh\\nCOPY component6-Lambda-Entrypoint.sh /tmp\\nRUN /tmp/component6-Lambda-Entrypoint.sh\\nWORKDIR ${LAMBDA_TASK_ROOT}\\nCMD [\\\"runner.handler\\\"]\\nCOPY asset7-Custom-Undefined-0 FUNDING.yml\\nCOPY component7-Custom-Undefined.sh /tmp\\nRUN /tmp/component7-Custom-Undefined.sh\\n\\n\\nEOFGITHUBRUNNERSDOCKERFILE\",\n        \"docker build --progress plain . -t \\\"$REPO_URI\\\"\",\n        \"docker push \\\"$REPO_URI\\\"\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"rm -f codebuild-log.sh && STATUS=\\\"SUCCESS\\\"\",\n        \"if [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ]; then STATUS=\\\"FAILED\\\"; fi\",\n        \"cat <<EOF > /tmp/payload.json\\n{\\n  \\\"StackId\\\": \\\"$STACK_ID\\\",\\n  \\\"RequestId\\\": \\\"$REQUEST_ID\\\",\\n  \\\"LogicalResourceId\\\": \\\"$LOGICAL_RESOURCE_ID\\\",\\n  \\\"PhysicalResourceId\\\": \\\"$REPO_ARN\\\",\\n  \\\"Status\\\": \\\"$STATUS\\\",\\n  \\\"Reason\\\": `sed 's/[^[:print:]]//g' /tmp/codebuild.log | tail -c 400 | jq -Rsa .`,\\n  \\\"Data\\\": {\\\"Random\\\": \\\"$RANDOM\\\"}\\n}\\nEOF\",\n        \"if [ \\\"$RESPONSE_URL\\\" != \\\"unspecified\\\" ]; then jq . /tmp/payload.json; curl -fsSL -X PUT -H \\\"Content-Type:\\\" -d \\\"@/tmp/payload.json\\\" \\\"$RESPONSE_URL\\\"; fi\"\n      ]\n    }\n  }\n}"
      ]
     ]
    }
   },
   "DependsOn": [
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1LogRetention13129CEB",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A",
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837",
    "LambdaImageBuilderzCodeBuildBuildFailedFBCC1CE8",
    "LambdaImageBuilderzCodeBuildEventsRoleDefaultPolicyE0DB8E23",
    "LambdaImageBuilderzCodeBuildEventsRoleE9E50664",
    "LambdaImageBuilderzCodeBuild73AB6718",
    "LambdaImageBuilderzCRPolicyC9B09855",
    "LambdaImageBuilderzRoleDefaultPolicy06ABB0C7",
    "LambdaImageBuilderzRole6F1A63E5"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "LambdaImageBuilderzBuildSchedule81F79A6A": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Rebuild runner image for ",
       {
        "Ref": "LambdaImageBuilderzRepository7C7AD146"
       }
      ]
     ]
    },
    "ScheduleExpression": "rate(7 days)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "LambdaImageBuilderzCodeBuild73AB6718",
        "Arn"
       ]
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "LambdaImageBuilderzCodeBuildEventsRoleE9E50664",
        "Arn"
       ]
      }
     }
    ]
   }
  },
  "AMILinuxarm64BuilderSG94315968": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/AMI Linux arm64 Builder/SG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "AMILinuxarm64BuilderRole40D54E29": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/EC2InstanceProfileForImageBuilder"
       ]
      ]
     }
    ]
   }
  },
  "AMILinuxarm64BuilderRoleDefaultPolicy113305EE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "AMILinuxarm64BuilderRoleDefaultPolicy113305EE",
    "Roles": [
     {
      "Ref": "AMILinuxarm64BuilderRole40D54E29"
     }
    ]
   }
  },
  "AMILinuxarm64BuilderLaunchtemplate8F5EFF44": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "MetadataOptions": {
      "HttpTokens": "required"
     },
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/AMI Linux arm64 Builder/Launch template"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/AMI Linux arm64 Builder/Launch template"
        }
       ]
      }
     ]
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "github-runners-test/AMI Linux arm64 Builder/Launch template"
       }
      ]
     }
    ]
   }
  },
  "AMILinuxarm64BuilderAMIDistribution2BDAF717": {
   "Type": "AWS::ImageBuilder::DistributionConfiguration",
   "Properties": {
    "Distributions": [
     {
      "AmiDistributionConfiguration": {
       "Name": "github-runners-test-AMILinuxarm64Builder-3F449283-{{ imagebuilder:buildDate }}",
       "AmiTags": {
        "Name": "AMI Linux arm64 Builder",
        "GitHubRunners:Stack": "github-runners-test",
        "GitHubRunners:Builder": "github-runners-test/AMI Linux arm64 Builder"
       }
      },
      "LaunchTemplateConfigurations": [
       {
        "LaunchTemplateId": {
         "Ref": "AMILinuxarm64BuilderLaunchtemplate8F5EFF44"
        }
       }
      ],
      "Region": {
       "Ref": "AWS::Region"
      }
     }
    ],
    "Name": "github-runners-test-AMILinuxarm64Builder-3F449283"
   }
  },
  "AMILinuxarm64BuilderComponent0RequiredPackagesVersion7CCB5268": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-Component0RequiredPackages-2E0C774A",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 0 RequiredPackages",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "apt-get update",
            "DEBIAN_FRONTEND=noninteractive apt-get upgrade -y",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates",
            "curl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb",
            "dpkg -i -E /tmp/amazon-cloudwatch-agent.deb",
            "rm /tmp/amazon-cloudwatch-agent.deb"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 0 RequiredPackages"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderComponent0RequiredPackagesComponent2ABFFC8F": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxarm64Builder-Component0RequiredPackages-2E0C774A",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxarm64BuilderComponent0RequiredPackagesVersion7CCB5268"
    },
    "Data": "{\"name\":\"Component 0 RequiredPackages\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"apt-get update\",\"DEBIAN_FRONTEND=noninteractive apt-get upgrade -y\",\"DEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo jq bash zip unzip iptables software-properties-common ca-certificates\",\"curl -sfLo /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb\",\"dpkg -i -E /tmp/amazon-cloudwatch-agent.deb\",\"rm /tmp/amazon-cloudwatch-agent.deb\"]}}]}]}",
    "Description": "Component 0 RequiredPackages"
   }
  },
  "AMILinuxarm64BuilderComponent1RunnerUserVersion7CC2642F": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-Component1RunnerUser-831B5E79",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 1 RunnerUser",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "addgroup runner",
            "adduser --system --disabled-password --home /home/runner --ingroup runner runner",
            "usermod -aG sudo runner",
            "echo \"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\" > /etc/sudoers.d/runner"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 1 RunnerUser"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderComponent1RunnerUserComponent4BA674F3": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxarm64Builder-Component1RunnerUser-831B5E79",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxarm64BuilderComponent1RunnerUserVersion7CC2642F"
    },
    "Data": "{\"name\":\"Component 1 RunnerUser\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"addgroup runner\",\"adduser --system --disabled-password --home /home/runner --ingroup runner runner\",\"usermod -aG sudo runner\",\"echo \\\"%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\\\" > /etc/sudoers.d/runner\"]}}]}]}",
    "Description": "Component 1 RunnerUser"
   }
  },
  "AMILinuxarm64BuilderComponent2GitVersion6653A045": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-Component2Git-465E10B9",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 2 Git",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "add-apt-repository ppa:git-core/ppa",
            "apt-get update",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y git"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 2 Git"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderComponent2GitComponent4229D34D": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxarm64Builder-Component2Git-465E10B9",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxarm64BuilderComponent2GitVersion6653A045"
    },
    "Data": "{\"name\":\"Component 2 Git\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"add-apt-repository ppa:git-core/ppa\",\"apt-get update\",\"DEBIAN_FRONTEND=noninteractive apt-get install -y git\"]}}]}]}",
    "Description": "Component 2 Git"
   }
  },
  "AMILinuxarm64BuilderComponent3GithubCliVersion0BCEFC78": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-Component3GithubCli-0198A5A3",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 3 GithubCli",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg",
            "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null",
            "apt-get update",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y gh"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 3 GithubCli"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderComponent3GithubCliComponentF183CE19": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxarm64Builder-Component3GithubCli-0198A5A3",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxarm64BuilderComponent3GithubCliVersion0BCEFC78"
    },
    "Data": "{\"name\":\"Component 3 GithubCli\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\",\"echo \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg]   https://cli.github.com/packages stable main\\\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\",\"apt-get update\",\"DEBIAN_FRONTEND=noninteractive apt-get install -y gh\"]}}]}]}",
    "Description": "Component 3 GithubCli"
   }
  },
  "AMILinuxarm64BuilderComponent4AwsCliVersion78036929": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-Component4AwsCli-9331C479",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 4 AwsCli",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "curl -fsSL \"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\" -o awscliv2.zip",
            "unzip -q awscliv2.zip",
            "./aws/install",
            "rm -rf awscliv2.zip aws"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 4 AwsCli"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderComponent4AwsCliComponent48566B83": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxarm64Builder-Component4AwsCli-9331C479",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxarm64BuilderComponent4AwsCliVersion78036929"
    },
    "Data": "{\"name\":\"Component 4 AwsCli\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"curl -fsSL \\\"https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\\\" -o awscliv2.zip\",\"unzip -q awscliv2.zip\",\"./aws/install\",\"rm -rf awscliv2.zip aws\"]}}]}]}",
    "Description": "Component 4 AwsCli"
   }
  },
  "AMILinuxarm64BuilderComponent5DockerVersion844A4107": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-Component5Docker-EACAC131",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 5 Docker",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker.gpg",
            "echo   \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu   $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
            "apt-get update",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin",
            "usermod -aG docker runner",
            "ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 5 Docker"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderComponent5DockerComponent9F2EEB10": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxarm64Builder-Component5Docker-EACAC131",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxarm64BuilderComponent5DockerVersion844A4107"
    },
    "Data": "{\"name\":\"Component 5 Docker\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker.gpg\",\"echo   \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu   $(lsb_release -cs) stable\\\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\",\"apt-get update\",\"DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\",\"usermod -aG docker runner\",\"ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose\"]}}]}]}",
    "Description": "Component 5 Docker"
   }
  },
  "AMILinuxarm64BuilderComponent6GithubRunnerVersionC728248D": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-Component6GithubRunner-BB4DE848",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 6 GithubRunner",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "RUNNER_VERSION=`curl -w \"%{redirect_url}\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \"[^/v]+$\"`",
            "curl -fsSLO \"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\"",
            "tar -C /home/runner -xzf \"actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\"",
            "rm actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz",
            "echo -n latest > /home/runner/RUNNER_VERSION",
            "/home/runner/bin/installdependencies.sh"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 6 GithubRunner"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderComponent6GithubRunnerComponentF4B81DE9": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxarm64Builder-Component6GithubRunner-BB4DE848",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxarm64BuilderComponent6GithubRunnerVersionC728248D"
    },
    "Data": "{\"name\":\"Component 6 GithubRunner\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"RUNNER_VERSION=`curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest | grep -oE \\\"[^/v]+$\\\"`\",\"curl -fsSLO \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\",\"tar -C /home/runner -xzf \\\"actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\\\"\",\"rm actions-runner-linux-arm64-${RUNNER_VERSION}.tar.gz\",\"echo -n latest > /home/runner/RUNNER_VERSION\",\"/home/runner/bin/installdependencies.sh\"]}}]}]}",
    "Description": "Component 6 GithubRunner"
   }
  },
  "AMILinuxarm64BuilderComponent7CustomUndefinedVersion5AA71C6E": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-Component7Custom-Undefined-41803F78",
    "VersionedData": {
     "platform": "Linux",
     "data": {
      "name": "Component 7 Custom-Undefined",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": [
           {
            "source": {
             "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
            },
            "destination": "FUNDING.yml"
           }
          ]
         },
         {
          "name": "Run",
          "action": "ExecuteBash",
          "inputs": {
           "commands": [
            "set -ex",
            "touch /custom-file",
            "mkdir /custom-dir",
            "mv FUNDING.yml /custom-dir"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 7 Custom-Undefined"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderComponent7CustomUndefinedComponent6F6F62D0": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-AMILinuxarm64Builder-Component7Custom-Undefined-41803F78",
    "Platform": "Linux",
    "Version": {
     "Ref": "AMILinuxarm64BuilderComponent7CustomUndefinedVersion5AA71C6E"
    },
    "Data": {
     "Fn::Join": [
      "",
      [
       "{\"name\":\"Component 7 Custom-Undefined\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[{\"source\":\"",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       "\",\"destination\":\"FUNDING.yml\"}]},{\"name\":\"Run\",\"action\":\"ExecuteBash\",\"inputs\":{\"commands\":[\"set -ex\",\"touch /custom-file\",\"mkdir /custom-dir\",\"mv FUNDING.yml /custom-dir\"]}}]}]}"
      ]
     ]
    },
    "Description": "Component 7 Custom-Undefined"
   }
  },
  "AMILinuxarm64BuilderAmiRecipeVersion429E7646": {
   "Type": "Custom::ImageBuilder-ImageRecipe-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "ImageRecipe",
    "ObjectName": "github-runners-test-AMILinuxarm64Builder-AmiRecipe-9167B5EF",
    "VersionedData": {
     "platform": "Linux",
     "components": [
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxarm64BuilderComponent0RequiredPackagesComponent2ABFFC8F",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxarm64BuilderComponent1RunnerUserComponent4BA674F3",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxarm64BuilderComponent2GitComponent4229D34D",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxarm64BuilderComponent3GithubCliComponentF183CE19",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxarm64BuilderComponent4AwsCliComponent48566B83",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxarm64BuilderComponent5DockerComponent9F2EEB10",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxarm64BuilderComponent6GithubRunnerComponentF4B81DE9",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "AMILinuxarm64BuilderComponent7CustomUndefinedComponent6F6F62D0",
         "Arn"
        ]
       }
      }
     ],
     "parentAmi": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":imagebuilder:",
        {
         "Ref": "AWS::Region"
        },
        ":aws:image/ubuntu-server-22-lts-arm64/x.x.x"
       ]
      ]
     }
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "AMILinuxarm64BuilderAmiRecipe6A6ED38F": {
   "Type": "AWS::ImageBuilder::ImageRecipe",
   "Properties": {
    "Components": [
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxarm64BuilderComponent0RequiredPackagesComponent2ABFFC8F",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxarm64BuilderComponent1RunnerUserComponent4BA674F3",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxarm64BuilderComponent2GitComponent4229D34D",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxarm64BuilderComponent3GithubCliComponentF183CE19",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxarm64BuilderComponent4AwsCliComponent48566B83",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxarm64BuilderComponent5DockerComponent9F2EEB10",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxarm64BuilderComponent6GithubRunnerComponentF4B81DE9",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "AMILinuxarm64BuilderComponent7CustomUndefinedComponent6F6F62D0",
        "Arn"
       ]
      }
     }
    ],
    "Name": "github-runners-test-AMILinuxarm64Builder-AmiRecipe-9167B5EF",
    "ParentImage": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":imagebuilder:",
       {
        "Ref": "AWS::Region"
       },
       ":aws:image/ubuntu-server-22-lts-arm64/x.x.x"
      ]
     ]
    },
    "Version": {
     "Ref": "AMILinuxarm64BuilderAmiRecipeVersion429E7646"
    },
    "WorkingDirectory": "/home/runner"
   }
  },
  "AMILinuxarm64BuilderAmiLog84A9D94A": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/imagebuilder/github-runners-test-AMILinuxarm64Builder-AmiRecipe-9167B5EF",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "AMILinuxarm64BuilderInstanceProfileCE3B6B09": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "AMILinuxarm64BuilderRole40D54E29"
     }
    ]
   }
  },
  "AMILinuxarm64BuilderInfrastructure80FA16D6": {
   "Type": "AWS::ImageBuilder::InfrastructureConfiguration",
   "Properties": {
    "InstanceProfileName": {
     "Ref": "AMILinuxarm64BuilderInstanceProfileCE3B6B09"
    },
    "Name": "github-runners-test-AMILinuxarm64Builder-3F449283",
    "InstanceMetadataOptions": {
     "HttpPutResponseHopLimit": 2,
     "HttpTokens": "required"
    },
    "InstanceTypes": [
     "m6g.large"
    ],
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "AMILinuxarm64BuilderSG94315968",
       "GroupId"
      ]
     }
    ],
    "SnsTopicArn": {
     "Ref": "runnersImageBuilderBuildsDF5A50E4"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    }
   }
  },
  "AMILinuxarm64BuilderAMIImage40078F9E": {
   "Type": "AWS::ImageBuilder::Image",
   "Properties": {
    "InfrastructureConfigurationArn": {
     "Fn::GetAtt": [
      "AMILinuxarm64BuilderInfrastructure80FA16D6",
      "Arn"
     ]
    },
    "DistributionConfigurationArn": {
     "Fn::GetAtt": [
      "AMILinuxarm64BuilderAMIDistribution2BDAF717",
      "Arn"
     ]
    },
    "ImageRecipeArn": {
     "Fn::GetAtt": [
      "AMILinuxarm64BuilderAmiRecipe6A6ED38F",
      "Arn"
     ]
    },
    "ImageTestsConfiguration": {
     "ImageTestsEnabled": false
    }
   },
   "DependsOn": [
    "AMILinuxarm64BuilderAmiLog84A9D94A",
    "AMILinuxarm64BuilderInfrastructure80FA16D6"
   ]
  },
  "AMILinuxarm64BuilderAMIPipeline9CC1354C": {
   "Type": "AWS::ImageBuilder::ImagePipeline",
   "Properties": {
    "InfrastructureConfigurationArn": {
     "Fn::GetAtt": [
      "AMILinuxarm64BuilderInfrastructure80FA16D6",
      "Arn"
     ]
    },
    "Name": "github-runners-test-AMILinuxarm64Builder-3F449283",
    "DistributionConfigurationArn": {
     "Fn::GetAtt": [
      "AMILinuxarm64BuilderAMIDistribution2BDAF717",
      "Arn"
     ]
    },
    "ImageRecipeArn": {
     "Fn::GetAtt": [
      "AMILinuxarm64BuilderAmiRecipe6A6ED38F",
      "Arn"
     ]
    },
    "ImageTestsConfiguration": {
     "ImageTestsEnabled": false
    },
    "Schedule": {
     "PipelineExecutionStartCondition": "EXPRESSION_MATCH_ONLY",
     "ScheduleExpression": "rate(7 days)"
    }
   },
   "DependsOn": [
    "AMILinuxarm64BuilderAmiLog84A9D94A",
    "AMILinuxarm64BuilderInfrastructure80FA16D6"
   ]
  },
  "AMILinuxarm64BuilderDeleteAMISchedule72E5EB47": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Delete old AMIs for github-runners-test/AMI Linux arm64 Builder",
    "ScheduleExpression": "rate(1 day)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": {
       "Fn::Join": [
        "",
        [
         "{\"RequestType\":\"Scheduled\",\"LaunchTemplateId\":\"",
         {
          "Ref": "AMILinuxarm64BuilderLaunchtemplate8F5EFF44"
         },
         "\",\"StackName\":\"github-runners-test\",\"BuilderName\":\"github-runners-test/AMI Linux arm64 Builder\"}"
        ]
       ]
      }
     }
    ]
   }
  },
  "AMILinuxarm64BuilderDeleteAMIScheduleAllowEventRulegithubrunnerstestdeleteamidcc036c8876b451ea2c1552f9e06e9e147BECA88A6D69EB4": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "AMILinuxarm64BuilderDeleteAMISchedule72E5EB47",
      "Arn"
     ]
    }
   }
  },
  "AMILinuxarm64BuilderAMIDeleter27E72E27": {
   "Type": "Custom::AmiDeleter",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
      "Arn"
     ]
    },
    "StackName": "github-runners-test",
    "BuilderName": "github-runners-test/AMI Linux arm64 Builder"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "AMILinuxarm64BuilderReaperScheduleAMIA85EF7E0": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Delete old image build versions for github-runners-test-AMILinuxarm64Builder-AmiRecipe-9167B5EF",
    "ScheduleExpression": "rate(1 day)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": "{\"RecipeName\":\"github-runners-test-AMILinuxarm64Builder-AmiRecipe-9167B5EF\"}"
     }
    ]
   }
  },
  "AMILinuxarm64BuilderReaperScheduleAMIAllowEventRulegithubrunnerstestReaperdcc036c8876b451ea2c1552f9e06e9e1A3B5C96351358891": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "AMILinuxarm64BuilderReaperScheduleAMIA85EF7E0",
      "Arn"
     ]
    }
   }
  },
  "WindowsEC2BuilderSGE3F67842": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/Windows EC2 Builder/SG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "WindowsEC2BuilderRole1BA7D3E7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/EC2InstanceProfileForImageBuilder"
       ]
      ]
     }
    ]
   }
  },
  "WindowsEC2BuilderRoleDefaultPolicy8A5B4E85": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WindowsEC2BuilderRoleDefaultPolicy8A5B4E85",
    "Roles": [
     {
      "Ref": "WindowsEC2BuilderRole1BA7D3E7"
     }
    ]
   }
  },
  "WindowsEC2BuilderLaunchtemplate0A66E9C2": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "MetadataOptions": {
      "HttpTokens": "required"
     },
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/Windows EC2 Builder/Launch template"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/Windows EC2 Builder/Launch template"
        }
       ]
      }
     ]
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "github-runners-test/Windows EC2 Builder/Launch template"
       }
      ]
     }
    ]
   }
  },
  "WindowsEC2BuilderAMIDistributionC7E428C1": {
   "Type": "AWS::ImageBuilder::DistributionConfiguration",
   "Properties": {
    "Distributions": [
     {
      "AmiDistributionConfiguration": {
       "Name": "github-runners-test-WindowsEC2Builder-5FAF8285-{{ imagebuilder:buildDate }}",
       "AmiTags": {
        "Name": "Windows EC2 Builder",
        "GitHubRunners:Stack": "github-runners-test",
        "GitHubRunners:Builder": "github-runners-test/Windows EC2 Builder"
       }
      },
      "LaunchTemplateConfigurations": [
       {
        "LaunchTemplateId": {
         "Ref": "WindowsEC2BuilderLaunchtemplate0A66E9C2"
        }
       }
      ],
      "Region": {
       "Ref": "AWS::Region"
      }
     }
    ],
    "Name": "github-runners-test-WindowsEC2Builder-5FAF8285"
   }
  },
  "WindowsEC2BuilderComponent0RequiredPackagesVersion08C0B23D": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsEC2Builder-Component0RequiredPackages-29E311EC",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 0 RequiredPackages",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi /qn'",
            "if ($p.ExitCode -ne 0) { throw \"Exit code is $p.ExitCode\" }"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 0 RequiredPackages"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderComponent0RequiredPackagesComponent42A20182": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsEC2Builder-Component0RequiredPackages-29E311EC",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsEC2BuilderComponent0RequiredPackagesVersion08C0B23D"
    },
    "Data": "{\"name\":\"Component 0 RequiredPackages\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi /qn'\",\"if ($p.ExitCode -ne 0) { throw \\\"Exit code is $p.ExitCode\\\" }\"]}}]}]}",
    "Description": "Component 0 RequiredPackages"
   }
  },
  "WindowsEC2BuilderComponent1RunnerUserVersionBB304040": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsEC2Builder-Component1RunnerUser-021402E6",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 1 RunnerUser",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         }
        ]
       }
      ]
     },
     "description": "Component 1 RunnerUser"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderComponent1RunnerUserComponent90CB91A0": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsEC2Builder-Component1RunnerUser-021402E6",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsEC2BuilderComponent1RunnerUserVersionBB304040"
    },
    "Data": "{\"name\":\"Component 1 RunnerUser\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]}]}]}",
    "Description": "Component 1 RunnerUser"
   }
  },
  "WindowsEC2BuilderComponent2GitVersion6AACF128": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsEC2Builder-Component2Git-092397BF",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 2 Git",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "cmd /c curl -w \"%{redirect_url}\" -fsS https://github.com/git-for-windows/git/releases/latest > $Env:TEMP\\latest-git",
            "$LatestUrl = Get-Content $Env:TEMP\\latest-git",
            "$GIT_VERSION = ($LatestUrl -Split '/')[-1].substring(1)",
            "$GIT_VERSION_SHORT = ($GIT_VERSION -Split '.windows.')[0]",
            "$GIT_REVISION = ($GIT_VERSION -Split '.windows.')[1]",
            "If ($GIT_REVISION -gt 1) {$GIT_VERSION_SHORT = \"$GIT_VERSION_SHORT.$GIT_REVISION\"}",
            "Invoke-WebRequest -UseBasicParsing -Uri https://github.com/git-for-windows/git/releases/download/v${GIT_VERSION}/Git-${GIT_VERSION_SHORT}-64-bit.exe -OutFile git-setup.exe",
            "$p = Start-Process git-setup.exe -PassThru -Wait -ArgumentList '/VERYSILENT'",
            "if ($p.ExitCode -ne 0) { throw \"Exit code is $p.ExitCode\" }",
            "del git-setup.exe"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 2 Git"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderComponent2GitComponentBDE86E60": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsEC2Builder-Component2Git-092397BF",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsEC2BuilderComponent2GitVersion6AACF128"
    },
    "Data": "{\"name\":\"Component 2 Git\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"cmd /c curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/git-for-windows/git/releases/latest > $Env:TEMP\\\\latest-git\",\"$LatestUrl = Get-Content $Env:TEMP\\\\latest-git\",\"$GIT_VERSION = ($LatestUrl -Split '/')[-1].substring(1)\",\"$GIT_VERSION_SHORT = ($GIT_VERSION -Split '.windows.')[0]\",\"$GIT_REVISION = ($GIT_VERSION -Split '.windows.')[1]\",\"If ($GIT_REVISION -gt 1) {$GIT_VERSION_SHORT = \\\"$GIT_VERSION_SHORT.$GIT_REVISION\\\"}\",\"Invoke-WebRequest -UseBasicParsing -Uri https://github.com/git-for-windows/git/releases/download/v${GIT_VERSION}/Git-${GIT_VERSION_SHORT}-64-bit.exe -OutFile git-setup.exe\",\"$p = Start-Process git-setup.exe -PassThru -Wait -ArgumentList '/VERYSILENT'\",\"if ($p.ExitCode -ne 0) { throw \\\"Exit code is $p.ExitCode\\\" }\",\"del git-setup.exe\"]}}]}]}",
    "Description": "Component 2 Git"
   }
  },
  "WindowsEC2BuilderComponent3GithubCliVersion1BB3282E": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsEC2Builder-Component3GithubCli-8200D5F9",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 3 GithubCli",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "cmd /c curl -w \"%{redirect_url}\" -fsS https://github.com/cli/cli/releases/latest > $Env:TEMP\\latest-gh",
            "$LatestUrl = Get-Content $Env:TEMP\\latest-gh",
            "$GH_VERSION = ($LatestUrl -Split '/')[-1].substring(1)",
            "Invoke-WebRequest -UseBasicParsing -Uri \"https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_windows_amd64.msi\" -OutFile gh.msi",
            "$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i gh.msi /qn'",
            "if ($p.ExitCode -ne 0) { throw \"Exit code is $p.ExitCode\" }",
            "del gh.msi"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 3 GithubCli"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderComponent3GithubCliComponent44942D8F": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsEC2Builder-Component3GithubCli-8200D5F9",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsEC2BuilderComponent3GithubCliVersion1BB3282E"
    },
    "Data": "{\"name\":\"Component 3 GithubCli\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"cmd /c curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/cli/cli/releases/latest > $Env:TEMP\\\\latest-gh\",\"$LatestUrl = Get-Content $Env:TEMP\\\\latest-gh\",\"$GH_VERSION = ($LatestUrl -Split '/')[-1].substring(1)\",\"Invoke-WebRequest -UseBasicParsing -Uri \\\"https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_windows_amd64.msi\\\" -OutFile gh.msi\",\"$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i gh.msi /qn'\",\"if ($p.ExitCode -ne 0) { throw \\\"Exit code is $p.ExitCode\\\" }\",\"del gh.msi\"]}}]}]}",
    "Description": "Component 3 GithubCli"
   }
  },
  "WindowsEC2BuilderComponent4AwsCliVersion235F6DDE": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsEC2Builder-Component4AwsCli-802CB66A",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 4 AwsCli",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i https://awscli.amazonaws.com/AWSCLIV2.msi /qn'",
            "if ($p.ExitCode -ne 0) { throw \"Exit code is $p.ExitCode\" }"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 4 AwsCli"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderComponent4AwsCliComponent2112B01A": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsEC2Builder-Component4AwsCli-802CB66A",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsEC2BuilderComponent4AwsCliVersion235F6DDE"
    },
    "Data": "{\"name\":\"Component 4 AwsCli\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"$p = Start-Process msiexec.exe -PassThru -Wait -ArgumentList '/i https://awscli.amazonaws.com/AWSCLIV2.msi /qn'\",\"if ($p.ExitCode -ne 0) { throw \\\"Exit code is $p.ExitCode\\\" }\"]}}]}]}",
    "Description": "Component 4 AwsCli"
   }
  },
  "WindowsEC2BuilderComponent5DockerVersion40844B58": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsEC2Builder-Component5Docker-2FBC447D",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 5 Docker",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "cmd /c curl -w \"%{redirect_url}\" -fsS https://github.com/moby/moby/releases/latest > $Env:TEMP\\latest-docker",
            "$LatestUrl = Get-Content $Env:TEMP\\latest-docker",
            "$DOCKER_VERSION = ($LatestUrl -Split '/')[-1].substring(1)",
            "Invoke-WebRequest -UseBasicParsing -Uri \"https://download.docker.com/win/static/stable/x86_64/docker-${DOCKER_VERSION}.zip\" -OutFile docker.zip",
            "Expand-Archive docker.zip -DestinationPath \"$Env:ProgramFiles\"",
            "del docker.zip",
            "$persistedPaths = [Environment]::GetEnvironmentVariable('Path', [EnvironmentVariableTarget]::Machine)",
            "[Environment]::SetEnvironmentVariable(\"PATH\", $persistedPaths + \";$Env:ProgramFiles\\Docker\", [EnvironmentVariableTarget]::Machine)",
            "$env:PATH = $env:PATH + \";$Env:ProgramFiles\\Docker\"",
            "dockerd --register-service",
            "if ($LASTEXITCODE -ne 0) { throw \"Exit code is $LASTEXITCODE\" }",
            "Enable-WindowsOptionalFeature -Online -FeatureName containers -All -NoRestart",
            "cmd /c curl -w \"%{redirect_url}\" -fsS https://github.com/docker/compose/releases/latest > $Env:TEMP\\latest-docker-compose",
            "$LatestUrl = Get-Content $Env:TEMP\\latest-docker-compose",
            "$LatestDockerCompose = ($LatestUrl -Split '/')[-1]",
            "Invoke-WebRequest -UseBasicParsing -Uri  \"https://github.com/docker/compose/releases/download/${LatestDockerCompose}/docker-compose-Windows-x86_64.exe\" -OutFile $Env:ProgramFiles\\Docker\\docker-compose.exe",
            "New-Item -ItemType directory -Path \"$Env:ProgramFiles\\Docker\\cli-plugins\"",
            "Copy-Item -Path \"$Env:ProgramFiles\\Docker\\docker-compose.exe\" -Destination \"$Env:ProgramFiles\\Docker\\cli-plugins\\docker-compose.exe\""
           ]
          }
         },
         {
          "name": "Reboot",
          "action": "Reboot",
          "inputs": {}
         }
        ]
       }
      ]
     },
     "description": "Component 5 Docker"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderComponent5DockerComponent043F7B9D": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsEC2Builder-Component5Docker-2FBC447D",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsEC2BuilderComponent5DockerVersion40844B58"
    },
    "Data": "{\"name\":\"Component 5 Docker\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"cmd /c curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/moby/moby/releases/latest > $Env:TEMP\\\\latest-docker\",\"$LatestUrl = Get-Content $Env:TEMP\\\\latest-docker\",\"$DOCKER_VERSION = ($LatestUrl -Split '/')[-1].substring(1)\",\"Invoke-WebRequest -UseBasicParsing -Uri \\\"https://download.docker.com/win/static/stable/x86_64/docker-${DOCKER_VERSION}.zip\\\" -OutFile docker.zip\",\"Expand-Archive docker.zip -DestinationPath \\\"$Env:ProgramFiles\\\"\",\"del docker.zip\",\"$persistedPaths = [Environment]::GetEnvironmentVariable('Path', [EnvironmentVariableTarget]::Machine)\",\"[Environment]::SetEnvironmentVariable(\\\"PATH\\\", $persistedPaths + \\\";$Env:ProgramFiles\\\\Docker\\\", [EnvironmentVariableTarget]::Machine)\",\"$env:PATH = $env:PATH + \\\";$Env:ProgramFiles\\\\Docker\\\"\",\"dockerd --register-service\",\"if ($LASTEXITCODE -ne 0) { throw \\\"Exit code is $LASTEXITCODE\\\" }\",\"Enable-WindowsOptionalFeature -Online -FeatureName containers -All -NoRestart\",\"cmd /c curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/docker/compose/releases/latest > $Env:TEMP\\\\latest-docker-compose\",\"$LatestUrl = Get-Content $Env:TEMP\\\\latest-docker-compose\",\"$LatestDockerCompose = ($LatestUrl -Split '/')[-1]\",\"Invoke-WebRequest -UseBasicParsing -Uri  \\\"https://github.com/docker/compose/releases/download/${LatestDockerCompose}/docker-compose-Windows-x86_64.exe\\\" -OutFile $Env:ProgramFiles\\\\Docker\\\\docker-compose.exe\",\"New-Item -ItemType directory -Path \\\"$Env:ProgramFiles\\\\Docker\\\\cli-plugins\\\"\",\"Copy-Item -Path \\\"$Env:ProgramFiles\\\\Docker\\\\docker-compose.exe\\\" -Destination \\\"$Env:ProgramFiles\\\\Docker\\\\cli-plugins\\\\docker-compose.exe\\\"\"]}},{\"name\":\"Reboot\",\"action\":\"Reboot\",\"inputs\":{}}]}]}",
    "Description": "Component 5 Docker"
   }
  },
  "WindowsEC2BuilderComponent6GithubRunnerVersion068CC361": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsEC2Builder-Component6GithubRunner-0FBD0A17",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 6 GithubRunner",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": []
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "cmd /c curl -w \"%{redirect_url}\" -fsS https://github.com/actions/runner/releases/latest > $Env:TEMP\\latest-gha",
            "$LatestUrl = Get-Content $Env:TEMP\\latest-gha",
            "$RUNNER_VERSION = ($LatestUrl -Split '/')[-1].substring(1)",
            "Invoke-WebRequest -UseBasicParsing -Uri \"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-win-x64-${RUNNER_VERSION}.zip\" -OutFile actions.zip",
            "Expand-Archive actions.zip -DestinationPath C:\\actions",
            "del actions.zip",
            "echo latest | Out-File -Encoding ASCII -NoNewline C:\\actions\\RUNNER_VERSION"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 6 GithubRunner"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderComponent6GithubRunnerComponent6342E200": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsEC2Builder-Component6GithubRunner-0FBD0A17",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsEC2BuilderComponent6GithubRunnerVersion068CC361"
    },
    "Data": "{\"name\":\"Component 6 GithubRunner\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"cmd /c curl -w \\\"%{redirect_url}\\\" -fsS https://github.com/actions/runner/releases/latest > $Env:TEMP\\\\latest-gha\",\"$LatestUrl = Get-Content $Env:TEMP\\\\latest-gha\",\"$RUNNER_VERSION = ($LatestUrl -Split '/')[-1].substring(1)\",\"Invoke-WebRequest -UseBasicParsing -Uri \\\"https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-win-x64-${RUNNER_VERSION}.zip\\\" -OutFile actions.zip\",\"Expand-Archive actions.zip -DestinationPath C:\\\\actions\",\"del actions.zip\",\"echo latest | Out-File -Encoding ASCII -NoNewline C:\\\\actions\\\\RUNNER_VERSION\"]}}]}]}",
    "Description": "Component 6 GithubRunner"
   }
  },
  "WindowsEC2BuilderComponent7CustomUndefinedVersion96AF0127": {
   "Type": "Custom::ImageBuilder-Component-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "Component",
    "ObjectName": "github-runners-test-WindowsEC2Builder-Component7Custom-Undefined-8DF626A4",
    "VersionedData": {
     "platform": "Windows",
     "data": {
      "name": "Component 7 Custom-Undefined",
      "schemaVersion": "1.0",
      "phases": [
       {
        "name": "build",
        "steps": [
         {
          "name": "Download",
          "action": "S3Download",
          "inputs": [
           {
            "source": {
             "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
            },
            "destination": "FUNDING.yml"
           }
          ]
         },
         {
          "name": "Run",
          "action": "ExecutePowerShell",
          "inputs": {
           "commands": [
            "$ErrorActionPreference = 'Stop'",
            "$ProgressPreference = 'SilentlyContinue'",
            "Set-PSDebug -Trace 1",
            "New-Item -ItemType file -Path / -Name custom-file",
            "New-Item -ItemType directory -Path / -Name custom-dir",
            "Move-Item FUNDING.yml /custom-dir"
           ]
          }
         }
        ]
       }
      ]
     },
     "description": "Component 7 Custom-Undefined"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderComponent7CustomUndefinedComponent83F7C59D": {
   "Type": "AWS::ImageBuilder::Component",
   "Properties": {
    "Name": "github-runners-test-WindowsEC2Builder-Component7Custom-Undefined-8DF626A4",
    "Platform": "Windows",
    "Version": {
     "Ref": "WindowsEC2BuilderComponent7CustomUndefinedVersion96AF0127"
    },
    "Data": {
     "Fn::Join": [
      "",
      [
       "{\"name\":\"Component 7 Custom-Undefined\",\"schemaVersion\":\"1.0\",\"phases\":[{\"name\":\"build\",\"steps\":[{\"name\":\"Download\",\"action\":\"S3Download\",\"inputs\":[{\"source\":\"",
       {
        "Fn::Sub": "s3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/64f83fc47e69ce862669fca14d759c3034fdbed3686b66dcf7bf9ff166f65c68.yml"
       },
       "\",\"destination\":\"FUNDING.yml\"}]},{\"name\":\"Run\",\"action\":\"ExecutePowerShell\",\"inputs\":{\"commands\":[\"$ErrorActionPreference = 'Stop'\",\"$ProgressPreference = 'SilentlyContinue'\",\"Set-PSDebug -Trace 1\",\"New-Item -ItemType file -Path / -Name custom-file\",\"New-Item -ItemType directory -Path / -Name custom-dir\",\"Move-Item FUNDING.yml /custom-dir\"]}}]}]}"
      ]
     ]
    },
    "Description": "Component 7 Custom-Undefined"
   }
  },
  "WindowsEC2BuilderAmiRecipeVersionEE5C2F0C": {
   "Type": "Custom::ImageBuilder-ImageRecipe-Version",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E",
      "Arn"
     ]
    },
    "ObjectType": "ImageRecipe",
    "ObjectName": "github-runners-test-WindowsEC2Builder-AmiRecipe-BEDA5750",
    "VersionedData": {
     "platform": "Windows",
     "components": [
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsEC2BuilderComponent0RequiredPackagesComponent42A20182",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsEC2BuilderComponent1RunnerUserComponent90CB91A0",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsEC2BuilderComponent2GitComponentBDE86E60",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsEC2BuilderComponent3GithubCliComponent44942D8F",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsEC2BuilderComponent4AwsCliComponent2112B01A",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsEC2BuilderComponent5DockerComponent043F7B9D",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsEC2BuilderComponent6GithubRunnerComponent6342E200",
         "Arn"
        ]
       }
      },
      {
       "componentArn": {
        "Fn::GetAtt": [
         "WindowsEC2BuilderComponent7CustomUndefinedComponent83F7C59D",
         "Arn"
        ]
       }
      }
     ],
     "parentAmi": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":imagebuilder:",
        {
         "Ref": "AWS::Region"
        },
        ":aws:image/windows-server-2022-english-full-base-x86/x.x.x"
       ]
      ]
     }
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "WindowsEC2BuilderAmiRecipe41A137FF": {
   "Type": "AWS::ImageBuilder::ImageRecipe",
   "Properties": {
    "Components": [
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsEC2BuilderComponent0RequiredPackagesComponent42A20182",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsEC2BuilderComponent1RunnerUserComponent90CB91A0",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsEC2BuilderComponent2GitComponentBDE86E60",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsEC2BuilderComponent3GithubCliComponent44942D8F",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsEC2BuilderComponent4AwsCliComponent2112B01A",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsEC2BuilderComponent5DockerComponent043F7B9D",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsEC2BuilderComponent6GithubRunnerComponent6342E200",
        "Arn"
       ]
      }
     },
     {
      "ComponentArn": {
       "Fn::GetAtt": [
        "WindowsEC2BuilderComponent7CustomUndefinedComponent83F7C59D",
        "Arn"
       ]
      }
     }
    ],
    "Name": "github-runners-test-WindowsEC2Builder-AmiRecipe-BEDA5750",
    "ParentImage": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":imagebuilder:",
       {
        "Ref": "AWS::Region"
       },
       ":aws:image/windows-server-2022-english-full-base-x86/x.x.x"
      ]
     ]
    },
    "Version": {
     "Ref": "WindowsEC2BuilderAmiRecipeVersionEE5C2F0C"
    },
    "WorkingDirectory": "C:/"
   }
  },
  "WindowsEC2BuilderAmiLog126E54B2": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/imagebuilder/github-runners-test-WindowsEC2Builder-AmiRecipe-BEDA5750",
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "WindowsEC2BuilderInstanceProfileA8DBA763": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "WindowsEC2BuilderRole1BA7D3E7"
     }
    ]
   }
  },
  "WindowsEC2BuilderInfrastructure757D4FD7": {
   "Type": "AWS::ImageBuilder::InfrastructureConfiguration",
   "Properties": {
    "InstanceProfileName": {
     "Ref": "WindowsEC2BuilderInstanceProfileA8DBA763"
    },
    "Name": "github-runners-test-WindowsEC2Builder-5FAF8285",
    "InstanceMetadataOptions": {
     "HttpPutResponseHopLimit": 2,
     "HttpTokens": "required"
    },
    "InstanceTypes": [
     "m5.large"
    ],
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "WindowsEC2BuilderSGE3F67842",
       "GroupId"
      ]
     }
    ],
    "SnsTopicArn": {
     "Ref": "runnersImageBuilderBuildsDF5A50E4"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    }
   }
  },
  "WindowsEC2BuilderAMIImage9D812188": {
   "Type": "AWS::ImageBuilder::Image",
   "Properties": {
    "InfrastructureConfigurationArn": {
     "Fn::GetAtt": [
      "WindowsEC2BuilderInfrastructure757D4FD7",
      "Arn"
     ]
    },
    "DistributionConfigurationArn": {
     "Fn::GetAtt": [
      "WindowsEC2BuilderAMIDistributionC7E428C1",
      "Arn"
     ]
    },
    "ImageRecipeArn": {
     "Fn::GetAtt": [
      "WindowsEC2BuilderAmiRecipe41A137FF",
      "Arn"
     ]
    },
    "ImageTestsConfiguration": {
     "ImageTestsEnabled": false
    }
   },
   "DependsOn": [
    "WindowsEC2BuilderAmiLog126E54B2",
    "WindowsEC2BuilderInfrastructure757D4FD7"
   ]
  },
  "WindowsEC2BuilderAMIPipelineE3836949": {
   "Type": "AWS::ImageBuilder::ImagePipeline",
   "Properties": {
    "InfrastructureConfigurationArn": {
     "Fn::GetAtt": [
      "WindowsEC2BuilderInfrastructure757D4FD7",
      "Arn"
     ]
    },
    "Name": "github-runners-test-WindowsEC2Builder-5FAF8285",
    "DistributionConfigurationArn": {
     "Fn::GetAtt": [
      "WindowsEC2BuilderAMIDistributionC7E428C1",
      "Arn"
     ]
    },
    "ImageRecipeArn": {
     "Fn::GetAtt": [
      "WindowsEC2BuilderAmiRecipe41A137FF",
      "Arn"
     ]
    },
    "ImageTestsConfiguration": {
     "ImageTestsEnabled": false
    },
    "Schedule": {
     "PipelineExecutionStartCondition": "EXPRESSION_MATCH_ONLY",
     "ScheduleExpression": "rate(7 days)"
    }
   },
   "DependsOn": [
    "WindowsEC2BuilderAmiLog126E54B2",
    "WindowsEC2BuilderInfrastructure757D4FD7"
   ]
  },
  "WindowsEC2BuilderDeleteAMISchedule52E66C5D": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Delete old AMIs for github-runners-test/Windows EC2 Builder",
    "ScheduleExpression": "rate(1 day)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": {
       "Fn::Join": [
        "",
        [
         "{\"RequestType\":\"Scheduled\",\"LaunchTemplateId\":\"",
         {
          "Ref": "WindowsEC2BuilderLaunchtemplate0A66E9C2"
         },
         "\",\"StackName\":\"github-runners-test\",\"BuilderName\":\"github-runners-test/Windows EC2 Builder\"}"
        ]
       ]
      }
     }
    ]
   }
  },
  "WindowsEC2BuilderDeleteAMIScheduleAllowEventRulegithubrunnerstestdeleteamidcc036c8876b451ea2c1552f9e06e9e147BECA882F03ABC6": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "WindowsEC2BuilderDeleteAMISchedule52E66C5D",
      "Arn"
     ]
    }
   }
  },
  "WindowsEC2BuilderAMIDeleterF9643905": {
   "Type": "Custom::AmiDeleter",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303",
      "Arn"
     ]
    },
    "StackName": "github-runners-test",
    "BuilderName": "github-runners-test/Windows EC2 Builder"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "WindowsEC2BuilderReaperScheduleAMI948B0F32": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Delete old image build versions for github-runners-test-WindowsEC2Builder-AmiRecipe-BEDA5750",
    "ScheduleExpression": "rate(1 day)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": "{\"RecipeName\":\"github-runners-test-WindowsEC2Builder-AmiRecipe-BEDA5750\"}"
     }
    ]
   }
  },
  "WindowsEC2BuilderReaperScheduleAMIAllowEventRulegithubrunnerstestReaperdcc036c8876b451ea2c1552f9e06e9e1A3B5C9632369AAD6": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "WindowsEC2BuilderReaperScheduleAMI948B0F32",
      "Arn"
     ]
    }
   }
  },
  "CodeBuildx64LogsA21ECD59": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildx64LogsLogsfilter915A4B6F": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "CodeBuildx64LogsA21ECD59"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "CodeBuildx64CodeBuildRole32E5C764": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "CodeBuildx64CodeBuildRoleDefaultPolicy221DA642": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderRepository9DE3B6F0",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildx64LogsA21ECD59",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildx64CodeBuild7DC01A1E"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildx64CodeBuild7DC01A1E"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "CodeBuildx64CodeBuild7DC01A1E"
          },
          "-*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildx64CodeBuildRoleDefaultPolicy221DA642",
    "Roles": [
     {
      "Ref": "CodeBuildx64CodeBuildRole32E5C764"
     }
    ]
   }
  },
  "CodeBuildx64CodeBuild7DC01A1E": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": {
      "Fn::Join": [
       "",
       [
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "CodeBuildImageBuilderRepository9DE3B6F0",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "CodeBuildImageBuilderRepository9DE3B6F0",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
        },
        ":latest"
       ]
      ]
     },
     "ImagePullCredentialsType": "SERVICE_ROLE",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "CodeBuildx64CodeBuildRole32E5C764",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"RUNNER_TOKEN\": \"unspecified\",\n      \"RUNNER_NAME\": \"unspecified\",\n      \"RUNNER_LABEL\": \"unspecified\",\n      \"OWNER\": \"unspecified\",\n      \"REPO\": \"unspecified\",\n      \"GITHUB_DOMAIN\": \"github.com\"\n    }\n  },\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"nohup dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &\",\n        \"timeout 15 sh -c \\\"until docker info; do echo .; sleep 1; done\\\"\",\n        \"if [ \\\"${RUNNER_VERSION}\\\" = \\\"latest\\\" ]; then RUNNER_FLAGS=\\\"\\\"; else RUNNER_FLAGS=\\\"--disableupdate\\\"; fi\",\n        \"sudo -Hu runner /home/runner/config.sh --unattended --url \\\"https://${GITHUB_DOMAIN}/${OWNER}/${REPO}\\\" --token \\\"${RUNNER_TOKEN}\\\" --ephemeral --work _work --labels \\\"${RUNNER_LABEL}\\\" ${RUNNER_FLAGS} --name \\\"${RUNNER_NAME}\\\"\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"sudo --preserve-env=AWS_CONTAINER_CREDENTIALS_RELATIVE_URI,AWS_DEFAULT_REGION,AWS_REGION -Hu runner /home/runner/run.sh\",\n        \"STATUS=$(grep -Phors \\\"finish job request for job [0-9a-f\\\\-]+ with result: \\\\K.*\\\" /home/runner/_diag/ | tail -n1)\",\n        \"[ -n \\\"$STATUS\\\" ] && echo CDKGHA JOB DONE \\\"$RUNNER_LABEL\\\" \\\"$STATUS\\\"\"\n      ]\n    }\n  }\n}",
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "GitHub Actions self-hosted runner for labels codebuild-x64",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "CodeBuildx64LogsA21ECD59"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "c9749e09be6e3c3035293f90674e1e9bd7c4c1b6a29e8376ac43f26c773d2cba.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837",
      "Arn"
     ]
    },
    "Description": "Custom resource handler that triggers CodeBuild to build runner images, and cleans-up images on deletion",
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 180
   },
   "DependsOn": [
    "buildimagedcc036c8876b451ea2c1552f9e06e9e1ServiceRoleC3DE4837"
   ]
  },
  "buildimagedcc036c8876b451ea2c1552f9e06e9e1LogRetention13129CEB": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "buildimagedcc036c8876b451ea2c1552f9e06e9e173B4162A"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:PutRetentionPolicy",
        "logs:DeleteRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "eb5b005c858404ea0c8f68098ed5dcdf5340e02461f149751d10f59c210d5ef8.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ]
  },
  "CodeBuildARMLogs7C7FC5A7": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildARMLogsLogsfilter32B5122B": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "CodeBuildARMLogs7C7FC5A7"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "CodeBuildARMCodeBuildRole74DB4985": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "CodeBuildARMCodeBuildRoleDefaultPolicyFC84CEAE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmRepositoryE967421B",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildARMLogs7C7FC5A7",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildARMCodeBuildC5F301F2"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildARMCodeBuildC5F301F2"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "CodeBuildARMCodeBuildC5F301F2"
          },
          "-*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildARMCodeBuildRoleDefaultPolicyFC84CEAE",
    "Roles": [
     {
      "Ref": "CodeBuildARMCodeBuildRole74DB4985"
     }
    ]
   }
  },
  "CodeBuildARMCodeBuildC5F301F2": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "Image": {
      "Fn::Join": [
       "",
       [
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "CodeBuildImageBuilderarmRepositoryE967421B",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "CodeBuildImageBuilderarmRepositoryE967421B",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
        },
        ":latest"
       ]
      ]
     },
     "ImagePullCredentialsType": "SERVICE_ROLE",
     "PrivilegedMode": true,
     "Type": "ARM_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "CodeBuildARMCodeBuildRole74DB4985",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"RUNNER_TOKEN\": \"unspecified\",\n      \"RUNNER_NAME\": \"unspecified\",\n      \"RUNNER_LABEL\": \"unspecified\",\n      \"OWNER\": \"unspecified\",\n      \"REPO\": \"unspecified\",\n      \"GITHUB_DOMAIN\": \"github.com\"\n    }\n  },\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"nohup dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &\",\n        \"timeout 15 sh -c \\\"until docker info; do echo .; sleep 1; done\\\"\",\n        \"if [ \\\"${RUNNER_VERSION}\\\" = \\\"latest\\\" ]; then RUNNER_FLAGS=\\\"\\\"; else RUNNER_FLAGS=\\\"--disableupdate\\\"; fi\",\n        \"sudo -Hu runner /home/runner/config.sh --unattended --url \\\"https://${GITHUB_DOMAIN}/${OWNER}/${REPO}\\\" --token \\\"${RUNNER_TOKEN}\\\" --ephemeral --work _work --labels \\\"${RUNNER_LABEL}\\\" ${RUNNER_FLAGS} --name \\\"${RUNNER_NAME}\\\"\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"sudo --preserve-env=AWS_CONTAINER_CREDENTIALS_RELATIVE_URI,AWS_DEFAULT_REGION,AWS_REGION -Hu runner /home/runner/run.sh\",\n        \"STATUS=$(grep -Phors \\\"finish job request for job [0-9a-f\\\\-]+ with result: \\\\K.*\\\" /home/runner/_diag/ | tail -n1)\",\n        \"[ -n \\\"$STATUS\\\" ] && echo CDKGHA JOB DONE \\\"$RUNNER_LABEL\\\" \\\"$STATUS\\\"\"\n      ]\n    }\n  }\n}",
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "GitHub Actions self-hosted runner for labels codebuild,linux,arm64",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "CodeBuildARMLogs7C7FC5A7"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "CodeBuildWindowsLogsF4DD93A5": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CodeBuildWindowsLogsLogsfilterC0A33A89": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "CodeBuildWindowsLogsF4DD93A5"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "CodeBuildWindowsCodeBuildRoleDC93697E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "CodeBuildWindowsCodeBuildRoleDefaultPolicyA932AC4D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "WindowsImageBuilderRepositoryA4CBB6D8",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildWindowsLogsF4DD93A5",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildWindowsCodeBuildC39F35C1"
           }
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/codebuild/",
           {
            "Ref": "CodeBuildWindowsCodeBuildC39F35C1"
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":codebuild:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":report-group/",
          {
           "Ref": "CodeBuildWindowsCodeBuildC39F35C1"
          },
          "-*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CodeBuildWindowsCodeBuildRoleDefaultPolicyA932AC4D",
    "Roles": [
     {
      "Ref": "CodeBuildWindowsCodeBuildRoleDC93697E"
     }
    ]
   }
  },
  "CodeBuildWindowsCodeBuildC39F35C1": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_MEDIUM",
     "Image": {
      "Fn::Join": [
       "",
       [
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "WindowsImageBuilderRepositoryA4CBB6D8",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "WindowsImageBuilderRepositoryA4CBB6D8",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
        },
        ":latest"
       ]
      ]
     },
     "ImagePullCredentialsType": "SERVICE_ROLE",
     "PrivilegedMode": false,
     "Type": "WINDOWS_SERVER_2019_CONTAINER"
    },
    "ServiceRole": {
     "Fn::GetAtt": [
      "CodeBuildWindowsCodeBuildRoleDC93697E",
      "Arn"
     ]
    },
    "Source": {
     "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"variables\": {\n      \"RUNNER_TOKEN\": \"unspecified\",\n      \"RUNNER_NAME\": \"unspecified\",\n      \"RUNNER_LABEL\": \"unspecified\",\n      \"OWNER\": \"unspecified\",\n      \"REPO\": \"unspecified\",\n      \"GITHUB_DOMAIN\": \"github.com\"\n    }\n  },\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"cd \\\\actions\",\n        \"if (${Env:RUNNER_VERSION} -eq \\\"latest\\\") { $RunnerFlags = \\\"\\\" } else { $RunnerFlags = \\\"--disableupdate\\\" }\",\n        \"./config.cmd --unattended --url \\\"https://${Env:GITHUB_DOMAIN}/${Env:OWNER}/${Env:REPO}\\\" --token \\\"${Env:RUNNER_TOKEN}\\\" --ephemeral --work _work --labels \\\"${Env:RUNNER_LABEL}\\\" ${RunnerFlags} --name \\\"${Env:RUNNER_NAME}\\\"\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cd \\\\actions\",\n        \"./run.cmd\",\n        \"$STATUS = Select-String -Path './_diag/*.log' -Pattern 'finish job request for job [0-9a-f\\\\-]+ with result: (.*)' | %{$_.Matches.Groups[1].Value} | Select-Object -Last 1\",\n        \"if ($STATUS) { echo \\\"CDKGHA JOB DONE ${Env:RUNNER_LABEL} $STATUS\\\" }\"\n      ]\n    }\n  }\n}",
     "Type": "NO_SOURCE"
    },
    "Cache": {
     "Type": "NO_CACHE"
    },
    "Description": "GitHub Actions self-hosted runner for labels codebuild,windows,x64",
    "EncryptionKey": "alias/aws/s3",
    "LogsConfig": {
     "CloudWatchLogs": {
      "GroupName": {
       "Ref": "CodeBuildWindowsLogsF4DD93A5"
      },
      "Status": "ENABLED"
     }
    },
    "TimeoutInMinutes": 60
   }
  },
  "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleE25C1A58": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy93D80BBD": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "imagebuilder:ListComponents",
        "imagebuilder:ListContainerRecipes",
        "imagebuilder:ListImageRecipes"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy93D80BBD",
    "Roles": [
     {
      "Ref": "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleE25C1A58"
     }
    ]
   }
  },
  "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "ee8cc3f15a0ba973fd9a9bb106b884fc370655c91b1ce9e3dd97dd0f2e92211d.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleE25C1A58",
      "Arn"
     ]
    },
    "Description": "Custom resource handler that bumps up Image Builder versions",
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 300
   },
   "DependsOn": [
    "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy93D80BBD",
    "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleE25C1A58"
   ]
  },
  "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1LogRetentionA8337CBD": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "awsimagebuilderversionerdcc036c8876b451ea2c1552f9e06e9e1591B871E"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "Reaperdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleF3DF0C70": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "Reaperdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy0E224712": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "imagebuilder:ListImages",
        "imagebuilder:ListImageBuildVersions",
        "imagebuilder:DeleteImage",
        "ec2:DescribeImages",
        "ecr:DescribeImages"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Reaperdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy0E224712",
    "Roles": [
     {
      "Ref": "Reaperdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleF3DF0C70"
     }
    ]
   }
  },
  "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "5f8bfcf4ab8ff4424ec7439e70ebd737d939618a617fa91bfb0482b2a957cf23.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "Reaperdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleF3DF0C70",
      "Arn"
     ]
    },
    "Description": "AWS Image Builder version reaper deletes old image build versions pointing to deleted AMIs/Docker images",
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 180
   },
   "DependsOn": [
    "Reaperdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy0E224712",
    "Reaperdcc036c8876b451ea2c1552f9e06e9e1ServiceRoleF3DF0C70"
   ]
  },
  "Reaperdcc036c8876b451ea2c1552f9e06e9e1LogRetention316D07CD": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "Reaperdcc036c8876b451ea2c1552f9e06e9e1243BFB08"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "ECSsecuritygroup76605212": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/ECS/security group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "ECScluster20BC0B82": {
   "Type": "AWS::ECS::Cluster"
  },
  "ECScluster9E223943": {
   "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
   "Properties": {
    "CapacityProviders": [
     {
      "Ref": "ECSCapacityProviderABF1B146"
     }
    ],
    "Cluster": {
     "Ref": "ECScluster20BC0B82"
    },
    "DefaultCapacityProviderStrategy": []
   }
  },
  "ECSLaunchTemplateRole3D54417B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     }
    ]
   }
  },
  "ECSLaunchTemplateRoleDefaultPolicyA6578409": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderRepository9DE3B6F0",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ECScluster20BC0B82",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "ECScluster20BC0B82",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DiscoverPollEndpoint",
        "ecr:GetAuthorizationToken",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ECSLaunchTemplateRoleDefaultPolicyA6578409",
    "Roles": [
     {
      "Ref": "ECSLaunchTemplateRole3D54417B"
     }
    ]
   }
  },
  "ECSLaunchTemplateProfileC7A3F149": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "ECSLaunchTemplateRole3D54417B"
     }
    ]
   }
  },
  "ECSLaunchTemplate3A132D2F": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Arn": {
       "Fn::GetAtt": [
        "ECSLaunchTemplateProfileC7A3F149",
        "Arn"
       ]
      }
     },
     "ImageId": "resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
     "InstanceMarketOptions": {
      "MarketType": "spot",
      "SpotOptions": {
       "SpotInstanceType": "one-time"
      }
     },
     "InstanceType": "m5.large",
     "MetadataOptions": {
      "HttpTokens": "required"
     },
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "ECSsecuritygroup76605212",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/ECS/Launch Template"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/ECS/Launch Template"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": {
       "Fn::Join": [
        "",
        [
         "#!/bin/bash\naws ecr get-login-password --region ",
         {
          "Ref": "AWS::Region"
         },
         " | docker login --username AWS --password-stdin ",
         {
          "Ref": "AWS::AccountId"
         },
         ".dkr.ecr.",
         {
          "Ref": "AWS::Region"
         },
         ".amazonaws.com\ndocker pull ",
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "CodeBuildImageBuilderRepository9DE3B6F0",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "CodeBuildImageBuilderRepository9DE3B6F0",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
         },
         ":latest &\necho ECS_CLUSTER=",
         {
          "Ref": "ECScluster20BC0B82"
         },
         " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
        ]
       ]
      }
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "github-runners-test/ECS/Launch Template"
       }
      ]
     }
    ]
   }
  },
  "ECSAutoScalingGroupASG88763D9A": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "MaxSize": "1",
    "MinSize": "0",
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "ECSLaunchTemplate3A132D2F"
     },
     "Version": {
      "Fn::GetAtt": [
       "ECSLaunchTemplate3A132D2F",
       "LatestVersionNumber"
      ]
     }
    },
    "NewInstancesProtectedFromScaleIn": true,
    "VPCZoneIdentifier": [
     {
      "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
     },
     {
      "Ref": "VpcPublicSubnet2Subnet691E08A3"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   }
  },
  "ECSCapacityProviderABF1B146": {
   "Type": "AWS::ECS::CapacityProvider",
   "Properties": {
    "AutoScalingGroupProvider": {
     "AutoScalingGroupArn": {
      "Ref": "ECSAutoScalingGroupASG88763D9A"
     },
     "ManagedScaling": {
      "Status": "ENABLED",
      "TargetCapacity": 100
     },
     "ManagedTerminationProtection": "ENABLED"
    }
   }
  },
  "ECSlogs71446134": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ECSlogslogsfilterC744F425": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "ECSlogs71446134"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "ECStaskTaskRoleFE831ECD": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "ECStask8F0DD550": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "sh",
       "-c",
       "sudo socat UNIX-LISTEN:/var/run/docker.sock,group=docker,mode=770,fork UNIX-CONNECT:/var/run/docker.sock.host &\n        cd /home/runner &&\n        if [ \"$RUNNER_VERSION\" = \"latest\" ]; then RUNNER_FLAGS=\"\"; else RUNNER_FLAGS=\"--disableupdate\"; fi &&\n        ./config.sh --unattended --url \"https://$GITHUB_DOMAIN/$OWNER/$REPO\" --token \"$RUNNER_TOKEN\" --ephemeral --work _work --labels \"$RUNNER_LABEL\" $RUNNER_FLAGS --name \"$RUNNER_NAME\" && \n        ./run.sh &&\n        STATUS=$(grep -Phors \"finish job request for job [0-9a-f\\-]+ with result: \\K.*\" _diag/ | tail -n1) &&\n        [ -n \"$STATUS\" ] && echo CDKGHA JOB DONE \"$RUNNER_LABEL\" \"$STATUS\""
      ],
      "Cpu": 1024,
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "CodeBuildImageBuilderRepository9DE3B6F0",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "CodeBuildImageBuilderRepository9DE3B6F0",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "ECSlogs71446134"
        },
        "awslogs-stream-prefix": "runner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Memory": 3500,
      "MountPoints": [
       {
        "ContainerPath": "/var/run/docker.sock.host",
        "ReadOnly": false,
        "SourceVolume": "docker"
       }
      ],
      "Name": "runner",
      "Privileged": true,
      "User": "runner"
     }
    ],
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ECStaskExecutionRole1A6D19A5",
      "Arn"
     ]
    },
    "Family": "githubrunnerstestECStaskCE74CC84",
    "NetworkMode": "bridge",
    "RequiresCompatibilities": [
     "EC2"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECStaskTaskRoleFE831ECD",
      "Arn"
     ]
    },
    "Volumes": [
     {
      "Host": {
       "SourcePath": "/var/run/docker.sock"
      },
      "Name": "docker"
     }
    ]
   }
  },
  "ECStaskExecutionRole1A6D19A5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "ECStaskExecutionRoleDefaultPolicy564C1271": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderRepository9DE3B6F0",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ECSlogs71446134",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ECStaskExecutionRoleDefaultPolicy564C1271",
    "Roles": [
     {
      "Ref": "ECStaskExecutionRole1A6D19A5"
     }
    ]
   }
  },
  "ECSARM64securitygroup281D94B2": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/ECS ARM64/security group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "ECSARM64cluster4ECAA083": {
   "Type": "AWS::ECS::Cluster"
  },
  "ECSARM64cluster43E75409": {
   "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
   "Properties": {
    "CapacityProviders": [
     {
      "Ref": "ECSARM64CapacityProvider8627FEF9"
     }
    ],
    "Cluster": {
     "Ref": "ECSARM64cluster4ECAA083"
    },
    "DefaultCapacityProviderStrategy": []
   }
  },
  "ECSARM64LaunchTemplateRole9D1574E2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     }
    ]
   }
  },
  "ECSARM64LaunchTemplateRoleDefaultPolicy0705A7AA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmRepositoryE967421B",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ECSARM64cluster4ECAA083",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "ECSARM64cluster4ECAA083",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DiscoverPollEndpoint",
        "ecr:GetAuthorizationToken",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ECSARM64LaunchTemplateRoleDefaultPolicy0705A7AA",
    "Roles": [
     {
      "Ref": "ECSARM64LaunchTemplateRole9D1574E2"
     }
    ]
   }
  },
  "ECSARM64LaunchTemplateProfileBF272018": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "ECSARM64LaunchTemplateRole9D1574E2"
     }
    ]
   }
  },
  "ECSARM64LaunchTemplateC44F6059": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Arn": {
       "Fn::GetAtt": [
        "ECSARM64LaunchTemplateProfileBF272018",
        "Arn"
       ]
      }
     },
     "ImageId": "resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id",
     "InstanceType": "m6g.large",
     "MetadataOptions": {
      "HttpTokens": "required"
     },
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "ECSARM64securitygroup281D94B2",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/ECS ARM64/Launch Template"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/ECS ARM64/Launch Template"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": {
       "Fn::Join": [
        "",
        [
         "#!/bin/bash\naws ecr get-login-password --region ",
         {
          "Ref": "AWS::Region"
         },
         " | docker login --username AWS --password-stdin ",
         {
          "Ref": "AWS::AccountId"
         },
         ".dkr.ecr.",
         {
          "Ref": "AWS::Region"
         },
         ".amazonaws.com\ndocker pull ",
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "CodeBuildImageBuilderarmRepositoryE967421B",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "CodeBuildImageBuilderarmRepositoryE967421B",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
         },
         ":latest &\necho ECS_CLUSTER=",
         {
          "Ref": "ECSARM64cluster4ECAA083"
         },
         " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
        ]
       ]
      }
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "github-runners-test/ECS ARM64/Launch Template"
       }
      ]
     }
    ]
   }
  },
  "ECSARM64AutoScalingGroupASGA19FC118": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "MaxSize": "1",
    "MinSize": "0",
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "ECSARM64LaunchTemplateC44F6059"
     },
     "Version": {
      "Fn::GetAtt": [
       "ECSARM64LaunchTemplateC44F6059",
       "LatestVersionNumber"
      ]
     }
    },
    "NewInstancesProtectedFromScaleIn": true,
    "VPCZoneIdentifier": [
     {
      "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
     },
     {
      "Ref": "VpcPublicSubnet2Subnet691E08A3"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   }
  },
  "ECSARM64CapacityProvider8627FEF9": {
   "Type": "AWS::ECS::CapacityProvider",
   "Properties": {
    "AutoScalingGroupProvider": {
     "AutoScalingGroupArn": {
      "Ref": "ECSARM64AutoScalingGroupASGA19FC118"
     },
     "ManagedScaling": {
      "Status": "ENABLED",
      "TargetCapacity": 100
     },
     "ManagedTerminationProtection": "ENABLED"
    }
   }
  },
  "ECSARM64logs1A2F1E00": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ECSARM64logslogsfilter6914CFA1": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "ECSARM64logs1A2F1E00"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "ECSARM64taskTaskRole23B1CB4E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "ECSARM64task27EB8443": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "sh",
       "-c",
       "sudo socat UNIX-LISTEN:/var/run/docker.sock,group=docker,mode=770,fork UNIX-CONNECT:/var/run/docker.sock.host &\n        cd /home/runner &&\n        if [ \"$RUNNER_VERSION\" = \"latest\" ]; then RUNNER_FLAGS=\"\"; else RUNNER_FLAGS=\"--disableupdate\"; fi &&\n        ./config.sh --unattended --url \"https://$GITHUB_DOMAIN/$OWNER/$REPO\" --token \"$RUNNER_TOKEN\" --ephemeral --work _work --labels \"$RUNNER_LABEL\" $RUNNER_FLAGS --name \"$RUNNER_NAME\" && \n        ./run.sh &&\n        STATUS=$(grep -Phors \"finish job request for job [0-9a-f\\-]+ with result: \\K.*\" _diag/ | tail -n1) &&\n        [ -n \"$STATUS\" ] && echo CDKGHA JOB DONE \"$RUNNER_LABEL\" \"$STATUS\""
      ],
      "Cpu": 1024,
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "CodeBuildImageBuilderarmRepositoryE967421B",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "CodeBuildImageBuilderarmRepositoryE967421B",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "ECSARM64logs1A2F1E00"
        },
        "awslogs-stream-prefix": "runner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Memory": 3500,
      "MountPoints": [
       {
        "ContainerPath": "/var/run/docker.sock.host",
        "ReadOnly": false,
        "SourceVolume": "docker"
       }
      ],
      "Name": "runner",
      "Privileged": true,
      "User": "runner"
     }
    ],
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ECSARM64taskExecutionRoleBF2AE76F",
      "Arn"
     ]
    },
    "Family": "githubrunnerstestECSARM64taskE94E43A3",
    "NetworkMode": "bridge",
    "RequiresCompatibilities": [
     "EC2"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSARM64taskTaskRole23B1CB4E",
      "Arn"
     ]
    },
    "Volumes": [
     {
      "Host": {
       "SourcePath": "/var/run/docker.sock"
      },
      "Name": "docker"
     }
    ]
   }
  },
  "ECSARM64taskExecutionRoleBF2AE76F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "ECSARM64taskExecutionRoleDefaultPolicy17294239": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmRepositoryE967421B",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ECSARM64logs1A2F1E00",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ECSARM64taskExecutionRoleDefaultPolicy17294239",
    "Roles": [
     {
      "Ref": "ECSARM64taskExecutionRoleBF2AE76F"
     }
    ]
   }
  },
  "ECSWindowssecuritygroupB4EE54DA": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/ECS Windows/security group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "ECSWindowscluster14061F74": {
   "Type": "AWS::ECS::Cluster"
  },
  "ECSWindowscluster49B54894": {
   "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
   "Properties": {
    "CapacityProviders": [
     {
      "Ref": "ECSWindowsCapacityProvider8F8896A5"
     }
    ],
    "Cluster": {
     "Ref": "ECSWindowscluster14061F74"
    },
    "DefaultCapacityProviderStrategy": []
   }
  },
  "ECSWindowsLaunchTemplateRole610E9A88": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     }
    ]
   }
  },
  "ECSWindowsLaunchTemplateRoleDefaultPolicy48457459": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "WindowsImageBuilderRepositoryA4CBB6D8",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ECSWindowscluster14061F74",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "ECSWindowscluster14061F74",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DiscoverPollEndpoint",
        "ecr:GetAuthorizationToken",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ECSWindowsLaunchTemplateRoleDefaultPolicy48457459",
    "Roles": [
     {
      "Ref": "ECSWindowsLaunchTemplateRole610E9A88"
     }
    ]
   }
  },
  "ECSWindowsLaunchTemplateProfile4B6AA05B": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "ECSWindowsLaunchTemplateRole610E9A88"
     }
    ]
   }
  },
  "ECSWindowsLaunchTemplateA6BF5C73": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Arn": {
       "Fn::GetAtt": [
        "ECSWindowsLaunchTemplateProfile4B6AA05B",
        "Arn"
       ]
      }
     },
     "ImageId": "resolve:ssm:/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-ECS_Optimized/image_id",
     "InstanceType": "m5.large",
     "MetadataOptions": {
      "HttpTokens": "required"
     },
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "ECSWindowssecuritygroupB4EE54DA",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/ECS Windows/Launch Template"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "github-runners-test/ECS Windows/Launch Template"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": {
       "Fn::Join": [
        "",
        [
         "<powershell>(Get-ECRLoginCommand).Password | docker login --username AWS --password-stdin ",
         {
          "Ref": "AWS::AccountId"
         },
         ".dkr.ecr.",
         {
          "Ref": "AWS::Region"
         },
         ".amazonaws.com\nStart-Job -ScriptBlock { docker pull ",
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "WindowsImageBuilderRepositoryA4CBB6D8",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "WindowsImageBuilderRepositoryA4CBB6D8",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
         },
         ":latest }\nRemove-Item -Recurse C:\\ProgramData\\Amazon\\ECS\\Cache\nImport-Module ECSTools\n[Environment]::SetEnvironmentVariable(\"ECS_CLUSTER\", \"",
         {
          "Ref": "ECSWindowscluster14061F74"
         },
         "\", \"Machine\")\n[Environment]::SetEnvironmentVariable(\"ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE\", \"true\", \"Machine\")\n[Environment]::SetEnvironmentVariable(\"ECS_AVAILABLE_LOGGING_DRIVERS\", '[\"json-file\",\"awslogs\"]', \"Machine\")\n[Environment]::SetEnvironmentVariable(\"ECS_ENABLE_TASK_IAM_ROLE\", \"true\", \"Machine\")\nInitialize-ECSAgent -Cluster '",
         {
          "Ref": "ECSWindowscluster14061F74"
         },
         "' -EnableTaskIAMRole</powershell>"
        ]
       ]
      }
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "github-runners-test/ECS Windows/Launch Template"
       }
      ]
     }
    ]
   }
  },
  "ECSWindowsAutoScalingGroupASG864E3AAF": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "MaxSize": "1",
    "MinSize": "0",
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "ECSWindowsLaunchTemplateA6BF5C73"
     },
     "Version": {
      "Fn::GetAtt": [
       "ECSWindowsLaunchTemplateA6BF5C73",
       "LatestVersionNumber"
      ]
     }
    },
    "NewInstancesProtectedFromScaleIn": true,
    "VPCZoneIdentifier": [
     {
      "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
     },
     {
      "Ref": "VpcPublicSubnet2Subnet691E08A3"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   }
  },
  "ECSWindowsCapacityProvider8F8896A5": {
   "Type": "AWS::ECS::CapacityProvider",
   "Properties": {
    "AutoScalingGroupProvider": {
     "AutoScalingGroupArn": {
      "Ref": "ECSWindowsAutoScalingGroupASG864E3AAF"
     },
     "ManagedScaling": {
      "Status": "ENABLED",
      "TargetCapacity": 100
     },
     "ManagedTerminationProtection": "ENABLED"
    }
   }
  },
  "ECSWindowslogs83D9D352": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "ECSWindowslogslogsfilterA25F0C55": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "ECSWindowslogs83D9D352"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "ECSWindowstaskTaskRole17C8DA48": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "ECSWindowstask73A31B6C": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "powershell",
       "-Command",
       "cd \\actions ;\n        if ($Env:RUNNER_VERSION -eq \"latest\") { $RunnerFlags = \"\" } else { $RunnerFlags = \"--disableupdate\" } ; \n        ./config.cmd --unattended --url \"https://${Env:GITHUB_DOMAIN}/${Env:OWNER}/${Env:REPO}\" --token \"${Env:RUNNER_TOKEN}\" --ephemeral --work _work --labels \"${Env:RUNNER_LABEL}\" $RunnerFlags --name \"${Env:RUNNER_NAME}\" ; \n        ./run.cmd ; \n        $STATUS = Select-String -Path './_diag/*.log' -Pattern 'finish job request for job [0-9a-f\\-]+ with result: (.*)' | %{$_.Matches.Groups[1].Value} | Select-Object -Last 1 ; \n        if ($STATUS) { echo \"CDKGHA JOB DONE ${Env:RUNNER_LABEL} $STATUS\" }"
      ],
      "Cpu": 1024,
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "WindowsImageBuilderRepositoryA4CBB6D8",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "WindowsImageBuilderRepositoryA4CBB6D8",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "ECSWindowslogs83D9D352"
        },
        "awslogs-stream-prefix": "runner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Memory": 3500,
      "Name": "runner",
      "Privileged": false
     }
    ],
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ECSWindowstaskExecutionRoleF164B5BF",
      "Arn"
     ]
    },
    "Family": "githubrunnerstestECSWindowstask6B1D5861",
    "NetworkMode": "bridge",
    "RequiresCompatibilities": [
     "EC2"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSWindowstaskTaskRole17C8DA48",
      "Arn"
     ]
    }
   }
  },
  "ECSWindowstaskExecutionRoleF164B5BF": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "ECSWindowstaskExecutionRoleDefaultPolicyA46C9687": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "WindowsImageBuilderRepositoryA4CBB6D8",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ECSWindowslogs83D9D352",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ECSWindowstaskExecutionRoleDefaultPolicyA46C9687",
    "Roles": [
     {
      "Ref": "ECSWindowstaskExecutionRoleF164B5BF"
     }
    ]
   }
  },
  "LambdaImageDigestReaderE0842577": {
   "Type": "Custom::EcrImageDigest",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"ECR\",\"action\":\"describeImages\",\"parameters\":{\"repositoryName\":\"",
       {
        "Ref": "LambdaImageBuilderx64Repository57F632F1"
       },
       "\",\"imageIds\":[{\"imageTag\":\"latest\"}]},\"physicalResourceId\":{\"id\":\"ImageDigest\"}}"
      ]
     ]
    },
    "Update": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"ECR\",\"action\":\"describeImages\",\"parameters\":{\"repositoryName\":\"",
       {
        "Ref": "LambdaImageBuilderx64Repository57F632F1"
       },
       "\",\"imageIds\":[{\"imageTag\":\"latest\"}]},\"physicalResourceId\":{\"id\":\"ImageDigest\"}}"
      ]
     ]
    },
    "Delete": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"fake\",\"action\":\"fake\",\"parameters\":{\"version\":1,\"labels\":[\"lambda\",\"x64\"],\"architecture\":\"x86_64\",\"dependable\":\"",
       {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Builder42F384AF",
         "Random"
        ]
       },
       "\"}}"
      ]
     ]
    },
    "InstallLatestAwsSdk": false
   },
   "DependsOn": [
    "LambdaImageDigestReaderCustomResourcePolicyE8E146E6"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "LambdaImageDigestReaderCustomResourcePolicyE8E146E6": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Repository57F632F1",
         "Arn"
        ]
       }
      },
      {
       "Action": "fake:Fake",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Repository57F632F1",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaImageDigestReaderCustomResourcePolicyE8E146E6",
    "Roles": [
     {
      "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
     }
    ]
   }
  },
  "LambdaFunctionServiceRoleB1826A50": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "LambdaFunction9233991D": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ImageUri": {
      "Fn::Join": [
       "",
       [
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageBuilderx64Repository57F632F1",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageBuilderx64Repository57F632F1",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "LambdaImageBuilderx64Repository57F632F1"
        },
        "@sha256:",
        {
         "Fn::Select": [
          1,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageDigestReaderE0842577",
              "imageDetails.0.imageDigest"
             ]
            }
           ]
          }
         ]
        }
       ]
      ]
     }
    },
    "Role": {
     "Fn::GetAtt": [
      "LambdaFunctionServiceRoleB1826A50",
      "Arn"
     ]
    },
    "Architectures": [
     "x86_64"
    ],
    "Description": "GitHub Actions runner for labels lambda,x64",
    "EphemeralStorage": {
     "Size": 10240
    },
    "MemorySize": 2048,
    "PackageType": "Image",
    "Timeout": 900
   },
   "DependsOn": [
    "LambdaFunctionServiceRoleB1826A50"
   ]
  },
  "LambdaFunctionLogRetentionB6D78D6D": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "LambdaFunction9233991D"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "LambdaFunctionLogGroupLogGroupfilter60E487A5": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Fn::GetAtt": [
      "LambdaFunctionLogRetentionB6D78D6D",
      "LogGroupName"
     ]
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "e845402ce43b66fc6f20df4a239f20f8662eb6c7f920b94cf6542dd0e64ce0f7.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      "Arn"
     ]
    },
    "Handler": "index.handler",
    "Runtime": "nodejs14.x",
    "Timeout": 120
   },
   "DependsOn": [
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
   ]
  },
  "AWS679f53fac002430cb0da5b7982bd2287LogRetentionCE72797A": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "AWS679f53fac002430cb0da5b7982bd22872D164C4C"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "updatelambdadcc036c8876b451ea2c1552f9e06e9e1ServiceRoleE163ADCA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "updatelambdadcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy1EF644A6": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:UpdateFunctionCode",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaFunction9233991D",
         "Arn"
        ]
       }
      },
      {
       "Action": "lambda:UpdateFunctionCode",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaARMFunctionDD4B5FF7",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "updatelambdadcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy1EF644A6",
    "Roles": [
     {
      "Ref": "updatelambdadcc036c8876b451ea2c1552f9e06e9e1ServiceRoleE163ADCA"
     }
    ]
   }
  },
  "updatelambdadcc036c8876b451ea2c1552f9e06e9e180810ABA": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "76f1588e07dd22a1d1f6c19fd56c39b7c3b3311c906f11049f85dcc3665d2145.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "updatelambdadcc036c8876b451ea2c1552f9e06e9e1ServiceRoleE163ADCA",
      "Arn"
     ]
    },
    "Description": "Function that updates a GitHub Actions runner function with the latest image digest after the image has been rebuilt",
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 900
   },
   "DependsOn": [
    "updatelambdadcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy1EF644A6",
    "updatelambdadcc036c8876b451ea2c1552f9e06e9e1ServiceRoleE163ADCA"
   ]
  },
  "updatelambdadcc036c8876b451ea2c1552f9e06e9e1LogRetentionEF9C436F": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "updatelambdadcc036c8876b451ea2c1552f9e06e9e180810ABA"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "LambdaARMImageDigestReaderF3DD55C4": {
   "Type": "Custom::EcrImageDigest",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
      "Arn"
     ]
    },
    "Create": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"ECR\",\"action\":\"describeImages\",\"parameters\":{\"repositoryName\":\"",
       {
        "Ref": "LambdaImageBuilderzRepository7C7AD146"
       },
       "\",\"imageIds\":[{\"imageTag\":\"latest\"}]},\"physicalResourceId\":{\"id\":\"ImageDigest\"}}"
      ]
     ]
    },
    "Update": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"ECR\",\"action\":\"describeImages\",\"parameters\":{\"repositoryName\":\"",
       {
        "Ref": "LambdaImageBuilderzRepository7C7AD146"
       },
       "\",\"imageIds\":[{\"imageTag\":\"latest\"}]},\"physicalResourceId\":{\"id\":\"ImageDigest\"}}"
      ]
     ]
    },
    "Delete": {
     "Fn::Join": [
      "",
      [
       "{\"service\":\"fake\",\"action\":\"fake\",\"parameters\":{\"version\":1,\"labels\":[\"lambda\",\"arm64\"],\"architecture\":\"arm64\",\"dependable\":\"",
       {
        "Fn::GetAtt": [
         "LambdaImageBuilderzBuilder235DD147",
         "Random"
        ]
       },
       "\"}}"
      ]
     ]
    },
    "InstallLatestAwsSdk": false
   },
   "DependsOn": [
    "LambdaARMImageDigestReaderCustomResourcePolicy2980B36A"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "LambdaARMImageDigestReaderCustomResourcePolicy2980B36A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzRepository7C7AD146",
         "Arn"
        ]
       }
      },
      {
       "Action": "fake:Fake",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzRepository7C7AD146",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaARMImageDigestReaderCustomResourcePolicy2980B36A",
    "Roles": [
     {
      "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
     }
    ]
   }
  },
  "LambdaARMFunctionServiceRole136069A0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "LambdaARMFunctionDD4B5FF7": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ImageUri": {
      "Fn::Join": [
       "",
       [
        {
         "Fn::Select": [
          4,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageBuilderzRepository7C7AD146",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".dkr.ecr.",
        {
         "Fn::Select": [
          3,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaImageBuilderzRepository7C7AD146",
              "Arn"
             ]
            }
           ]
          }
         ]
        },
        ".",
        {
         "Ref": "AWS::URLSuffix"
        },
        "/",
        {
         "Ref": "LambdaImageBuilderzRepository7C7AD146"
        },
        "@sha256:",
        {
         "Fn::Select": [
          1,
          {
           "Fn::Split": [
            ":",
            {
             "Fn::GetAtt": [
              "LambdaARMImageDigestReaderF3DD55C4",
              "imageDetails.0.imageDigest"
             ]
            }
           ]
          }
         ]
        }
       ]
      ]
     }
    },
    "Role": {
     "Fn::GetAtt": [
      "LambdaARMFunctionServiceRole136069A0",
      "Arn"
     ]
    },
    "Architectures": [
     "arm64"
    ],
    "Description": "GitHub Actions runner for labels lambda,arm64",
    "EphemeralStorage": {
     "Size": 10240
    },
    "MemorySize": 2048,
    "PackageType": "Image",
    "Timeout": 900
   },
   "DependsOn": [
    "LambdaARMFunctionServiceRole136069A0"
   ]
  },
  "LambdaARMFunctionLogRetention67E9FEF8": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "LambdaARMFunctionDD4B5FF7"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "LambdaARMFunctionLogGroupLogGroupfilterD29D06B1": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Fn::GetAtt": [
      "LambdaARMFunctionLogRetention67E9FEF8",
      "LogGroupName"
     ]
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "FargatesecuritygroupAFCAFD34": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/Fargate/security group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "FargatelogsCB753638": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "Fargatelogslogsfilter89D6A772": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "FargatelogsCB753638"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "FargatetaskTaskRoleEFFCDAF8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FargatetaskFDFF3302": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "sh",
       "-c",
       "\n        cd /home/runner &&\n        if [ \"$RUNNER_VERSION\" = \"latest\" ]; then RUNNER_FLAGS=\"\"; else RUNNER_FLAGS=\"--disableupdate\"; fi &&\n        ./config.sh --unattended --url \"https://$GITHUB_DOMAIN/$OWNER/$REPO\" --token \"$RUNNER_TOKEN\" --ephemeral --work _work --labels \"$RUNNER_LABEL\" $RUNNER_FLAGS --name \"$RUNNER_NAME\" && \n        ./run.sh &&\n        STATUS=$(grep -Phors \"finish job request for job [0-9a-f\\-]+ with result: \\K.*\" _diag/ | tail -n1) &&\n        [ -n \"$STATUS\" ] && echo CDKGHA JOB DONE \"$RUNNER_LABEL\" \"$STATUS\""
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "FargatebuilderRepository8F7BA13C",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "FargatebuilderRepository8F7BA13C",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "FargatebuilderRepository8F7BA13C"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "FargatelogsCB753638"
        },
        "awslogs-stream-prefix": "runner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "runner",
      "User": "runner"
     }
    ],
    "Cpu": "256",
    "EphemeralStorage": {
     "SizeInGiB": 25
    },
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "FargatetaskExecutionRole88A42307",
      "Arn"
     ]
    },
    "Family": "githubrunnerstestFargatetaskA755E0CE",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "FargatetaskTaskRoleEFFCDAF8",
      "Arn"
     ]
    }
   }
  },
  "FargatetaskExecutionRole88A42307": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FargatetaskExecutionRoleDefaultPolicy72A5073A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderRepository8F7BA13C",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatelogsCB753638",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargatetaskExecutionRoleDefaultPolicy72A5073A",
    "Roles": [
     {
      "Ref": "FargatetaskExecutionRole88A42307"
     }
    ]
   }
  },
  "Fargatex64spotsecuritygroup2A9F4299": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/Fargate-x64-spot/security group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "Fargatex64spotlogs0BCF618B": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "Fargatex64spotlogslogsfilter6590358B": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "Fargatex64spotlogs0BCF618B"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "Fargatex64spottaskTaskRole02893C25": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "Fargatex64spottask4C8B023D": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "sh",
       "-c",
       "\n        cd /home/runner &&\n        if [ \"$RUNNER_VERSION\" = \"latest\" ]; then RUNNER_FLAGS=\"\"; else RUNNER_FLAGS=\"--disableupdate\"; fi &&\n        ./config.sh --unattended --url \"https://$GITHUB_DOMAIN/$OWNER/$REPO\" --token \"$RUNNER_TOKEN\" --ephemeral --work _work --labels \"$RUNNER_LABEL\" $RUNNER_FLAGS --name \"$RUNNER_NAME\" && \n        ./run.sh &&\n        STATUS=$(grep -Phors \"finish job request for job [0-9a-f\\-]+ with result: \\K.*\" _diag/ | tail -n1) &&\n        [ -n \"$STATUS\" ] && echo CDKGHA JOB DONE \"$RUNNER_LABEL\" \"$STATUS\""
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "FargatebuilderRepository8F7BA13C",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "FargatebuilderRepository8F7BA13C",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "FargatebuilderRepository8F7BA13C"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "Fargatex64spotlogs0BCF618B"
        },
        "awslogs-stream-prefix": "runner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "runner",
      "User": "runner"
     }
    ],
    "Cpu": "256",
    "EphemeralStorage": {
     "SizeInGiB": 25
    },
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "Fargatex64spottaskExecutionRoleD0E0B7D6",
      "Arn"
     ]
    },
    "Family": "githubrunnerstestFargatex64spottask7B2E300E",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "Fargatex64spottaskTaskRole02893C25",
      "Arn"
     ]
    }
   }
  },
  "Fargatex64spottaskExecutionRoleD0E0B7D6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "Fargatex64spottaskExecutionRoleDefaultPolicyA51A696A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderRepository8F7BA13C",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Fargatex64spotlogs0BCF618B",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Fargatex64spottaskExecutionRoleDefaultPolicyA51A696A",
    "Roles": [
     {
      "Ref": "Fargatex64spottaskExecutionRoleD0E0B7D6"
     }
    ]
   }
  },
  "Fargatearm64securitygroup08ABAD9E": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/Fargate-arm64/security group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "Fargatearm64logs00171A52": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "Fargatearm64logslogsfilter4A2869DC": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "Fargatearm64logs00171A52"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "Fargatearm64taskTaskRoleD3C2CD58": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "Fargatearm64taskECD67399": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "sh",
       "-c",
       "\n        cd /home/runner &&\n        if [ \"$RUNNER_VERSION\" = \"latest\" ]; then RUNNER_FLAGS=\"\"; else RUNNER_FLAGS=\"--disableupdate\"; fi &&\n        ./config.sh --unattended --url \"https://$GITHUB_DOMAIN/$OWNER/$REPO\" --token \"$RUNNER_TOKEN\" --ephemeral --work _work --labels \"$RUNNER_LABEL\" $RUNNER_FLAGS --name \"$RUNNER_NAME\" && \n        ./run.sh &&\n        STATUS=$(grep -Phors \"finish job request for job [0-9a-f\\-]+ with result: \\K.*\" _diag/ | tail -n1) &&\n        [ -n \"$STATUS\" ] && echo CDKGHA JOB DONE \"$RUNNER_LABEL\" \"$STATUS\""
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "FargatebuilderarmRepository77DCC132",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "FargatebuilderarmRepository77DCC132",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "FargatebuilderarmRepository77DCC132"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "Fargatearm64logs00171A52"
        },
        "awslogs-stream-prefix": "runner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "runner",
      "User": "runner"
     }
    ],
    "Cpu": "256",
    "EphemeralStorage": {
     "SizeInGiB": 25
    },
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "Fargatearm64taskExecutionRoleD10B61DC",
      "Arn"
     ]
    },
    "Family": "githubrunnerstestFargatearm64task6B95C05B",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "ARM64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "Fargatearm64taskTaskRoleD3C2CD58",
      "Arn"
     ]
    }
   }
  },
  "Fargatearm64taskExecutionRoleD10B61DC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "Fargatearm64taskExecutionRoleDefaultPolicy0E3D42DB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmRepository77DCC132",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Fargatearm64logs00171A52",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Fargatearm64taskExecutionRoleDefaultPolicy0E3D42DB",
    "Roles": [
     {
      "Ref": "Fargatearm64taskExecutionRoleD10B61DC"
     }
    ]
   }
  },
  "Fargatearm64spotsecuritygroup20C885E4": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/Fargate-arm64-spot/security group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "Fargatearm64spotlogsEFCCEC59": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "Fargatearm64spotlogslogsfilter7E2CFF7B": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "Fargatearm64spotlogsEFCCEC59"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "Fargatearm64spottaskTaskRole0F078C81": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "Fargatearm64spottaskD21E60F2": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "sh",
       "-c",
       "\n        cd /home/runner &&\n        if [ \"$RUNNER_VERSION\" = \"latest\" ]; then RUNNER_FLAGS=\"\"; else RUNNER_FLAGS=\"--disableupdate\"; fi &&\n        ./config.sh --unattended --url \"https://$GITHUB_DOMAIN/$OWNER/$REPO\" --token \"$RUNNER_TOKEN\" --ephemeral --work _work --labels \"$RUNNER_LABEL\" $RUNNER_FLAGS --name \"$RUNNER_NAME\" && \n        ./run.sh &&\n        STATUS=$(grep -Phors \"finish job request for job [0-9a-f\\-]+ with result: \\K.*\" _diag/ | tail -n1) &&\n        [ -n \"$STATUS\" ] && echo CDKGHA JOB DONE \"$RUNNER_LABEL\" \"$STATUS\""
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "FargatebuilderarmRepository77DCC132",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "FargatebuilderarmRepository77DCC132",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "FargatebuilderarmRepository77DCC132"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "Fargatearm64spotlogsEFCCEC59"
        },
        "awslogs-stream-prefix": "runner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "runner",
      "User": "runner"
     }
    ],
    "Cpu": "256",
    "EphemeralStorage": {
     "SizeInGiB": 25
    },
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "Fargatearm64spottaskExecutionRole90E5A05B",
      "Arn"
     ]
    },
    "Family": "githubrunnerstestFargatearm64spottaskF9ADF192",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "ARM64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "Fargatearm64spottaskTaskRole0F078C81",
      "Arn"
     ]
    }
   }
  },
  "Fargatearm64spottaskExecutionRole90E5A05B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "Fargatearm64spottaskExecutionRoleDefaultPolicyB9BB282A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmRepository77DCC132",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Fargatearm64spotlogsEFCCEC59",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "Fargatearm64spottaskExecutionRoleDefaultPolicyB9BB282A",
    "Roles": [
     {
      "Ref": "Fargatearm64spottaskExecutionRole90E5A05B"
     }
    ]
   }
  },
  "FargateWindowssecuritygroupE684A7B0": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/Fargate-Windows/security group",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "FargateWindowslogs52881DBF": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "FargateWindowslogslogsfilterB5B72E7C": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "FargateWindowslogs52881DBF"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "FargateWindowstaskTaskRole364508C8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FargateWindowstask9F9B942D": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Command": [
       "powershell",
       "-Command",
       "cd \\actions ;\n        if ($Env:RUNNER_VERSION -eq \"latest\") { $RunnerFlags = \"\" } else { $RunnerFlags = \"--disableupdate\" } ; \n        ./config.cmd --unattended --url \"https://${Env:GITHUB_DOMAIN}/${Env:OWNER}/${Env:REPO}\" --token \"${Env:RUNNER_TOKEN}\" --ephemeral --work _work --labels \"${Env:RUNNER_LABEL}\" $RunnerFlags --name \"${Env:RUNNER_NAME}\" ; \n        ./run.cmd ; \n        $STATUS = Select-String -Path './_diag/*.log' -Pattern 'finish job request for job [0-9a-f\\-]+ with result: (.*)' | %{$_.Matches.Groups[1].Value} | Select-Object -Last 1 ; \n        if ($STATUS) { echo \"CDKGHA JOB DONE ${Env:RUNNER_LABEL} $STATUS\" }"
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "WindowsImageBuilderRepositoryA4CBB6D8",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "WindowsImageBuilderRepositoryA4CBB6D8",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "FargateWindowslogs52881DBF"
        },
        "awslogs-stream-prefix": "runner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "runner"
     }
    ],
    "Cpu": "1024",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "FargateWindowstaskExecutionRoleEE562927",
      "Arn"
     ]
    },
    "Family": "githubrunnerstestFargateWindowstask95BB2245",
    "Memory": "2048",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "WINDOWS_SERVER_2019_CORE"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "FargateWindowstaskTaskRole364508C8",
      "Arn"
     ]
    }
   }
  },
  "FargateWindowstaskExecutionRoleEE562927": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "FargateWindowstaskExecutionRoleDefaultPolicy2EF7D3FD": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "WindowsImageBuilderRepositoryA4CBB6D8",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargateWindowslogs52881DBF",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "FargateWindowstaskExecutionRoleDefaultPolicy2EF7D3FD",
    "Roles": [
     {
      "Ref": "FargateWindowstaskExecutionRoleEE562927"
     }
    ]
   }
  },
  "EC2LinuxSGF5B89300": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/EC2 Linux/SG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "EC2LinuxRole8B6519A2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     }
    ]
   }
  },
  "EC2LinuxRoleDefaultPolicy1369791B": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "states:SendTaskFailure",
        "states:SendTaskSuccess",
        "states:SendTaskHeartbeat"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EC2LinuxLogsC4CD8F14",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EC2LinuxRoleDefaultPolicy1369791B",
    "Roles": [
     {
      "Ref": "EC2LinuxRole8B6519A2"
     }
    ]
   }
  },
  "EC2LinuxLogsC4CD8F14": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EC2LinuxLogsLogsfilter186C2AB7": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "EC2LinuxLogsC4CD8F14"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "EC2LinuxInstanceProfile2D2BB473": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "EC2LinuxRole8B6519A2"
     }
    ]
   }
  },
  "deleteamidcc036c8876b451ea2c1552f9e06e9e1ServiceRole1CC58A6F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "deleteamidcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy0C44BF83": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ec2:DescribeLaunchTemplateVersions",
        "ec2:DescribeImages",
        "ec2:DeregisterImage",
        "ec2:DeleteSnapshot"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "deleteamidcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy0C44BF83",
    "Roles": [
     {
      "Ref": "deleteamidcc036c8876b451ea2c1552f9e06e9e1ServiceRole1CC58A6F"
     }
    ]
   }
  },
  "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7d32271cfa03376e008c0efb1cc349e2eee88e82be8a5ddbb6309cf3a847fe06.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "deleteamidcc036c8876b451ea2c1552f9e06e9e1ServiceRole1CC58A6F",
      "Arn"
     ]
    },
    "Description": "Delete old GitHub Runner AMIs",
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 300
   },
   "DependsOn": [
    "deleteamidcc036c8876b451ea2c1552f9e06e9e1ServiceRoleDefaultPolicy0C44BF83",
    "deleteamidcc036c8876b451ea2c1552f9e06e9e1ServiceRole1CC58A6F"
   ]
  },
  "deleteamidcc036c8876b451ea2c1552f9e06e9e1LogRetention85F808EB": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "deleteamidcc036c8876b451ea2c1552f9e06e9e1BE713303"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "EC2SpotLinuxSG8D846B64": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/EC2 Spot Linux/SG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "EC2SpotLinuxRole86333E5D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     }
    ]
   }
  },
  "EC2SpotLinuxRoleDefaultPolicy061AD1D0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "states:SendTaskFailure",
        "states:SendTaskSuccess",
        "states:SendTaskHeartbeat"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EC2SpotLinuxLogsF78D5F0E",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EC2SpotLinuxRoleDefaultPolicy061AD1D0",
    "Roles": [
     {
      "Ref": "EC2SpotLinuxRole86333E5D"
     }
    ]
   }
  },
  "EC2SpotLinuxLogsF78D5F0E": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EC2SpotLinuxLogsLogsfilter89CE719F": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "EC2SpotLinuxLogsF78D5F0E"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "EC2SpotLinuxInstanceProfileB12320D4": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "EC2SpotLinuxRole86333E5D"
     }
    ]
   }
  },
  "EC2Linuxarm64SG550ECD6C": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/EC2 Linux arm64/SG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "EC2Linuxarm64Role242F68FF": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     }
    ]
   }
  },
  "EC2Linuxarm64RoleDefaultPolicyDE9193C3": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "states:SendTaskFailure",
        "states:SendTaskSuccess",
        "states:SendTaskHeartbeat"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EC2Linuxarm64Logs577E371E",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EC2Linuxarm64RoleDefaultPolicyDE9193C3",
    "Roles": [
     {
      "Ref": "EC2Linuxarm64Role242F68FF"
     }
    ]
   }
  },
  "EC2Linuxarm64Logs577E371E": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EC2Linuxarm64LogsLogsfilter0A247938": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "EC2Linuxarm64Logs577E371E"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "EC2Linuxarm64InstanceProfile1E6F8D53": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "EC2Linuxarm64Role242F68FF"
     }
    ]
   }
  },
  "EC2WindowsSG13E24976": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "github-runners-test/EC2 Windows/SG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "EC2WindowsRoleC0D850D2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     }
    ]
   }
  },
  "EC2WindowsRoleDefaultPolicyB6A15409": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "states:SendTaskFailure",
        "states:SendTaskSuccess",
        "states:SendTaskHeartbeat"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EC2WindowsLogsDC1F2ABF",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EC2WindowsRoleDefaultPolicyB6A15409",
    "Roles": [
     {
      "Ref": "EC2WindowsRoleC0D850D2"
     }
    ]
   }
  },
  "EC2WindowsLogsDC1F2ABF": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "EC2WindowsLogsLogsfilter253E4D4D": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[..., marker = \"CDKGHA\", job = \"JOB\", done = \"DONE\", labels, status = \"Succeeded\" || status = \"SucceededWithIssues\" || status = \"Failed\" || status = \"Canceled\" || status = \"Skipped\" || status = \"Abandoned\"]",
    "LogGroupName": {
     "Ref": "EC2WindowsLogsDC1F2ABF"
    },
    "MetricTransformations": [
     {
      "Dimensions": [
       {
        "Key": "ProviderLabels",
        "Value": "$labels"
       },
       {
        "Key": "Status",
        "Value": "$status"
       }
      ],
      "MetricName": "JobCompleted",
      "MetricNamespace": "GitHubRunners",
      "MetricValue": "1",
      "Unit": "Count"
     }
    ]
   }
  },
  "EC2WindowsInstanceProfileDCA59D9C": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "EC2WindowsRoleC0D850D2"
     }
    ]
   }
  },
  "runnersSecretsWebhook7AF0D74E": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "GenerateSecretString": {
     "ExcludePunctuation": true,
     "GenerateStringKey": "webhookSecret",
     "IncludeSpace": false,
     "SecretStringTemplate": "{}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "runnersSecretsGitHubEFD96479": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "GenerateSecretString": {
     "ExcludePunctuation": true,
     "GenerateStringKey": "dummy",
     "IncludeSpace": false,
     "SecretStringTemplate": "{\"domain\":\"github.com\",\"appId\":\"\",\"personalAuthToken\":\"\"}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "runnersSecretsGitHubPrivateKey79498F91": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "SecretString": "-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "runnersSecretsSetup692A93B1": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "GenerateSecretString": {
     "ExcludePunctuation": true,
     "GenerateStringKey": "token",
     "IncludeSpace": false,
     "SecretStringTemplate": "{\"token\":\"\"}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "runnerstokenretrieverServiceRole6099F71C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "runnerstokenretrieverServiceRoleDefaultPolicy24965D29": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubEFD96479"
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubPrivateKey79498F91"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "runnerstokenretrieverServiceRoleDefaultPolicy24965D29",
    "Roles": [
     {
      "Ref": "runnerstokenretrieverServiceRole6099F71C"
     }
    ]
   }
  },
  "runnerstokenretrieverD5E8392A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "1280fde3e768db45d862b24cad8f671f092b1cb91e51f49920e756fa58dff170.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "runnerstokenretrieverServiceRole6099F71C",
      "Arn"
     ]
    },
    "Description": "Get token from GitHub Actions used to start new self-hosted runner",
    "Environment": {
     "Variables": {
      "GITHUB_SECRET_ARN": {
       "Ref": "runnersSecretsGitHubEFD96479"
      },
      "GITHUB_PRIVATE_KEY_SECRET_ARN": {
       "Ref": "runnersSecretsGitHubPrivateKey79498F91"
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 30
   },
   "DependsOn": [
    "runnerstokenretrieverServiceRoleDefaultPolicy24965D29",
    "runnerstokenretrieverServiceRole6099F71C"
   ]
  },
  "runnerstokenretrieverLogRetention05A536AD": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "runnerstokenretrieverD5E8392A"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "runnersdeleterunnerServiceRole35856967": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "runnersdeleterunnerServiceRoleDefaultPolicyECFB6BF7": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubEFD96479"
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubPrivateKey79498F91"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "runnersdeleterunnerServiceRoleDefaultPolicyECFB6BF7",
    "Roles": [
     {
      "Ref": "runnersdeleterunnerServiceRole35856967"
     }
    ]
   }
  },
  "runnersdeleterunner7F8D5293": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "a1c6366bd373211cfaadb81d4b67bf7de05a0acaf062e6bcdcbfb9fd1d5c1522.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "runnersdeleterunnerServiceRole35856967",
      "Arn"
     ]
    },
    "Description": "Delete GitHub Actions runner on error",
    "Environment": {
     "Variables": {
      "GITHUB_SECRET_ARN": {
       "Ref": "runnersSecretsGitHubEFD96479"
      },
      "GITHUB_PRIVATE_KEY_SECRET_ARN": {
       "Ref": "runnersSecretsGitHubPrivateKey79498F91"
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 30
   },
   "DependsOn": [
    "runnersdeleterunnerServiceRoleDefaultPolicyECFB6BF7",
    "runnersdeleterunnerServiceRole35856967"
   ]
  },
  "runnersdeleterunnerLogRetention76F47082": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "runnersdeleterunner7F8D5293"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "runnersRunnerOrchestratorRole5D220AD7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::FindInMap": [
          "ServiceprincipalMap",
          {
           "Ref": "AWS::Region"
          },
          "states"
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "runnersRunnerOrchestratorRoleDefaultPolicyD1C26D61": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "runnerstokenretrieverD5E8392A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "runnerstokenretrieverD5E8392A",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "runnersdeleterunner7F8D5293",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "runnersdeleterunner7F8D5293",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "codebuild:StartBuild",
        "codebuild:StopBuild",
        "codebuild:BatchGetBuilds",
        "codebuild:BatchGetReports"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildx64CodeBuild7DC01A1E",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "events:PutTargets",
        "events:PutRule",
        "events:DescribeRule"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":events:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":rule/StepFunctionsGetEventForCodeBuildStartBuildRule"
         ]
        ]
       }
      },
      {
       "Action": [
        "codebuild:StartBuild",
        "codebuild:StopBuild",
        "codebuild:BatchGetBuilds",
        "codebuild:BatchGetReports"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildARMCodeBuildC5F301F2",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "codebuild:StartBuild",
        "codebuild:StopBuild",
        "codebuild:BatchGetBuilds",
        "codebuild:BatchGetReports"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildWindowsCodeBuildC39F35C1",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECStask8F0DD550"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            2,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECStask8F0DD550"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECStask8F0DD550"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECStask8F0DD550"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "ECStask8F0DD550"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "/",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "ECStask8F0DD550"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "ecs:StopTask",
        "ecs:DescribeTasks"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ECStaskTaskRoleFE831ECD",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "ECStaskExecutionRole1A6D19A5",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": [
        "events:PutTargets",
        "events:PutRule",
        "events:DescribeRule"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":events:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":rule/StepFunctionsGetEventsForECSTaskRule"
         ]
        ]
       }
      },
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECSARM64task27EB8443"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            2,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECSARM64task27EB8443"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECSARM64task27EB8443"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECSARM64task27EB8443"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "ECSARM64task27EB8443"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "/",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "ECSARM64task27EB8443"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ECSARM64taskTaskRole23B1CB4E",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "ECSARM64taskExecutionRoleBF2AE76F",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECSWindowstask73A31B6C"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            2,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECSWindowstask73A31B6C"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECSWindowstask73A31B6C"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "ECSWindowstask73A31B6C"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "ECSWindowstask73A31B6C"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "/",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "ECSWindowstask73A31B6C"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ECSWindowstaskTaskRole17C8DA48",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "ECSWindowstaskExecutionRoleF164B5BF",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "LambdaFunction9233991D",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "LambdaFunction9233991D",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "LambdaARMFunctionDD4B5FF7",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "LambdaARMFunctionDD4B5FF7",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "FargatetaskFDFF3302"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            2,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "FargatetaskFDFF3302"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "FargatetaskFDFF3302"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "FargatetaskFDFF3302"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "FargatetaskFDFF3302"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "/",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "FargatetaskFDFF3302"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "FargatetaskTaskRoleEFFCDAF8",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "FargatetaskExecutionRole88A42307",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatex64spottask4C8B023D"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            2,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatex64spottask4C8B023D"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatex64spottask4C8B023D"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatex64spottask4C8B023D"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "Fargatex64spottask4C8B023D"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "/",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "Fargatex64spottask4C8B023D"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Fargatex64spottaskTaskRole02893C25",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "Fargatex64spottaskExecutionRoleD0E0B7D6",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatearm64taskECD67399"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            2,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatearm64taskECD67399"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatearm64taskECD67399"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatearm64taskECD67399"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "Fargatearm64taskECD67399"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "/",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "Fargatearm64taskECD67399"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Fargatearm64taskTaskRoleD3C2CD58",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "Fargatearm64taskExecutionRoleD10B61DC",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatearm64spottaskD21E60F2"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            2,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatearm64spottaskD21E60F2"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatearm64spottaskD21E60F2"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "Fargatearm64spottaskD21E60F2"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "Fargatearm64spottaskD21E60F2"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "/",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "Fargatearm64spottaskD21E60F2"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Fargatearm64spottaskTaskRole0F078C81",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "Fargatearm64spottaskExecutionRole90E5A05B",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "ecs:RunTask",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "FargateWindowstask9F9B942D"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            2,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "FargateWindowstask9F9B942D"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "FargateWindowstask9F9B942D"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "FargateWindowstask9F9B942D"
              }
             ]
            }
           ]
          },
          ":",
          {
           "Fn::Select": [
            0,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "FargateWindowstask9F9B942D"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          },
          "/",
          {
           "Fn::Select": [
            1,
            {
             "Fn::Split": [
              "/",
              {
               "Fn::Select": [
                5,
                {
                 "Fn::Split": [
                  ":",
                  {
                   "Ref": "FargateWindowstask9F9B942D"
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "FargateWindowstaskTaskRole364508C8",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "FargateWindowstaskExecutionRoleEE562927",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "ec2:runInstances",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "iam:PassRole",
       "Condition": {
        "StringEquals": {
         "iam:PassedToService": "ec2.amazonaws.com"
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EC2LinuxRole8B6519A2",
         "Arn"
        ]
       }
      },
      {
       "Action": "ec2:createTags",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ec2:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":*"
         ]
        ]
       }
      },
      {
       "Action": "iam:CreateServiceLinkedRole",
       "Condition": {
        "StringEquals": {
         "iam:AWSServiceName": "spot.amazonaws.com"
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "iam:PassRole",
       "Condition": {
        "StringEquals": {
         "iam:PassedToService": "ec2.amazonaws.com"
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EC2SpotLinuxRole86333E5D",
         "Arn"
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Condition": {
        "StringEquals": {
         "iam:PassedToService": "ec2.amazonaws.com"
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EC2Linuxarm64Role242F68FF",
         "Arn"
        ]
       }
      },
      {
       "Action": "iam:PassRole",
       "Condition": {
        "StringEquals": {
         "iam:PassedToService": "ec2.amazonaws.com"
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EC2WindowsRoleC0D850D2",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "runnersRunnerOrchestratorRoleDefaultPolicyD1C26D61",
    "Roles": [
     {
      "Ref": "runnersRunnerOrchestratorRole5D220AD7"
     }
    ]
   }
  },
  "runnersRunnerOrchestratorF9B66EBA": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "RoleArn": {
     "Fn::GetAtt": [
      "runnersRunnerOrchestratorRole5D220AD7",
      "Arn"
     ]
    },
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "{\"StartAt\":\"Get Runner Token\",\"States\":{\"Get Runner Token\":{\"Next\":\"Error Catcher\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"ResultPath\":\"$.runner\",\"Resource\":\"",
       {
        "Fn::GetAtt": [
         "runnerstokenretrieverD5E8392A",
         "Arn"
        ]
       },
       "\"},\"Error Catcher\":{\"Type\":\"Parallel\",\"ResultPath\":\"$.result\",\"End\":true,\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Delete Runner\"}],\"Branches\":[{\"StartAt\":\"Choose provider\",\"States\":{\"Choose provider\":{\"Type\":\"Choice\",\"Choices\":[{\"And\":[{\"Variable\":\"$.labels.codebuild-x64\",\"IsPresent\":true}],\"Next\":\"codebuild-x64\"},{\"And\":[{\"Variable\":\"$.labels.codebuild\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.arm64\",\"IsPresent\":true}],\"Next\":\"codebuild, linux, arm64\"},{\"And\":[{\"Variable\":\"$.labels.codebuild\",\"IsPresent\":true},{\"Variable\":\"$.labels.windows\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"codebuild, windows, x64\"},{\"And\":[{\"Variable\":\"$.labels.ecs\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"ecs, linux, x64\"},{\"And\":[{\"Variable\":\"$.labels.ecs\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.arm64\",\"IsPresent\":true}],\"Next\":\"ecs, linux, arm64\"},{\"And\":[{\"Variable\":\"$.labels.ecs\",\"IsPresent\":true},{\"Variable\":\"$.labels.windows\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"ecs, windows, x64\"},{\"And\":[{\"Variable\":\"$.labels.lambda\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"lambda, x64\"},{\"And\":[{\"Variable\":\"$.labels.lambda\",\"IsPresent\":true},{\"Variable\":\"$.labels.arm64\",\"IsPresent\":true}],\"Next\":\"lambda, arm64\"},{\"And\":[{\"Variable\":\"$.labels.fargate\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"fargate, linux, x64\"},{\"And\":[{\"Variable\":\"$.labels.fargate-spot\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"fargate-spot, linux, x64\"},{\"And\":[{\"Variable\":\"$.labels.fargate\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.arm64\",\"IsPresent\":true}],\"Next\":\"fargate, linux, arm64\"},{\"And\":[{\"Variable\":\"$.labels.fargate-spot\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.arm64\",\"IsPresent\":true}],\"Next\":\"fargate-spot, linux, arm64\"},{\"And\":[{\"Variable\":\"$.labels.fargate\",\"IsPresent\":true},{\"Variable\":\"$.labels.windows\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"fargate, windows, x64\"},{\"And\":[{\"Variable\":\"$.labels.ec2\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"ec2, linux, x64 data\"},{\"And\":[{\"Variable\":\"$.labels.ec2-spot\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"ec2-spot, linux, x64 data\"},{\"And\":[{\"Variable\":\"$.labels.ec2\",\"IsPresent\":true},{\"Variable\":\"$.labels.linux\",\"IsPresent\":true},{\"Variable\":\"$.labels.arm64\",\"IsPresent\":true}],\"Next\":\"ec2, linux, arm64 data\"},{\"And\":[{\"Variable\":\"$.labels.ec2\",\"IsPresent\":true},{\"Variable\":\"$.labels.windows\",\"IsPresent\":true},{\"Variable\":\"$.labels.x64\",\"IsPresent\":true}],\"Next\":\"ec2, windows, x64 data\"}],\"Default\":\"Unknown label\"},\"Unknown label\":{\"Type\":\"Succeed\"},\"codebuild-x64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"CodeBuild.CodeBuildException\",\"CodeBuild.AccountLimitExceededException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::codebuild:startBuild.sync\",\"Parameters\":{\"ProjectName\":\"",
       {
        "Ref": "CodeBuildx64CodeBuild7DC01A1E"
       },
       "\",\"EnvironmentVariablesOverride\":[{\"Name\":\"RUNNER_TOKEN\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Type\":\"PLAINTEXT\",\"Value\":\"codebuild-x64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.repo\"}]}},\"codebuild, linux, arm64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"CodeBuild.CodeBuildException\",\"CodeBuild.AccountLimitExceededException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::codebuild:startBuild.sync\",\"Parameters\":{\"ProjectName\":\"",
       {
        "Ref": "CodeBuildARMCodeBuildC5F301F2"
       },
       "\",\"EnvironmentVariablesOverride\":[{\"Name\":\"RUNNER_TOKEN\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Type\":\"PLAINTEXT\",\"Value\":\"codebuild,linux,arm64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.repo\"}]}},\"codebuild, windows, x64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"CodeBuild.CodeBuildException\",\"CodeBuild.AccountLimitExceededException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::codebuild:startBuild.sync\",\"Parameters\":{\"ProjectName\":\"",
       {
        "Ref": "CodeBuildWindowsCodeBuildC39F35C1"
       },
       "\",\"EnvironmentVariablesOverride\":[{\"Name\":\"RUNNER_TOKEN\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Type\":\"PLAINTEXT\",\"Value\":\"codebuild,windows,x64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Type\":\"PLAINTEXT\",\"Value.$\":\"$.repo\"}]}},\"ecs, linux, x64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ecs.EcsException\",\"Ecs.LimitExceededException\",\"Ecs.UpdateInProgressException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "ECScluster20BC0B82",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"githubrunnerstestECStaskCE74CC84\",\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"runner\",\"Environment\":[{\"Name\":\"RUNNER_TOKEN\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Value\":\"ecs,linux,x64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Value.$\":\"$.repo\"}]}]},\"PropagateTags\":\"TASK_DEFINITION\",\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"",
       {
        "Ref": "ECSCapacityProviderABF1B146"
       },
       "\"}]}},\"ecs, linux, arm64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ecs.EcsException\",\"Ecs.LimitExceededException\",\"Ecs.UpdateInProgressException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "ECSARM64cluster4ECAA083",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"githubrunnerstestECSARM64taskE94E43A3\",\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"runner\",\"Environment\":[{\"Name\":\"RUNNER_TOKEN\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Value\":\"ecs,linux,arm64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Value.$\":\"$.repo\"}]}]},\"PropagateTags\":\"TASK_DEFINITION\",\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"",
       {
        "Ref": "ECSARM64CapacityProvider8627FEF9"
       },
       "\"}]}},\"ecs, windows, x64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ecs.EcsException\",\"Ecs.LimitExceededException\",\"Ecs.UpdateInProgressException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "ECSWindowscluster14061F74",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"githubrunnerstestECSWindowstask6B1D5861\",\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"runner\",\"Environment\":[{\"Name\":\"RUNNER_TOKEN\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Value\":\"ecs,windows,x64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Value.$\":\"$.repo\"}]}]},\"PropagateTags\":\"TASK_DEFINITION\",\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"",
       {
        "Ref": "ECSWindowsCapacityProvider8F8896A5"
       },
       "\"}]}},\"lambda, x64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2},{\"ErrorEquals\":[\"Lambda.LambdaException\",\"Lambda.Ec2ThrottledException\",\"Lambda.Ec2UnexpectedException\",\"Lambda.EniLimitReachedException\",\"Lambda.TooManyRequestsException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "LambdaFunction9233991D",
         "Arn"
        ]
       },
       "\",\"Payload\":{\"token.$\":\"$.runner.token\",\"runnerName.$\":\"$$.Execution.Name\",\"label\":\"lambda,x64\",\"githubDomain.$\":\"$.runner.domain\",\"owner.$\":\"$.owner\",\"repo.$\":\"$.repo\"}}},\"lambda, arm64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2},{\"ErrorEquals\":[\"Lambda.LambdaException\",\"Lambda.Ec2ThrottledException\",\"Lambda.Ec2UnexpectedException\",\"Lambda.EniLimitReachedException\",\"Lambda.TooManyRequestsException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "LambdaARMFunctionDD4B5FF7",
         "Arn"
        ]
       },
       "\",\"Payload\":{\"token.$\":\"$.runner.token\",\"runnerName.$\":\"$$.Execution.Name\",\"label\":\"lambda,arm64\",\"githubDomain.$\":\"$.runner.domain\",\"owner.$\":\"$.owner\",\"repo.$\":\"$.repo\"}}},\"fargate, linux, x64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ecs.EcsException\",\"Ecs.LimitExceededException\",\"Ecs.UpdateInProgressException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"githubrunnerstestFargatetaskA755E0CE\",\"NetworkConfiguration\":{\"AwsvpcConfiguration\":{\"AssignPublicIp\":\"ENABLED\",\"Subnets\":[\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\"],\"SecurityGroups\":[\"",
       {
        "Fn::GetAtt": [
         "FargatesecuritygroupAFCAFD34",
         "GroupId"
        ]
       },
       "\"]}},\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"runner\",\"Environment\":[{\"Name\":\"RUNNER_TOKEN\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Value\":\"fargate,linux,x64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Value.$\":\"$.repo\"}]}]},\"PropagateTags\":\"TASK_DEFINITION\",\"EnableExecuteCommand\":true,\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"FARGATE\"}]}},\"fargate-spot, linux, x64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ecs.EcsException\",\"Ecs.LimitExceededException\",\"Ecs.UpdateInProgressException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"githubrunnerstestFargatex64spottask7B2E300E\",\"NetworkConfiguration\":{\"AwsvpcConfiguration\":{\"AssignPublicIp\":\"ENABLED\",\"Subnets\":[\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\"],\"SecurityGroups\":[\"",
       {
        "Fn::GetAtt": [
         "Fargatex64spotsecuritygroup2A9F4299",
         "GroupId"
        ]
       },
       "\"]}},\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"runner\",\"Environment\":[{\"Name\":\"RUNNER_TOKEN\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Value\":\"fargate-spot,linux,x64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Value.$\":\"$.repo\"}]}]},\"PropagateTags\":\"TASK_DEFINITION\",\"EnableExecuteCommand\":true,\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"FARGATE_SPOT\"}]}},\"fargate, linux, arm64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ecs.EcsException\",\"Ecs.LimitExceededException\",\"Ecs.UpdateInProgressException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"githubrunnerstestFargatearm64task6B95C05B\",\"NetworkConfiguration\":{\"AwsvpcConfiguration\":{\"AssignPublicIp\":\"ENABLED\",\"Subnets\":[\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\"],\"SecurityGroups\":[\"",
       {
        "Fn::GetAtt": [
         "Fargatearm64securitygroup08ABAD9E",
         "GroupId"
        ]
       },
       "\"]}},\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"runner\",\"Environment\":[{\"Name\":\"RUNNER_TOKEN\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Value\":\"fargate,linux,arm64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Value.$\":\"$.repo\"}]}]},\"PropagateTags\":\"TASK_DEFINITION\",\"EnableExecuteCommand\":true,\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"FARGATE\"}]}},\"fargate-spot, linux, arm64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ecs.EcsException\",\"Ecs.LimitExceededException\",\"Ecs.UpdateInProgressException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"githubrunnerstestFargatearm64spottaskF9ADF192\",\"NetworkConfiguration\":{\"AwsvpcConfiguration\":{\"AssignPublicIp\":\"ENABLED\",\"Subnets\":[\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\"],\"SecurityGroups\":[\"",
       {
        "Fn::GetAtt": [
         "Fargatearm64spotsecuritygroup20C885E4",
         "GroupId"
        ]
       },
       "\"]}},\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"runner\",\"Environment\":[{\"Name\":\"RUNNER_TOKEN\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Value\":\"fargate-spot,linux,arm64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Value.$\":\"$.repo\"}]}]},\"PropagateTags\":\"TASK_DEFINITION\",\"EnableExecuteCommand\":true,\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"FARGATE\"}]}},\"fargate, windows, x64\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ecs.EcsException\",\"Ecs.LimitExceededException\",\"Ecs.UpdateInProgressException\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::ecs:runTask.sync\",\"Parameters\":{\"Cluster\":\"",
       {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       },
       "\",\"TaskDefinition\":\"githubrunnerstestFargateWindowstask95BB2245\",\"NetworkConfiguration\":{\"AwsvpcConfiguration\":{\"AssignPublicIp\":\"ENABLED\",\"Subnets\":[\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\"],\"SecurityGroups\":[\"",
       {
        "Fn::GetAtt": [
         "FargateWindowssecuritygroupE684A7B0",
         "GroupId"
        ]
       },
       "\"]}},\"Overrides\":{\"ContainerOverrides\":[{\"Name\":\"runner\",\"Environment\":[{\"Name\":\"RUNNER_TOKEN\",\"Value.$\":\"$.runner.token\"},{\"Name\":\"RUNNER_NAME\",\"Value.$\":\"$$.Execution.Name\"},{\"Name\":\"RUNNER_LABEL\",\"Value\":\"fargate,windows,x64\"},{\"Name\":\"GITHUB_DOMAIN\",\"Value.$\":\"$.runner.domain\"},{\"Name\":\"OWNER\",\"Value.$\":\"$.owner\"},{\"Name\":\"REPO\",\"Value.$\":\"$.repo\"}]}]},\"PropagateTags\":\"TASK_DEFINITION\",\"EnableExecuteCommand\":false,\"CapacityProviderStrategy\":[{\"CapacityProvider\":\"FARGATE\"}]}},\"ec2, linux, x64 data\":{\"Type\":\"Pass\",\"ResultPath\":\"$.ec2\",\"Parameters\":{\"userdataTemplate\":\"#!/bin/bash -x\\nTASK_TOKEN=\\\"{}\\\"\\nheartbeat () \\\\{\\n  while true; do\\n    aws stepfunctions send-task-heartbeat --task-token \\\"$TASK_TOKEN\\\"\\n    sleep 60\\n  done\\n\\\\}\\nsetup_logs () \\\\{\\n  cat <<EOF > /tmp/log.conf || exit 1\\n  \\\\{\\n    \\\"logs\\\": \\\\{\\n      \\\"log_stream_name\\\": \\\"unknown\\\",\\n      \\\"logs_collected\\\": \\\\{\\n        \\\"files\\\": \\\\{\\n          \\\"collect_list\\\": [\\n            \\\\{\\n              \\\"file_path\\\": \\\"/var/log/runner.log\\\",\\n              \\\"log_group_name\\\": \\\"{}\\\",\\n              \\\"log_stream_name\\\": \\\"{}\\\",\\n              \\\"timezone\\\": \\\"UTC\\\"\\n            \\\\}\\n          ]\\n        \\\\}\\n      \\\\}\\n    \\\\}\\n  \\\\}\\nEOF\\n  /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/tmp/log.conf || exit 2\\n\\\\}\\naction () \\\\{\\n  if [ \\\"$(< RUNNER_VERSION)\\\" = \\\"latest\\\" ]; then RUNNER_FLAGS=\\\"\\\"; else RUNNER_FLAGS=\\\"--disableupdate\\\"; fi\\n  sudo -Hu runner /home/runner/config.sh --unattended --url \\\"https://{}/{}/{}\\\" --token \\\"{}\\\" --ephemeral --work _work --labels \\\"{}\\\" $RUNNER_FLAGS --name \\\"{}\\\" || exit 1\\n  sudo --preserve-env=AWS_REGION -Hu runner /home/runner/run.sh || exit 2\\n  STATUS=$(grep -Phors \\\"finish job request for job [0-9a-f\\\\\\\\-]+ with result: \\\\\\\\K.*\\\" /home/runner/_diag/ | tail -n1)\\n  [ -n \\\"$STATUS\\\" ] && echo CDKGHA JOB DONE \\\"{}\\\" \\\"$STATUS\\\"\\n\\\\}\\nheartbeat &\\nif setup_logs && action | tee /var/log/runner.log 2>&1; then\\n  aws stepfunctions send-task-success --task-token \\\"$TASK_TOKEN\\\" --task-output '\\\\{\\\"ok\\\": true\\\\}'\\nelse\\n  aws stepfunctions send-task-failure --task-token \\\"$TASK_TOKEN\\\"\\nfi\\nsleep 10  # give cloudwatch agent its default 5 seconds buffer duration to upload logs\\npoweroff\\n\"},\"Next\":\"ec2, linux, x64 subnet iterator\"},\"ec2, linux, x64 subnet iterator\":{\"Type\":\"Parallel\",\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ec2.Ec2Exception\",\"States.Timeout\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Branches\":[{\"StartAt\":\"ec2, linux, x64 subnet1\",\"States\":{\"ec2, linux, x64 subnet1\":{\"End\":true,\"Catch\":[{\"ErrorEquals\":[\"Ec2.Ec2Exception\",\"States.Timeout\"],\"ResultPath\":\"$.lastSubnetError\",\"Next\":\"ec2, linux, x64 subnet2\"}],\"Type\":\"Task\",\"Comment\":\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"HeartbeatSeconds\":600,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:ec2:runInstances.waitForTaskToken\",\"Parameters\":{\"LaunchTemplate\":{\"LaunchTemplateId\":\"",
       {
        "Ref": "AMILinuxBuilderLaunchtemplateA29452C4"
       },
       "\"},\"MinCount\":1,\"MaxCount\":1,\"InstanceType\":\"m5.large\",\"UserData.$\":\"States.Base64Encode(States.Format($.ec2.userdataTemplate, $$.Task.Token, '",
       {
        "Ref": "EC2LinuxLogsC4CD8F14"
       },
       "', $$.Execution.Name, $.runner.domain, $.owner, $.repo, $.runner.token, 'ec2,linux,x64', $$.Execution.Name, 'ec2,linux,x64'))\",\"InstanceInitiatedShutdownBehavior\":\"terminate\",\"IamInstanceProfile\":{\"Arn\":\"",
       {
        "Fn::GetAtt": [
         "EC2LinuxInstanceProfile2D2BB473",
         "Arn"
        ]
       },
       "\"},\"MetadataOptions\":{\"HttpTokens\":\"required\"},\"SecurityGroupIds\":[\"",
       {
        "Fn::GetAtt": [
         "EC2LinuxSGF5B89300",
         "GroupId"
        ]
       },
       "\"],\"SubnetId\":\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"BlockDeviceMappings\":[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true,\"VolumeSize\":30}}]}},\"ec2, linux, x64 subnet2\":{\"End\":true,\"Type\":\"Task\",\"Comment\":\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\",\"HeartbeatSeconds\":600,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:ec2:runInstances.waitForTaskToken\",\"Parameters\":{\"LaunchTemplate\":{\"LaunchTemplateId\":\"",
       {
        "Ref": "AMILinuxBuilderLaunchtemplateA29452C4"
       },
       "\"},\"MinCount\":1,\"MaxCount\":1,\"InstanceType\":\"m5.large\",\"UserData.$\":\"States.Base64Encode(States.Format($.ec2.userdataTemplate, $$.Task.Token, '",
       {
        "Ref": "EC2LinuxLogsC4CD8F14"
       },
       "', $$.Execution.Name, $.runner.domain, $.owner, $.repo, $.runner.token, 'ec2,linux,x64', $$.Execution.Name, 'ec2,linux,x64'))\",\"InstanceInitiatedShutdownBehavior\":\"terminate\",\"IamInstanceProfile\":{\"Arn\":\"",
       {
        "Fn::GetAtt": [
         "EC2LinuxInstanceProfile2D2BB473",
         "Arn"
        ]
       },
       "\"},\"MetadataOptions\":{\"HttpTokens\":\"required\"},\"SecurityGroupIds\":[\"",
       {
        "Fn::GetAtt": [
         "EC2LinuxSGF5B89300",
         "GroupId"
        ]
       },
       "\"],\"SubnetId\":\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\",\"BlockDeviceMappings\":[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true,\"VolumeSize\":30}}]}}}}]},\"ec2-spot, linux, x64 data\":{\"Type\":\"Pass\",\"ResultPath\":\"$.ec2\",\"Parameters\":{\"userdataTemplate\":\"#!/bin/bash -x\\nTASK_TOKEN=\\\"{}\\\"\\nheartbeat () \\\\{\\n  while true; do\\n    aws stepfunctions send-task-heartbeat --task-token \\\"$TASK_TOKEN\\\"\\n    sleep 60\\n  done\\n\\\\}\\nsetup_logs () \\\\{\\n  cat <<EOF > /tmp/log.conf || exit 1\\n  \\\\{\\n    \\\"logs\\\": \\\\{\\n      \\\"log_stream_name\\\": \\\"unknown\\\",\\n      \\\"logs_collected\\\": \\\\{\\n        \\\"files\\\": \\\\{\\n          \\\"collect_list\\\": [\\n            \\\\{\\n              \\\"file_path\\\": \\\"/var/log/runner.log\\\",\\n              \\\"log_group_name\\\": \\\"{}\\\",\\n              \\\"log_stream_name\\\": \\\"{}\\\",\\n              \\\"timezone\\\": \\\"UTC\\\"\\n            \\\\}\\n          ]\\n        \\\\}\\n      \\\\}\\n    \\\\}\\n  \\\\}\\nEOF\\n  /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/tmp/log.conf || exit 2\\n\\\\}\\naction () \\\\{\\n  if [ \\\"$(< RUNNER_VERSION)\\\" = \\\"latest\\\" ]; then RUNNER_FLAGS=\\\"\\\"; else RUNNER_FLAGS=\\\"--disableupdate\\\"; fi\\n  sudo -Hu runner /home/runner/config.sh --unattended --url \\\"https://{}/{}/{}\\\" --token \\\"{}\\\" --ephemeral --work _work --labels \\\"{}\\\" $RUNNER_FLAGS --name \\\"{}\\\" || exit 1\\n  sudo --preserve-env=AWS_REGION -Hu runner /home/runner/run.sh || exit 2\\n  STATUS=$(grep -Phors \\\"finish job request for job [0-9a-f\\\\\\\\-]+ with result: \\\\\\\\K.*\\\" /home/runner/_diag/ | tail -n1)\\n  [ -n \\\"$STATUS\\\" ] && echo CDKGHA JOB DONE \\\"{}\\\" \\\"$STATUS\\\"\\n\\\\}\\nheartbeat &\\nif setup_logs && action | tee /var/log/runner.log 2>&1; then\\n  aws stepfunctions send-task-success --task-token \\\"$TASK_TOKEN\\\" --task-output '\\\\{\\\"ok\\\": true\\\\}'\\nelse\\n  aws stepfunctions send-task-failure --task-token \\\"$TASK_TOKEN\\\"\\nfi\\nsleep 10  # give cloudwatch agent its default 5 seconds buffer duration to upload logs\\npoweroff\\n\"},\"Next\":\"ec2-spot, linux, x64 subnet iterator\"},\"ec2-spot, linux, x64 subnet iterator\":{\"Type\":\"Parallel\",\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ec2.Ec2Exception\",\"States.Timeout\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Branches\":[{\"StartAt\":\"ec2-spot, linux, x64 subnet1\",\"States\":{\"ec2-spot, linux, x64 subnet1\":{\"End\":true,\"Catch\":[{\"ErrorEquals\":[\"Ec2.Ec2Exception\",\"States.Timeout\"],\"ResultPath\":\"$.lastSubnetError\",\"Next\":\"ec2-spot, linux, x64 subnet2\"}],\"Type\":\"Task\",\"Comment\":\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"HeartbeatSeconds\":600,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:ec2:runInstances.waitForTaskToken\",\"Parameters\":{\"LaunchTemplate\":{\"LaunchTemplateId\":\"",
       {
        "Ref": "AMILinuxBuilderLaunchtemplateA29452C4"
       },
       "\"},\"MinCount\":1,\"MaxCount\":1,\"InstanceType\":\"m5.large\",\"UserData.$\":\"States.Base64Encode(States.Format($.ec2.userdataTemplate, $$.Task.Token, '",
       {
        "Ref": "EC2SpotLinuxLogsF78D5F0E"
       },
       "', $$.Execution.Name, $.runner.domain, $.owner, $.repo, $.runner.token, 'ec2-spot,linux,x64', $$.Execution.Name, 'ec2-spot,linux,x64'))\",\"InstanceInitiatedShutdownBehavior\":\"terminate\",\"IamInstanceProfile\":{\"Arn\":\"",
       {
        "Fn::GetAtt": [
         "EC2SpotLinuxInstanceProfileB12320D4",
         "Arn"
        ]
       },
       "\"},\"MetadataOptions\":{\"HttpTokens\":\"required\"},\"SecurityGroupIds\":[\"",
       {
        "Fn::GetAtt": [
         "EC2SpotLinuxSG8D846B64",
         "GroupId"
        ]
       },
       "\"],\"SubnetId\":\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"BlockDeviceMappings\":[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true,\"VolumeSize\":30}}],\"InstanceMarketOptions\":{\"MarketType\":\"spot\",\"SpotOptions\":{\"SpotInstanceType\":\"one-time\"}}}},\"ec2-spot, linux, x64 subnet2\":{\"End\":true,\"Type\":\"Task\",\"Comment\":\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\",\"HeartbeatSeconds\":600,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:ec2:runInstances.waitForTaskToken\",\"Parameters\":{\"LaunchTemplate\":{\"LaunchTemplateId\":\"",
       {
        "Ref": "AMILinuxBuilderLaunchtemplateA29452C4"
       },
       "\"},\"MinCount\":1,\"MaxCount\":1,\"InstanceType\":\"m5.large\",\"UserData.$\":\"States.Base64Encode(States.Format($.ec2.userdataTemplate, $$.Task.Token, '",
       {
        "Ref": "EC2SpotLinuxLogsF78D5F0E"
       },
       "', $$.Execution.Name, $.runner.domain, $.owner, $.repo, $.runner.token, 'ec2-spot,linux,x64', $$.Execution.Name, 'ec2-spot,linux,x64'))\",\"InstanceInitiatedShutdownBehavior\":\"terminate\",\"IamInstanceProfile\":{\"Arn\":\"",
       {
        "Fn::GetAtt": [
         "EC2SpotLinuxInstanceProfileB12320D4",
         "Arn"
        ]
       },
       "\"},\"MetadataOptions\":{\"HttpTokens\":\"required\"},\"SecurityGroupIds\":[\"",
       {
        "Fn::GetAtt": [
         "EC2SpotLinuxSG8D846B64",
         "GroupId"
        ]
       },
       "\"],\"SubnetId\":\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\",\"BlockDeviceMappings\":[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true,\"VolumeSize\":30}}],\"InstanceMarketOptions\":{\"MarketType\":\"spot\",\"SpotOptions\":{\"SpotInstanceType\":\"one-time\"}}}}}}]},\"ec2, linux, arm64 data\":{\"Type\":\"Pass\",\"ResultPath\":\"$.ec2\",\"Parameters\":{\"userdataTemplate\":\"#!/bin/bash -x\\nTASK_TOKEN=\\\"{}\\\"\\nheartbeat () \\\\{\\n  while true; do\\n    aws stepfunctions send-task-heartbeat --task-token \\\"$TASK_TOKEN\\\"\\n    sleep 60\\n  done\\n\\\\}\\nsetup_logs () \\\\{\\n  cat <<EOF > /tmp/log.conf || exit 1\\n  \\\\{\\n    \\\"logs\\\": \\\\{\\n      \\\"log_stream_name\\\": \\\"unknown\\\",\\n      \\\"logs_collected\\\": \\\\{\\n        \\\"files\\\": \\\\{\\n          \\\"collect_list\\\": [\\n            \\\\{\\n              \\\"file_path\\\": \\\"/var/log/runner.log\\\",\\n              \\\"log_group_name\\\": \\\"{}\\\",\\n              \\\"log_stream_name\\\": \\\"{}\\\",\\n              \\\"timezone\\\": \\\"UTC\\\"\\n            \\\\}\\n          ]\\n        \\\\}\\n      \\\\}\\n    \\\\}\\n  \\\\}\\nEOF\\n  /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/tmp/log.conf || exit 2\\n\\\\}\\naction () \\\\{\\n  if [ \\\"$(< RUNNER_VERSION)\\\" = \\\"latest\\\" ]; then RUNNER_FLAGS=\\\"\\\"; else RUNNER_FLAGS=\\\"--disableupdate\\\"; fi\\n  sudo -Hu runner /home/runner/config.sh --unattended --url \\\"https://{}/{}/{}\\\" --token \\\"{}\\\" --ephemeral --work _work --labels \\\"{}\\\" $RUNNER_FLAGS --name \\\"{}\\\" || exit 1\\n  sudo --preserve-env=AWS_REGION -Hu runner /home/runner/run.sh || exit 2\\n  STATUS=$(grep -Phors \\\"finish job request for job [0-9a-f\\\\\\\\-]+ with result: \\\\\\\\K.*\\\" /home/runner/_diag/ | tail -n1)\\n  [ -n \\\"$STATUS\\\" ] && echo CDKGHA JOB DONE \\\"{}\\\" \\\"$STATUS\\\"\\n\\\\}\\nheartbeat &\\nif setup_logs && action | tee /var/log/runner.log 2>&1; then\\n  aws stepfunctions send-task-success --task-token \\\"$TASK_TOKEN\\\" --task-output '\\\\{\\\"ok\\\": true\\\\}'\\nelse\\n  aws stepfunctions send-task-failure --task-token \\\"$TASK_TOKEN\\\"\\nfi\\nsleep 10  # give cloudwatch agent its default 5 seconds buffer duration to upload logs\\npoweroff\\n\"},\"Next\":\"ec2, linux, arm64 subnet iterator\"},\"ec2, linux, arm64 subnet iterator\":{\"Type\":\"Parallel\",\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ec2.Ec2Exception\",\"States.Timeout\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Branches\":[{\"StartAt\":\"ec2, linux, arm64 subnet1\",\"States\":{\"ec2, linux, arm64 subnet1\":{\"End\":true,\"Catch\":[{\"ErrorEquals\":[\"Ec2.Ec2Exception\",\"States.Timeout\"],\"ResultPath\":\"$.lastSubnetError\",\"Next\":\"ec2, linux, arm64 subnet2\"}],\"Type\":\"Task\",\"Comment\":\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"HeartbeatSeconds\":600,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:ec2:runInstances.waitForTaskToken\",\"Parameters\":{\"LaunchTemplate\":{\"LaunchTemplateId\":\"",
       {
        "Ref": "AMILinuxarm64BuilderLaunchtemplate8F5EFF44"
       },
       "\"},\"MinCount\":1,\"MaxCount\":1,\"InstanceType\":\"m6g.large\",\"UserData.$\":\"States.Base64Encode(States.Format($.ec2.userdataTemplate, $$.Task.Token, '",
       {
        "Ref": "EC2Linuxarm64Logs577E371E"
       },
       "', $$.Execution.Name, $.runner.domain, $.owner, $.repo, $.runner.token, 'ec2,linux,arm64', $$.Execution.Name, 'ec2,linux,arm64'))\",\"InstanceInitiatedShutdownBehavior\":\"terminate\",\"IamInstanceProfile\":{\"Arn\":\"",
       {
        "Fn::GetAtt": [
         "EC2Linuxarm64InstanceProfile1E6F8D53",
         "Arn"
        ]
       },
       "\"},\"MetadataOptions\":{\"HttpTokens\":\"required\"},\"SecurityGroupIds\":[\"",
       {
        "Fn::GetAtt": [
         "EC2Linuxarm64SG550ECD6C",
         "GroupId"
        ]
       },
       "\"],\"SubnetId\":\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"BlockDeviceMappings\":[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true,\"VolumeSize\":30}}]}},\"ec2, linux, arm64 subnet2\":{\"End\":true,\"Type\":\"Task\",\"Comment\":\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\",\"HeartbeatSeconds\":600,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:ec2:runInstances.waitForTaskToken\",\"Parameters\":{\"LaunchTemplate\":{\"LaunchTemplateId\":\"",
       {
        "Ref": "AMILinuxarm64BuilderLaunchtemplate8F5EFF44"
       },
       "\"},\"MinCount\":1,\"MaxCount\":1,\"InstanceType\":\"m6g.large\",\"UserData.$\":\"States.Base64Encode(States.Format($.ec2.userdataTemplate, $$.Task.Token, '",
       {
        "Ref": "EC2Linuxarm64Logs577E371E"
       },
       "', $$.Execution.Name, $.runner.domain, $.owner, $.repo, $.runner.token, 'ec2,linux,arm64', $$.Execution.Name, 'ec2,linux,arm64'))\",\"InstanceInitiatedShutdownBehavior\":\"terminate\",\"IamInstanceProfile\":{\"Arn\":\"",
       {
        "Fn::GetAtt": [
         "EC2Linuxarm64InstanceProfile1E6F8D53",
         "Arn"
        ]
       },
       "\"},\"MetadataOptions\":{\"HttpTokens\":\"required\"},\"SecurityGroupIds\":[\"",
       {
        "Fn::GetAtt": [
         "EC2Linuxarm64SG550ECD6C",
         "GroupId"
        ]
       },
       "\"],\"SubnetId\":\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\",\"BlockDeviceMappings\":[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true,\"VolumeSize\":30}}]}}}}]},\"ec2, windows, x64 data\":{\"Type\":\"Pass\",\"ResultPath\":\"$.ec2\",\"Parameters\":{\"userdataTemplate\":\"<powershell>\\n$TASK_TOKEN = \\\"{}\\\"\\nStart-Job -ScriptBlock \\\\{\\n  while (1) \\\\{\\n    aws stepfunctions send-task-heartbeat --task-token \\\"$using:TASK_TOKEN\\\"\\n    sleep 60\\n  \\\\}\\n\\\\}\\nfunction setup_logs () \\\\{\\n  echo '\\\\{\\n    \\\"logs\\\": \\\\{\\n      \\\"log_stream_name\\\": \\\"unknown\\\",\\n      \\\"logs_collected\\\": \\\\{\\n        \\\"files\\\": \\\\{\\n         \\\"collect_list\\\": [\\n            \\\\{\\n              \\\"file_path\\\": \\\"/actions/runner.log\\\",\\n              \\\"log_group_name\\\": \\\"{}\\\",\\n              \\\"log_stream_name\\\": \\\"{}\\\",\\n              \\\"timezone\\\": \\\"UTC\\\"\\n            \\\\}\\n          ]\\n        \\\\}\\n      \\\\}\\n    \\\\}\\n  \\\\}' | Out-File -Encoding ASCII $Env:TEMP/log.conf\\n  & \\\"C:/Program Files/Amazon/AmazonCloudWatchAgent/amazon-cloudwatch-agent-ctl.ps1\\\" -a fetch-config -m ec2 -s -c file:$Env:TEMP/log.conf\\n\\\\}\\nfunction action () \\\\{\\n  cd /actions\\n  $RunnerVersion = Get-Content RUNNER_VERSION -Raw \\n  if ($RunnerVersion -eq \\\"latest\\\") \\\\{ $RunnerFlags = \\\"\\\" \\\\} else \\\\{ $RunnerFlags = \\\"--disableupdate\\\" \\\\}\\n  ./config.cmd --unattended --url \\\"https://{}/{}/{}\\\" --token \\\"{}\\\" --ephemeral --work _work --labels \\\"{}\\\" $RunnerFlags --name \\\"{}\\\" 2>&1 | Out-File -Encoding ASCII -Append /actions/runner.log\\n  if ($LASTEXITCODE -ne 0) \\\\{ return 1 \\\\}\\n  ./run.cmd 2>&1 | Out-File -Encoding ASCII -Append /actions/runner.log\\n  if ($LASTEXITCODE -ne 0) \\\\{ return 2 \\\\}\\n  $STATUS = Select-String -Path './_diag/*.log' -Pattern 'finish job request for job [0-9a-f\\\\\\\\-]+ with result: (.*)' | %\\\\{$_.Matches.Groups[1].Value\\\\} | Select-Object -Last 1\\n  if ($STATUS) \\\\{ echo \\\"CDKGHA JOB DONE {} $STATUS\\\" | Out-File -Encoding ASCII -Append /actions/runner.log \\\\}\\n  return 0\\n\\\\}\\nsetup_logs\\n$r = action\\nif ($r -eq 0) \\\\{\\n  aws stepfunctions send-task-success --task-token \\\"$TASK_TOKEN\\\" --task-output '\\\\{ \\\\}'\\n\\\\} else \\\\{\\n  aws stepfunctions send-task-failure --task-token \\\"$TASK_TOKEN\\\"\\n\\\\}\\nStart-Sleep -Seconds 10  # give cloudwatch agent its default 5 seconds buffer duration to upload logs\\nStop-Computer -ComputerName localhost -Force\\n</powershell>\\n\"},\"Next\":\"ec2, windows, x64 subnet iterator\"},\"ec2, windows, x64 subnet iterator\":{\"Type\":\"Parallel\",\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Ec2.Ec2Exception\",\"States.Timeout\"],\"IntervalSeconds\":60,\"MaxAttempts\":10,\"BackoffRate\":1.3}],\"Branches\":[{\"StartAt\":\"ec2, windows, x64 subnet1\",\"States\":{\"ec2, windows, x64 subnet1\":{\"End\":true,\"Catch\":[{\"ErrorEquals\":[\"Ec2.Ec2Exception\",\"States.Timeout\"],\"ResultPath\":\"$.lastSubnetError\",\"Next\":\"ec2, windows, x64 subnet2\"}],\"Type\":\"Task\",\"Comment\":\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"HeartbeatSeconds\":600,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:ec2:runInstances.waitForTaskToken\",\"Parameters\":{\"LaunchTemplate\":{\"LaunchTemplateId\":\"",
       {
        "Ref": "WindowsEC2BuilderLaunchtemplate0A66E9C2"
       },
       "\"},\"MinCount\":1,\"MaxCount\":1,\"InstanceType\":\"m5.large\",\"UserData.$\":\"States.Base64Encode(States.Format($.ec2.userdataTemplate, $$.Task.Token, '",
       {
        "Ref": "EC2WindowsLogsDC1F2ABF"
       },
       "', $$.Execution.Name, $.runner.domain, $.owner, $.repo, $.runner.token, 'ec2,windows,x64', $$.Execution.Name, 'ec2,windows,x64'))\",\"InstanceInitiatedShutdownBehavior\":\"terminate\",\"IamInstanceProfile\":{\"Arn\":\"",
       {
        "Fn::GetAtt": [
         "EC2WindowsInstanceProfileDCA59D9C",
         "Arn"
        ]
       },
       "\"},\"MetadataOptions\":{\"HttpTokens\":\"required\"},\"SecurityGroupIds\":[\"",
       {
        "Fn::GetAtt": [
         "EC2WindowsSG13E24976",
         "GroupId"
        ]
       },
       "\"],\"SubnetId\":\"",
       {
        "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
       },
       "\",\"BlockDeviceMappings\":[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true,\"VolumeSize\":30}}]}},\"ec2, windows, x64 subnet2\":{\"End\":true,\"Type\":\"Task\",\"Comment\":\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\",\"HeartbeatSeconds\":600,\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:ec2:runInstances.waitForTaskToken\",\"Parameters\":{\"LaunchTemplate\":{\"LaunchTemplateId\":\"",
       {
        "Ref": "WindowsEC2BuilderLaunchtemplate0A66E9C2"
       },
       "\"},\"MinCount\":1,\"MaxCount\":1,\"InstanceType\":\"m5.large\",\"UserData.$\":\"States.Base64Encode(States.Format($.ec2.userdataTemplate, $$.Task.Token, '",
       {
        "Ref": "EC2WindowsLogsDC1F2ABF"
       },
       "', $$.Execution.Name, $.runner.domain, $.owner, $.repo, $.runner.token, 'ec2,windows,x64', $$.Execution.Name, 'ec2,windows,x64'))\",\"InstanceInitiatedShutdownBehavior\":\"terminate\",\"IamInstanceProfile\":{\"Arn\":\"",
       {
        "Fn::GetAtt": [
         "EC2WindowsInstanceProfileDCA59D9C",
         "Arn"
        ]
       },
       "\"},\"MetadataOptions\":{\"HttpTokens\":\"required\"},\"SecurityGroupIds\":[\"",
       {
        "Fn::GetAtt": [
         "EC2WindowsSG13E24976",
         "GroupId"
        ]
       },
       "\"],\"SubnetId\":\"",
       {
        "Ref": "VpcPublicSubnet2Subnet691E08A3"
       },
       "\",\"BlockDeviceMappings\":[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true,\"VolumeSize\":30}}]}}}}]}}},{\"StartAt\":\"Wait\",\"States\":{\"Wait\":{\"Type\":\"Wait\",\"Seconds\":600,\"Next\":\"Delete Idle Runner\"},\"Delete Idle Runner\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"ResultPath\":\"$.delete\",\"Resource\":\"",
       {
        "Fn::GetAtt": [
         "runnersdeleterunner7F8D5293",
         "Arn"
        ]
       },
       "\",\"Parameters\":{\"runnerName.$\":\"$$.Execution.Name\",\"owner.$\":\"$.owner\",\"repo.$\":\"$.repo\",\"runId.$\":\"$.runId\",\"installationId.$\":\"$.installationId\",\"idleOnly\":true}}}}]},\"Delete Runner\":{\"Next\":\"Runner Failed\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2},{\"ErrorEquals\":[\"RunnerBusy\"],\"IntervalSeconds\":60,\"MaxAttempts\":60,\"BackoffRate\":1}],\"Type\":\"Task\",\"ResultPath\":\"$.delete\",\"Resource\":\"",
       {
        "Fn::GetAtt": [
         "runnersdeleterunner7F8D5293",
         "Arn"
        ]
       },
       "\",\"Parameters\":{\"runnerName.$\":\"$$.Execution.Name\",\"owner.$\":\"$.owner\",\"repo.$\":\"$.repo\",\"runId.$\":\"$.runId\",\"installationId.$\":\"$.installationId\",\"idleOnly\":false}},\"Runner Failed\":{\"Type\":\"Fail\"}}}"
      ]
     ]
    }
   },
   "DependsOn": [
    "runnersRunnerOrchestratorRoleDefaultPolicyD1C26D61",
    "runnersRunnerOrchestratorRole5D220AD7"
   ]
  },
  "runnersWebhookHandlerwebhookhandlerServiceRole03DB58D2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "runnersWebhookHandlerwebhookhandlerServiceRoleDefaultPolicy1600452C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsWebhook7AF0D74E"
       }
      },
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersRunnerOrchestratorF9B66EBA"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "runnersWebhookHandlerwebhookhandlerServiceRoleDefaultPolicy1600452C",
    "Roles": [
     {
      "Ref": "runnersWebhookHandlerwebhookhandlerServiceRole03DB58D2"
     }
    ]
   }
  },
  "runnersWebhookHandlerwebhookhandler22779A81": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "d74a3d886e6a038a7db2c9fa8ca2c8f44267a58a594c9f361aeedf969ac70a31.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "runnersWebhookHandlerwebhookhandlerServiceRole03DB58D2",
      "Arn"
     ]
    },
    "Description": "Handle GitHub webhook and start runner orchestrator",
    "Environment": {
     "Variables": {
      "STEP_FUNCTION_ARN": {
       "Ref": "runnersRunnerOrchestratorF9B66EBA"
      },
      "WEBHOOK_SECRET_ARN": {
       "Ref": "runnersSecretsWebhook7AF0D74E"
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 30
   },
   "DependsOn": [
    "runnersWebhookHandlerwebhookhandlerServiceRoleDefaultPolicy1600452C",
    "runnersWebhookHandlerwebhookhandlerServiceRole03DB58D2"
   ]
  },
  "runnersWebhookHandlerwebhookhandlerLogRetention0F5ED260": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "runnersWebhookHandlerwebhookhandler22779A81"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "runnersWebhookHandlerwebhookhandlerFunctionUrlC8FB3D17": {
   "Type": "AWS::Lambda::Url",
   "Properties": {
    "AuthType": "NONE",
    "TargetFunctionArn": {
     "Fn::GetAtt": [
      "runnersWebhookHandlerwebhookhandler22779A81",
      "Arn"
     ]
    }
   }
  },
  "runnersWebhookHandlerwebhookhandlerinvokefunctionurl871AC245": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunctionUrl",
    "FunctionName": {
     "Fn::GetAtt": [
      "runnersWebhookHandlerwebhookhandler22779A81",
      "Arn"
     ]
    },
    "Principal": "*",
    "FunctionUrlAuthType": "NONE"
   }
  },
  "runnerssetupServiceRole588BFE9A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "runnerssetupServiceRoleDefaultPolicy40EF213B": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "secretsmanager:PutSecretValue",
        "secretsmanager:UpdateSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsWebhook7AF0D74E"
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubEFD96479"
       }
      },
      {
       "Action": [
        "secretsmanager:PutSecretValue",
        "secretsmanager:UpdateSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubEFD96479"
       }
      },
      {
       "Action": [
        "secretsmanager:PutSecretValue",
        "secretsmanager:UpdateSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubPrivateKey79498F91"
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsSetup692A93B1"
       }
      },
      {
       "Action": [
        "secretsmanager:PutSecretValue",
        "secretsmanager:UpdateSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsSetup692A93B1"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "runnerssetupServiceRoleDefaultPolicy40EF213B",
    "Roles": [
     {
      "Ref": "runnerssetupServiceRole588BFE9A"
     }
    ]
   }
  },
  "runnerssetup9896CB59": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "384d7936c7595ec1f1462ed4cb4f4a7c2b8788af1b76a91e6d1d38c8a57ce387.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "runnerssetupServiceRole588BFE9A",
      "Arn"
     ]
    },
    "Description": "Setup GitHub Actions integration with self-hosted runners",
    "Environment": {
     "Variables": {
      "SETUP_SECRET_ARN": {
       "Ref": "runnersSecretsSetup692A93B1"
      },
      "WEBHOOK_SECRET_ARN": {
       "Ref": "runnersSecretsWebhook7AF0D74E"
      },
      "GITHUB_SECRET_ARN": {
       "Ref": "runnersSecretsGitHubEFD96479"
      },
      "GITHUB_PRIVATE_KEY_SECRET_ARN": {
       "Ref": "runnersSecretsGitHubPrivateKey79498F91"
      },
      "WEBHOOK_URL": {
       "Fn::GetAtt": [
        "runnersWebhookHandlerwebhookhandlerFunctionUrlC8FB3D17",
        "FunctionUrl"
       ]
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 180
   },
   "DependsOn": [
    "runnerssetupServiceRoleDefaultPolicy40EF213B",
    "runnerssetupServiceRole588BFE9A"
   ]
  },
  "runnerssetupLogRetentionA9A82D27": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "runnerssetup9896CB59"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "runnerssetupFunctionUrlB8BC43E8": {
   "Type": "AWS::Lambda::Url",
   "Properties": {
    "AuthType": "NONE",
    "TargetFunctionArn": {
     "Fn::GetAtt": [
      "runnerssetup9896CB59",
      "Arn"
     ]
    }
   }
  },
  "runnerssetupinvokefunctionurl5F3B865C": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunctionUrl",
    "FunctionName": {
     "Fn::GetAtt": [
      "runnerssetup9896CB59",
      "Arn"
     ]
    },
    "Principal": "*",
    "FunctionUrlAuthType": "NONE"
   }
  },
  "runnersstatusServiceRole71A1ADB6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "runnersstatusServiceRoleDefaultPolicyBD4E619B": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderRepository9DE3B6F0",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "CodeBuildImageBuilderarmRepositoryE967421B",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "WindowsImageBuilderRepositoryA4CBB6D8",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderx64Repository57F632F1",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LambdaImageBuilderzRepository7C7AD146",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderRepository8F7BA13C",
         "Arn"
        ]
       }
      },
      {
       "Action": "ecr:DescribeImages",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "FargatebuilderarmRepository77DCC132",
         "Arn"
        ]
       }
      },
      {
       "Action": "ec2:DescribeLaunchTemplateVersions",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "cloudformation:DescribeStackResource",
       "Effect": "Allow",
       "Resource": {
        "Ref": "AWS::StackId"
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsWebhook7AF0D74E"
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubEFD96479"
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsGitHubPrivateKey79498F91"
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersSecretsSetup692A93B1"
       }
      },
      {
       "Action": [
        "states:ListExecutions",
        "states:ListStateMachines"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersRunnerOrchestratorF9B66EBA"
       }
      },
      {
       "Action": [
        "states:DescribeExecution",
        "states:DescribeStateMachineForExecution",
        "states:GetExecutionHistory"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":states:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":execution:",
          {
           "Fn::Select": [
            6,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "runnersRunnerOrchestratorF9B66EBA"
              }
             ]
            }
           ]
          },
          ":*"
         ]
        ]
       }
      },
      {
       "Action": [
        "states:ListActivities",
        "states:DescribeStateMachine",
        "states:DescribeActivity"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "runnersstatusServiceRoleDefaultPolicyBD4E619B",
    "Roles": [
     {
      "Ref": "runnersstatusServiceRole71A1ADB6"
     }
    ]
   }
  },
  "runnersstatus1A5771C0": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "8e7085171cd102abb5ef29ff9d33ee97ef9e9d763c9140ee21ad31cfd1906c51.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "runnersstatusServiceRole71A1ADB6",
      "Arn"
     ]
    },
    "Description": "Provide user with status about self-hosted GitHub Actions runners",
    "Environment": {
     "Variables": {
      "WEBHOOK_SECRET_ARN": {
       "Ref": "runnersSecretsWebhook7AF0D74E"
      },
      "GITHUB_SECRET_ARN": {
       "Ref": "runnersSecretsGitHubEFD96479"
      },
      "GITHUB_PRIVATE_KEY_SECRET_ARN": {
       "Ref": "runnersSecretsGitHubPrivateKey79498F91"
      },
      "SETUP_SECRET_ARN": {
       "Ref": "runnersSecretsSetup692A93B1"
      },
      "WEBHOOK_URL": {
       "Fn::GetAtt": [
        "runnersWebhookHandlerwebhookhandlerFunctionUrlC8FB3D17",
        "FunctionUrl"
       ]
      },
      "WEBHOOK_HANDLER_ARN": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::GetAtt": [
           "runnersWebhookHandlerwebhookhandler22779A81",
           "Arn"
          ]
         },
         ":$LATEST"
        ]
       ]
      },
      "STEP_FUNCTION_ARN": {
       "Ref": "runnersRunnerOrchestratorF9B66EBA"
      },
      "STEP_FUNCTION_LOG_GROUP": "",
      "SETUP_FUNCTION_URL": {
       "Fn::GetAtt": [
        "runnerssetupFunctionUrlB8BC43E8",
        "FunctionUrl"
       ]
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
      "LOGICAL_ID": "runnersstatus1A5771C0",
      "STACK_NAME": "github-runners-test"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x",
    "Timeout": 180
   },
   "DependsOn": [
    "runnersstatusServiceRoleDefaultPolicyBD4E619B",
    "runnersstatusServiceRole71A1ADB6"
   ],
   "Metadata": {
    "providers": [
     {
      "type": "CodeBuildRunnerProvider",
      "labels": [
       "codebuild-x64"
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "CodeBuildx64CodeBuildRole32E5C764",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "CodeBuildx64LogsA21ECD59"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "CodeBuildImageBuilderRepository9DE3B6F0",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "CodeBuildImageBuilderRepository9DE3B6F0",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "CodeBuildImageBuilderLogsE4CADFCC"
       }
      }
     },
     {
      "type": "CodeBuildRunnerProvider",
      "labels": [
       "codebuild",
       "linux",
       "arm64"
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "CodeBuildARMCodeBuildRole74DB4985",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "CodeBuildARMLogs7C7FC5A7"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "CodeBuildImageBuilderarmRepositoryE967421B",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "CodeBuildImageBuilderarmRepositoryE967421B",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "CodeBuildImageBuilderarmLogs5A60CB81"
       }
      }
     },
     {
      "type": "CodeBuildRunnerProvider",
      "labels": [
       "codebuild",
       "windows",
       "x64"
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "CodeBuildWindowsCodeBuildRoleDC93697E",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "CodeBuildWindowsLogsF4DD93A5"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "WindowsImageBuilderRepositoryA4CBB6D8",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "WindowsImageBuilderRepositoryA4CBB6D8",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "WindowsImageBuilderDockerLogE660E23E"
       }
      }
     },
     {
      "type": "EcsRunnerProvider",
      "labels": [
       "ecs",
       "linux",
       "x64"
      ],
      "vpcArn": {
       "Fn::Join": [
        "",
        [
         "arn:",
         {
          "Ref": "AWS::Partition"
         },
         ":ec2:",
         {
          "Ref": "AWS::Region"
         },
         ":",
         {
          "Ref": "AWS::AccountId"
         },
         ":vpc/",
         {
          "Ref": "Vpc8378EB38"
         }
        ]
       ]
      },
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "ECSsecuritygroup76605212",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "ECStaskTaskRoleFE831ECD",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "ECSlogs71446134"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "CodeBuildImageBuilderRepository9DE3B6F0",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "CodeBuildImageBuilderRepository9DE3B6F0",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "CodeBuildImageBuilderRepository9DE3B6F0"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "CodeBuildImageBuilderLogsE4CADFCC"
       }
      }
     },
     {
      "type": "EcsRunnerProvider",
      "labels": [
       "ecs",
       "linux",
       "arm64"
      ],
      "vpcArn": {
       "Fn::Join": [
        "",
        [
         "arn:",
         {
          "Ref": "AWS::Partition"
         },
         ":ec2:",
         {
          "Ref": "AWS::Region"
         },
         ":",
         {
          "Ref": "AWS::AccountId"
         },
         ":vpc/",
         {
          "Ref": "Vpc8378EB38"
         }
        ]
       ]
      },
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "ECSARM64securitygroup281D94B2",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "ECSARM64taskTaskRole23B1CB4E",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "ECSARM64logs1A2F1E00"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "CodeBuildImageBuilderarmRepositoryE967421B",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "CodeBuildImageBuilderarmRepositoryE967421B",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "CodeBuildImageBuilderarmRepositoryE967421B"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "CodeBuildImageBuilderarmLogs5A60CB81"
       }
      }
     },
     {
      "type": "EcsRunnerProvider",
      "labels": [
       "ecs",
       "windows",
       "x64"
      ],
      "vpcArn": {
       "Fn::Join": [
        "",
        [
         "arn:",
         {
          "Ref": "AWS::Partition"
         },
         ":ec2:",
         {
          "Ref": "AWS::Region"
         },
         ":",
         {
          "Ref": "AWS::AccountId"
         },
         ":vpc/",
         {
          "Ref": "Vpc8378EB38"
         }
        ]
       ]
      },
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "ECSWindowssecuritygroupB4EE54DA",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "ECSWindowstaskTaskRole17C8DA48",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "ECSWindowslogs83D9D352"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "WindowsImageBuilderRepositoryA4CBB6D8",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "WindowsImageBuilderRepositoryA4CBB6D8",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "WindowsImageBuilderDockerLogE660E23E"
       }
      }
     },
     {
      "type": "LambdaRunnerProvider",
      "labels": [
       "lambda",
       "x64"
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "LambdaFunctionServiceRoleB1826A50",
        "Arn"
       ]
      },
      "logGroup": {
       "Fn::GetAtt": [
        "LambdaFunctionLogRetentionB6D78D6D",
        "LogGroupName"
       ]
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "LambdaImageBuilderx64Repository57F632F1",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "LambdaImageBuilderx64Repository57F632F1",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "LambdaImageBuilderx64Repository57F632F1"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "LambdaImageBuilderx64Logs1C003BB4"
       }
      }
     },
     {
      "type": "LambdaRunnerProvider",
      "labels": [
       "lambda",
       "arm64"
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "LambdaARMFunctionServiceRole136069A0",
        "Arn"
       ]
      },
      "logGroup": {
       "Fn::GetAtt": [
        "LambdaARMFunctionLogRetention67E9FEF8",
        "LogGroupName"
       ]
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "LambdaImageBuilderzRepository7C7AD146",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "LambdaImageBuilderzRepository7C7AD146",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "LambdaImageBuilderzRepository7C7AD146"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "LambdaImageBuilderzLogsC9FB42C8"
       }
      }
     },
     {
      "type": "FargateRunnerProvider",
      "labels": [
       "fargate",
       "linux",
       "x64"
      ],
      "vpcArn": {
       "Fn::Join": [
        "",
        [
         "arn:",
         {
          "Ref": "AWS::Partition"
         },
         ":ec2:",
         {
          "Ref": "AWS::Region"
         },
         ":",
         {
          "Ref": "AWS::AccountId"
         },
         ":vpc/",
         {
          "Ref": "Vpc8378EB38"
         }
        ]
       ]
      },
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "FargatesecuritygroupAFCAFD34",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "FargatetaskTaskRoleEFFCDAF8",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "FargatelogsCB753638"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "FargatebuilderRepository8F7BA13C",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "FargatebuilderRepository8F7BA13C",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "FargatebuilderRepository8F7BA13C"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "FargatebuilderLogs2F794091"
       }
      }
     },
     {
      "type": "FargateRunnerProvider",
      "labels": [
       "fargate-spot",
       "linux",
       "x64"
      ],
      "vpcArn": {
       "Fn::Join": [
        "",
        [
         "arn:",
         {
          "Ref": "AWS::Partition"
         },
         ":ec2:",
         {
          "Ref": "AWS::Region"
         },
         ":",
         {
          "Ref": "AWS::AccountId"
         },
         ":vpc/",
         {
          "Ref": "Vpc8378EB38"
         }
        ]
       ]
      },
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "Fargatex64spotsecuritygroup2A9F4299",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "Fargatex64spottaskTaskRole02893C25",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "Fargatex64spotlogs0BCF618B"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "FargatebuilderRepository8F7BA13C",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "FargatebuilderRepository8F7BA13C",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "FargatebuilderRepository8F7BA13C"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "FargatebuilderLogs2F794091"
       }
      }
     },
     {
      "type": "FargateRunnerProvider",
      "labels": [
       "fargate",
       "linux",
       "arm64"
      ],
      "vpcArn": {
       "Fn::Join": [
        "",
        [
         "arn:",
         {
          "Ref": "AWS::Partition"
         },
         ":ec2:",
         {
          "Ref": "AWS::Region"
         },
         ":",
         {
          "Ref": "AWS::AccountId"
         },
         ":vpc/",
         {
          "Ref": "Vpc8378EB38"
         }
        ]
       ]
      },
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "Fargatearm64securitygroup08ABAD9E",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "Fargatearm64taskTaskRoleD3C2CD58",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "Fargatearm64logs00171A52"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "FargatebuilderarmRepository77DCC132",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "FargatebuilderarmRepository77DCC132",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "FargatebuilderarmRepository77DCC132"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "FargatebuilderarmLogs63D60F4D"
       }
      }
     },
     {
      "type": "FargateRunnerProvider",
      "labels": [
       "fargate-spot",
       "linux",
       "arm64"
      ],
      "vpcArn": {
       "Fn::Join": [
        "",
        [
         "arn:",
         {
          "Ref": "AWS::Partition"
         },
         ":ec2:",
         {
          "Ref": "AWS::Region"
         },
         ":",
         {
          "Ref": "AWS::AccountId"
         },
         ":vpc/",
         {
          "Ref": "Vpc8378EB38"
         }
        ]
       ]
      },
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "Fargatearm64spotsecuritygroup20C885E4",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "Fargatearm64spottaskTaskRole0F078C81",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "Fargatearm64spotlogsEFCCEC59"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "FargatebuilderarmRepository77DCC132",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "FargatebuilderarmRepository77DCC132",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "FargatebuilderarmRepository77DCC132"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "FargatebuilderarmLogs63D60F4D"
       }
      }
     },
     {
      "type": "FargateRunnerProvider",
      "labels": [
       "fargate",
       "windows",
       "x64"
      ],
      "vpcArn": {
       "Fn::Join": [
        "",
        [
         "arn:",
         {
          "Ref": "AWS::Partition"
         },
         ":ec2:",
         {
          "Ref": "AWS::Region"
         },
         ":",
         {
          "Ref": "AWS::AccountId"
         },
         ":vpc/",
         {
          "Ref": "Vpc8378EB38"
         }
        ]
       ]
      },
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "FargateWindowssecuritygroupE684A7B0",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "FargateWindowstaskTaskRole364508C8",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "FargateWindowslogs52881DBF"
      },
      "image": {
       "imageRepository": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::Select": [
            4,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "WindowsImageBuilderRepositoryA4CBB6D8",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".dkr.ecr.",
          {
           "Fn::Select": [
            3,
            {
             "Fn::Split": [
              ":",
              {
               "Fn::GetAtt": [
                "WindowsImageBuilderRepositoryA4CBB6D8",
                "Arn"
               ]
              }
             ]
            }
           ]
          },
          ".",
          {
           "Ref": "AWS::URLSuffix"
          },
          "/",
          {
           "Ref": "WindowsImageBuilderRepositoryA4CBB6D8"
          }
         ]
        ]
       },
       "imageTag": "latest",
       "imageBuilderLogGroup": {
        "Ref": "WindowsImageBuilderDockerLogE660E23E"
       }
      }
     },
     {
      "type": "Ec2RunnerProvider",
      "labels": [
       "ec2",
       "linux",
       "x64"
      ],
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "EC2LinuxSGF5B89300",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "EC2LinuxRole8B6519A2",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "EC2LinuxLogsC4CD8F14"
      },
      "ami": {
       "launchTemplate": {
        "Ref": "AMILinuxBuilderLaunchtemplateA29452C4"
       },
       "amiBuilderLogGroup": {
        "Ref": "AMILinuxBuilderAmiLog0DB16E38"
       }
      }
     },
     {
      "type": "Ec2RunnerProvider",
      "labels": [
       "ec2-spot",
       "linux",
       "x64"
      ],
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "EC2SpotLinuxSG8D846B64",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "EC2SpotLinuxRole86333E5D",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "EC2SpotLinuxLogsF78D5F0E"
      },
      "ami": {
       "launchTemplate": {
        "Ref": "AMILinuxBuilderLaunchtemplateA29452C4"
       },
       "amiBuilderLogGroup": {
        "Ref": "AMILinuxBuilderAmiLog0DB16E38"
       }
      }
     },
     {
      "type": "Ec2RunnerProvider",
      "labels": [
       "ec2",
       "linux",
       "arm64"
      ],
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "EC2Linuxarm64SG550ECD6C",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "EC2Linuxarm64Role242F68FF",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "EC2Linuxarm64Logs577E371E"
      },
      "ami": {
       "launchTemplate": {
        "Ref": "AMILinuxarm64BuilderLaunchtemplate8F5EFF44"
       },
       "amiBuilderLogGroup": {
        "Ref": "AMILinuxarm64BuilderAmiLog84A9D94A"
       }
      }
     },
     {
      "type": "Ec2RunnerProvider",
      "labels": [
       "ec2",
       "windows",
       "x64"
      ],
      "securityGroups": [
       {
        "Fn::GetAtt": [
         "EC2WindowsSG13E24976",
         "GroupId"
        ]
       }
      ],
      "roleArn": {
       "Fn::GetAtt": [
        "EC2WindowsRoleC0D850D2",
        "Arn"
       ]
      },
      "logGroup": {
       "Ref": "EC2WindowsLogsDC1F2ABF"
      },
      "ami": {
       "launchTemplate": {
        "Ref": "WindowsEC2BuilderLaunchtemplate0A66E9C2"
       },
       "amiBuilderLogGroup": {
        "Ref": "WindowsEC2BuilderAmiLog126E54B2"
       }
      }
     }
    ]
   }
  },
  "runnersstatusLogRetention8EB4A773": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "runnersstatus1A5771C0"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "runnersFailedRunnerImageBuilds233D2237": {
   "Type": "AWS::SNS::Topic"
  },
  "runnersFailedRunnerImageBuildsPolicyC1C99AF8": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Principal": {
        "Service": "codestar-notifications.amazonaws.com"
       },
       "Resource": {
        "Ref": "runnersFailedRunnerImageBuilds233D2237"
       },
       "Sid": "0"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "runnersFailedRunnerImageBuilds233D2237"
     }
    ]
   }
  },
  "runnersImageBuilderBuildsDF5A50E4": {
   "Type": "AWS::SNS::Topic"
  },
  "runnersImageBuilderBuildsFilterServiceRoleED82BC5F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   }
  },
  "runnersImageBuilderBuildsFilterServiceRoleDefaultPolicy4525F6C1": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "runnersFailedRunnerImageBuilds233D2237"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "runnersImageBuilderBuildsFilterServiceRoleDefaultPolicy4525F6C1",
    "Roles": [
     {
      "Ref": "runnersImageBuilderBuildsFilterServiceRoleED82BC5F"
     }
    ]
   }
  },
  "runnersImageBuilderBuildsFilterD708AA06": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7ec9cb4e467dc74f938f17d00e09a1eda0eddd50e3720c555634b79e8e394354.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "runnersImageBuilderBuildsFilterServiceRoleED82BC5F",
      "Arn"
     ]
    },
    "Description": "src/image-builders/aws-image-builder/filter-failed-builds.lambda.ts",
    "Environment": {
     "Variables": {
      "TARGET_TOPIC_ARN": {
       "Ref": "runnersFailedRunnerImageBuilds233D2237"
      },
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Runtime": "nodejs16.x"
   },
   "DependsOn": [
    "runnersImageBuilderBuildsFilterServiceRoleDefaultPolicy4525F6C1",
    "runnersImageBuilderBuildsFilterServiceRoleED82BC5F"
   ]
  },
  "runnersImageBuilderBuildsFilterLogRetentionD5005098": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "runnersImageBuilderBuildsFilterD708AA06"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   }
  },
  "runnersImageBuilderBuildsFilterAllowInvokegithubrunnerstestrunnersImageBuilderBuilds109FC9E855AB30DD": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "runnersImageBuilderBuildsFilterD708AA06",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "runnersImageBuilderBuildsDF5A50E4"
    }
   }
  },
  "runnersImageBuilderBuildsFilterImageBuilderBuilds7F42F563": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "runnersImageBuilderBuildsDF5A50E4"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "runnersImageBuilderBuildsFilterD708AA06",
      "Arn"
     ]
    }
   }
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
  },
  "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2arm64recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id"
  },
  "SsmParameterValueawsserviceecsoptimizedamiwindowsserver2019englishfullrecommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/windows_server/2019/english/full/recommended/image_id"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "runnersstatuscommand4A30F0F5": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "aws --region ",
      {
       "Ref": "AWS::Region"
      },
      " lambda invoke --function-name ",
      {
       "Ref": "runnersstatus1A5771C0"
      },
      " status.json"
     ]
    ]
   }
  }
 },
 "Mappings": {
  "ServiceprincipalMap": {
   "af-south-1": {
    "states": "states.af-south-1.amazonaws.com"
   },
   "ap-east-1": {
    "states": "states.ap-east-1.amazonaws.com"
   },
   "ap-northeast-1": {
    "states": "states.ap-northeast-1.amazonaws.com"
   },
   "ap-northeast-2": {
    "states": "states.ap-northeast-2.amazonaws.com"
   },
   "ap-northeast-3": {
    "states": "states.ap-northeast-3.amazonaws.com"
   },
   "ap-south-1": {
    "states": "states.ap-south-1.amazonaws.com"
   },
   "ap-southeast-1": {
    "states": "states.ap-southeast-1.amazonaws.com"
   },
   "ap-southeast-2": {
    "states": "states.ap-southeast-2.amazonaws.com"
   },
   "ap-southeast-3": {
    "states": "states.ap-southeast-3.amazonaws.com"
   },
   "ca-central-1": {
    "states": "states.ca-central-1.amazonaws.com"
   },
   "cn-north-1": {
    "states": "states.cn-north-1.amazonaws.com"
   },
   "cn-northwest-1": {
    "states": "states.cn-northwest-1.amazonaws.com"
   },
   "eu-central-1": {
    "states": "states.eu-central-1.amazonaws.com"
   },
   "eu-north-1": {
    "states": "states.eu-north-1.amazonaws.com"
   },
   "eu-south-1": {
    "states": "states.eu-south-1.amazonaws.com"
   },
   "eu-south-2": {
    "states": "states.eu-south-2.amazonaws.com"
   },
   "eu-west-1": {
    "states": "states.eu-west-1.amazonaws.com"
   },
   "eu-west-2": {
    "states": "states.eu-west-2.amazonaws.com"
   },
   "eu-west-3": {
    "states": "states.eu-west-3.amazonaws.com"
   },
   "me-south-1": {
    "states": "states.me-south-1.amazonaws.com"
   },
   "sa-east-1": {
    "states": "states.sa-east-1.amazonaws.com"
   },
   "us-east-1": {
    "states": "states.us-east-1.amazonaws.com"
   },
   "us-east-2": {
    "states": "states.us-east-2.amazonaws.com"
   },
   "us-gov-east-1": {
    "states": "states.us-gov-east-1.amazonaws.com"
   },
   "us-gov-west-1": {
    "states": "states.us-gov-west-1.amazonaws.com"
   },
   "us-iso-east-1": {
    "states": "states.amazonaws.com"
   },
   "us-iso-west-1": {
    "states": "states.amazonaws.com"
   },
   "us-isob-east-1": {
    "states": "states.amazonaws.com"
   },
   "us-west-1": {
    "states": "states.us-west-1.amazonaws.com"
   },
   "us-west-2": {
    "states": "states.us-west-2.amazonaws.com"
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}